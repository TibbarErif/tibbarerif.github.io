<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（五）</title>
      <link href="2021/05/05/monster-game-5/"/>
      <url>2021/05/05/monster-game-5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>unity 自带了一套动画系统，还内置了“状态机”。</p><p>状态机是一种可以实现不同状态之间互相转换的机制。</p><p>本篇开始制作角色的攻击动作以及其他一些动画。</p><p>unity 的动画系统比起 cocos 复杂很多，在网上没找到比较好的教程，因此决定自己看官方文档。</p><p>官方文档：<a href="https://docs.unity3d.com/cn/2020.3/Manual/AnimationSection.html">https://docs.unity3d.com/cn/2020.3/Manual/AnimationSection.html</a></p><h2 id="攻击系统"><a href="#攻击系统" class="headerlink" title="攻击系统"></a>攻击系统</h2><p>制作动画之前，要先把角色的攻击功能做出来。</p><h3 id="攻击事件"><a href="#攻击事件" class="headerlink" title="攻击事件"></a>攻击事件</h3><p>前文写的方法是通过按键实现连发攻击。</p><p>现在为了让手感更加丝滑，改成按一下攻击键就发射一颗子弹。</p><p>使用 <code>GetButtonDown</code> 来监听玩家按下攻击键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private void PressedKey()</span><br><span class="line">&#123;</span><br><span class="line">    horizontal &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGround)</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 新增</span><br><span class="line">    if (Input.GetButtonDown(&quot;Fire1&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        Shoot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写 <code>Shoot</code> 方法，在这里创建子弹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void Shoot()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint);</span><br><span class="line"></span><br><span class="line">    MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">    bullet.attacker &#x3D; this;</span><br><span class="line"></span><br><span class="line">    bulletObj.transform.SetParent(bg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样按键攻击的功能就完成了。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/tszeso.gif" alt="按键射击"></p><p>这里的子弹以及如何让子弹飞离屏幕就消失，前面发的博文已经有介绍了，故不再重复说明。</p><h3 id="刚体碰撞问题"><a href="#刚体碰撞问题" class="headerlink" title="刚体碰撞问题"></a>刚体碰撞问题</h3><p>因为现在使用了物理系统，所以之前使用的区域检测法让子弹消失会出现问题。</p><p>如下图：</p><p><img src="https://files.catbox.moe/osp1cd.jpg" alt="内部碰撞"></p><p>这是刚体和刚体之间会发生碰撞，产生物理效果。</p><p>虽然碰撞区域移除了重力影响，但现在这个场景里面，角色身上有刚体组件，地板也有刚体组件，这样必然会触发物理系统，结果就是碰撞区域发生了偏移。</p><p>因为我已经把角色的操控系统改成用物理效果来实现了，原理已经不同了。</p><p>现在不能让碰撞区域作为刚体，而是要让子弹、敌人和玩家作为刚体，区域检测器设置为触发器。</p><p>尽管让子弹加上刚体会影响性能，但至少要先把功能实现了再说，如果出现卡顿现象，到时候再想办法优化。</p><p>（这个小游戏不是弹幕游戏，应该不至于会出现性能问题）</p><h3 id="子弹实例"><a href="#子弹实例" class="headerlink" title="子弹实例"></a>子弹实例</h3><p>移除碰撞区域的刚体，并设置为 Trigger，这样碰撞区域就是一个触发器了。</p><p>再给子弹加上 2D 刚体组件。</p><p>修改原来子弹代码移动逻辑，改成用外力进行推动而不是直接修改坐标，与控制角色的代码一样。</p><p>在父类中获得刚体组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Bullet : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float damage;</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public MiniGame_Character attacker;</span><br><span class="line"></span><br><span class="line">    protected Rigidbody2D rb;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void MoveEvent();</span><br><span class="line"></span><br><span class="line">    protected void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MoveEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改子类的移动逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_StarBullet : MiniGame_Bullet</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 1000f;</span><br><span class="line">    private float direct;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        direct &#x3D; attacker.transform.localScale.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void MoveEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(speed * direct, rb.velocity.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果：</p><p><img src="https://files.catbox.moe/0l2djk.gif" alt="子弹消失"></p><p>可以看到，子弹离开边界的时候已经被销毁了。</p><h2 id="角色动画"><a href="#角色动画" class="headerlink" title="角色动画"></a>角色动画</h2><p>为了方便观察动画效果，先调整一下 unity 引擎的界面布局。</p><p><img src="https://files.catbox.moe/wpdw8j.jpg" alt="unity 布局调整"></p><p>接下来就可以开始制作动画了。</p><p>在 Assets 目录下创建一个 Animations 文件夹用来存放动画，依次创建 MiniGame、Player 子文件夹。</p><p>这里有个比较坑爹的地方，我用的 2021 版 unity 默认会把动画的播放间隔参数隐藏起来。</p><p>如下图：</p><p><img src="https://files.catbox.moe/t2bkg3.jpg" alt="动画界面"></p><p>其实只要点开界面的右上方，选择更多，在弹出的菜单中再选择 <code>ShowSampleRate</code>：</p><p><img src="https://files.catbox.moe/vgl65s.jpg" alt="showSampleRate"></p><p>勾选以后，就可以在动画界面看到设定帧数的输入框了，默认值是 60，也就是说 1 秒钟有 60 帧：</p><p><img src="https://files.catbox.moe/g48voy.jpg" alt="帧数设置"></p><p>实际上我们没有那么多的素材能用，一般也就几帧而已，每帧对应一张图片素材。</p><h3 id="待机动画"><a href="#待机动画" class="headerlink" title="待机动画"></a>待机动画</h3><p>待机动画是角色静止不动时的动作。</p><p>动画是女主角眨眼的动作，这个动画只播放一次，不循环。</p><p>完整动作只有 4 张素材，也就是把眼睛闭上的动作。</p><p>睁眼的动作其实就反过来倒序播放而已。</p><p>顺序播放：1234321，一共有 7 帧。</p><p>60 / 7 = 8.5，因此这里可以四舍五入取 9 作为帧数，即将 1 秒钟划分成 9 份。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/6c0sgn.gif" alt="待机动画"></p><p>动画默认是循环播放的，我们这个待机效果只要播放一次就够。</p><p>找到刚才存放动画的文件：</p><p><img src="https://files.catbox.moe/4sewgq.jpg" alt="待机动画文件"></p><p>双击选中，然后在右侧的属性面板中把 <code>Loop Time</code> 的勾去掉即可：</p><p><img src="https://files.catbox.moe/c9b7b4.jpg" alt="动画属性"></p><h3 id="奔跑动画"><a href="#奔跑动画" class="headerlink" title="奔跑动画"></a>奔跑动画</h3><p>继续制作奔跑动画，创建新的动画然后把素材拖进去：</p><p><img src="https://files.catbox.moe/xlkzmh.gif" alt="奔跑动画"></p><p>奔跑的动画是循环的，所以不需要调整。</p><h3 id="奔跑攻击动画"><a href="#奔跑攻击动画" class="headerlink" title="奔跑攻击动画"></a>奔跑攻击动画</h3><p>角色一边奔跑一边按攻击键，也有独立的动画。</p><p>直接将素材拖进去即可：</p><p><img src="https://files.catbox.moe/zqdfm6.gif" alt="奔跑攻击"></p><h3 id="攻击动画"><a href="#攻击动画" class="headerlink" title="攻击动画"></a>攻击动画</h3><p>攻击动画只有一张素材，也拖进去即可。</p><p><img src="https://files.catbox.moe/5qsyf4.jpg" alt="攻击动画"></p><h3 id="受伤动画"><a href="#受伤动画" class="headerlink" title="受伤动画"></a>受伤动画</h3><p>受伤也只有一张。</p><p><img src="https://files.catbox.moe/4bwpzy.jpg" alt="受伤动画"></p><h3 id="倒下动画"><a href="#倒下动画" class="headerlink" title="倒下动画"></a>倒下动画</h3><p>角色 gg 的时候倒地动画。</p><p><img src="https://files.catbox.moe/2frez6.jpg" alt="倒地动画"></p><h3 id="未完成动画"><a href="#未完成动画" class="headerlink" title="未完成动画"></a>未完成动画</h3><p>其实还有跳跃、跳跃攻击的动画，但是没有做出来。</p><p>角色的动画这样就算弄好了。</p><h2 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h2><p>事物具有“状态”属性，遇到不同条件时，状态就会发生变化。</p><p>比如天冷的时候，水结冰，此时水是固态，而当天气变热，冰化了，变成液态的水，然后天气继续升温，水被蒸发了，变成气态的水蒸气，水蒸气遇到冷空气又会变成雨。</p><p>这个过程就是水的状态转化机制，动画系统也是同理。</p><p>当玩家操控角色行走时，由待机动作转化为奔跑动作，而玩家又按下了攻击键，则角色的动画就会从奔跑转变为奔跑攻击，攻击动作完成后又会变回奔跑动作，然后玩家松开方向键停止奔跑，角色的动画就会从奔跑转为待机。</p><p>一般来说，除了自发的转换之外，动画转换基本是根据玩家的操作来决定的。</p><p>来看看令人头大的动画状态控制器：</p><p><img src="https://files.catbox.moe/82a86r.jpg" alt="动画状态控制器"></p><h3 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h3><p>物体总是有一个初始状态，其中 <code>Entry</code> 箭头指向的就是默认进入的动画效果。</p><p><img src="https://files.catbox.moe/4g2m3y.jpg" alt="初始状态"></p><p>这里的意思是，游戏开始时，角色就会进入 <code>Idle</code>（待机动画）。</p><p>打开调试场景测试：</p><p><img src="https://files.catbox.moe/2lsdgf.gif" alt="初始动画"></p><p>可以发现角色播放了眨眼动画，说明设置成功了。</p><p>而且这里只眨眼了一次，说明上面设置的取消循环也成功了。</p><h3 id="待机-奔跑"><a href="#待机-奔跑" class="headerlink" title="待机-奔跑"></a>待机-奔跑</h3><p>角色只有在玩家按键操作的时候，才会从静止状态变为奔跑状态。</p><p>因此可以用两种方法实现状态的转化，第一种是根据玩家的按键，第二种是根据角色当前的移动速度。</p><p>第一种方法是主动变化，第二种方法是被动触发。</p><p>这里选择第一种。</p><p>右键 <code>Player_Idle</code> 动画，在弹出的菜单中选择 <code>Make Transtition</code> 创建一个新的转换关系。</p><p><img src="https://files.catbox.moe/hh7o6d.jpg" alt="新建关系"></p><p>待机动画和奔跑动画是可以相互转换的，所以要建立双向关系。</p><p>动画转换条件只要监听玩家按键就可以了，控制玩家移动的 <code>GetAxis</code> 方法会返回 -1~1 的值。</p><p>当玩家没有按键的时候，返回的是 0，向左移动返回负数，向右返回整数。</p><p>因此这个值就可以当做动画转换的条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 保存动画组件</span><br><span class="line">private Animator animator;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在唤醒的时候获取动画组件</span><br><span class="line">animator &#x3D; GetComponent&lt;Animator&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在移动方法里获得水平按键参数</span><br><span class="line">animator.SetFloat(&quot;horizontal&quot;, Mathf.Abs(horizontal));</span><br></pre></td></tr></table></figure><p>这里将水平参数转换成绝对值，因为只要正数就够了，方向并不影响动画的播放。</p><p>好了，现在这样就可以进入游戏场景调试了：</p><p><img src="https://files.catbox.moe/d9qysu.gif" alt="待机和奔跑之间的转换"></p><p>简直不要太神奇……如果是自己来写状态机，指不定要花多长的时间呢！</p><h3 id="待机-攻击"><a href="#待机-攻击" class="headerlink" title="待机-攻击"></a>待机-攻击</h3><p>从待机到攻击比较简单，只要在待机状态下玩家按下攻击键就认为是攻击状态。</p><p>这里我对代码进行了一些修改，把按键判定放在 Update，然后在 FixedUpdate 实际发射出子弹。</p><p>因为攻击动作太快（只有 1 帧）会导致以肉眼看不见的速度结束，所以要用到延迟函数，这里我通过协程来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    StartCoroutine(Shoot());</span><br><span class="line">    Move();</span><br><span class="line">    Jump();</span><br><span class="line">    GroundCheck();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void PressedKey()</span><br><span class="line">&#123;</span><br><span class="line">    horizontal &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGround)</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Fire1&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        isShoot &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private IEnumerator Shoot()</span><br><span class="line">&#123;</span><br><span class="line">    if (isShoot)</span><br><span class="line">    &#123;</span><br><span class="line">        isShoot &#x3D; false;</span><br><span class="line">        animator.SetBool(&quot;shoot&quot;, true);</span><br><span class="line"></span><br><span class="line">        GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">        GameObject bulletObj &#x3D; Instantiate(prefab, firePoint);</span><br><span class="line"></span><br><span class="line">        MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">        bullet.attacker &#x3D; this;</span><br><span class="line"></span><br><span class="line">        bulletObj.transform.SetParent(bg);</span><br><span class="line"></span><br><span class="line">        yield return new WaitForSeconds(0.05f);</span><br><span class="line"></span><br><span class="line">        animator.SetBool(&quot;shoot&quot;, false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成子弹后 0.05s 将攻击状态变为 false，即切换动画状态。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/ps485v.gif" alt="待机-攻击"></p><p>奔跑状态下按攻击键没有触发攻击动画，是因为还没设置。</p><h3 id="奔跑-奔跑攻击"><a href="#奔跑-奔跑攻击" class="headerlink" title="奔跑-奔跑攻击"></a>奔跑-奔跑攻击</h3><p>普通攻击是停下来的，而奔跑攻击有单独的动画。</p><p>演示效果如下：</p><p><img src="https://files.catbox.moe/8odefg.gif" alt="奔跑-奔跑攻击"></p><p>这里出现了一个比较“呆萌”的效果，主角奔跑攻击然后松开方向键，会出现“原地小跑”的情况，然后才停下来。</p><p><img src="https://files.catbox.moe/ojwxmg.gif" alt="原地小跑"></p><p>这是因为动画先从 Player_RunAttack 转换到 Player_Run，本来应该立即从 Player_Run 转化为 Player_Idle 的，但是因为我用的是 <code>GetAxis</code> 会有一段缓冲减速效果，因此这段极短的缓冲时间就是播放奔跑动画的时间，所以就会出现原地小跑的情况。</p><p>还有这段伸手动作：</p><p><img src="https://files.catbox.moe/8qzngf.gif" alt="伸手"></p><p>这是因为奔跑攻击动画用了循环，而且帧数比较多，所以才会有点“迟钝”的样子。</p><p>只要改成不循环然后减少帧数解决可以解决“伸手”的问题，但还是因为看起来很呆萌，所以就保留下来了。</p><blockquote><p>火兔语录：所有的 bug 都是游戏彩蛋！</p></blockquote><h3 id="未完成动画-1"><a href="#未完成动画-1" class="headerlink" title="未完成动画"></a>未完成动画</h3><p>还剩下两个动画没完成，一个是受伤另一个是倒地。</p><p>这两个动画要等制作出敌人才能实现，所以就留到下一篇了。</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>参考资料：<a href="https://www.bilibili.com/video/BV1sE411g7jK?t=1301">https://www.bilibili.com/video/BV1sE411g7jK?t=1301</a></p><p>最终还是找到了一个视频资料。</p><p>第一次看到 unity 的动画状态机还以为会是很难理解的东西，但实际体验了一下，感觉并不是想象中那么困难。</p><p>有时候对于未知的事物，还是要勇敢的尝试一下才知道是不是真的很难。</p><p>最开始学 unity 是 4 年前，跟着教学制作了一个 3D 小球的 Demo。</p><p>虽然做出来了，但是全英文的界面让我感觉到学习很困难。</p><p>而且 3D 的摄像机弄了半天也没搞清楚原理，最后就不了了之了。</p><p>也许是因为那时刚毕业，对自己的技术不那么自信，所以才会打退堂鼓。</p><p>但是经过了这么多年以后，技术提高了，自信心也增强了。</p><p>所谓“功夫不负有心人”，我开始相信只要是想学的技术，肯定能学会。</p><p>关键在于决心强不强烈。</p><p>成就感可以驱动行动，如果一个人擅长做一件事，而且这件事具有一定的挑战性，完成这件事就能得到成就感。</p><p>成就感是一种正反馈，得到的正反馈越多，学习的动力越强。</p><p>但如果一个人不擅长做某事，而且尝试过一次之后就失败了，这样就会得到与成就感相反的——『挫败感』。</p><p>如果这个人的内心又比较脆弱，意志也不够坚定，积累了一定的挫败感超过承受能力最终就会打退堂鼓。</p><p>像现在这样记录博客实际上也是在积累「成就感」，边做边写也能够督促自己每天坚持更新。</p><p>如果哪一天没更新了，说明自己偷懒了。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（四）</title>
      <link href="2021/05/04/monster-game-4/"/>
      <url>2021/05/04/monster-game-4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于自己写一个控制系统的工作量太大，因此决定改用 unity 的物理系统来完成这个平台跳跃 FC 小游戏。</p><p>虽然又得重头开始了，但这样也是为了让整个游戏的制作速度更快和更好。</p><h2 id="角色控制系统"><a href="#角色控制系统" class="headerlink" title="角色控制系统"></a>角色控制系统</h2><p>话不多说，直接开始。</p><h3 id="重力系统"><a href="#重力系统" class="headerlink" title="重力系统"></a>重力系统</h3><p>新建场景，然后创建一个角色图像，给角色加上 <code>Rigid Body 2D</code> 组件和 <code>Capsule Collider 2D</code> 组件。</p><p><img src="https://i.loli.net/2021/05/04/WXdDeG4w8UOoSEh.jpg" alt="QQ20210504-184126.jpg"></p><p><code>Rigid Body 2D</code> 是刚体组件，带有物理属性，<code>Capsule Collider 2D</code> 则是胶囊状碰撞体。</p><p>然后进入调试场景，发现角色已经会受到重力自由下落了。</p><p><img src="https://files.catbox.moe/tgafa6.gif" alt="重力效果"></p><h3 id="创建地板"><a href="#创建地板" class="headerlink" title="创建地板"></a>创建地板</h3><p>由于没有地板支撑，角色会掉到屏幕外面。</p><p>接下来创建一个地板，加上 <code>Rigid Body 2D</code> 和 <code>Box Collider 2D</code> 组件。</p><p><img src="https://files.catbox.moe/tnvyq1.jpg" alt="地板"></p><p>同时地板的刚体组件类型设置为 <code>Kinematic</code>：</p><p><img src="https://files.catbox.moe/lccafr.jpg" alt="刚体类型"></p><p>然后打开调试场景测试：</p><p><img src="https://files.catbox.moe/h2l724.gif" alt="地板效果"></p><p>两个刚体之间产生了碰撞，因此角色可以站在地板上面。</p><h3 id="水平移动"><a href="#水平移动" class="headerlink" title="水平移动"></a>水平移动</h3><p>使用物理系统控制角色移动十分简单，只要让角色受到水平方向的力就可以了。</p><p>新建 <code>MiniGame_Player</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float moveSpeed &#x3D; 100f;</span><br><span class="line"></span><br><span class="line">    private Rigidbody2D rb;</span><br><span class="line">    private float horizontal;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在唤醒物体时，取得身上绑定的刚体组件，然后监听水平方向的按键，并且赋值给 <code>horizontal</code> 变量。</p><p>然后在 <code>FixedUpdate</code> 方法里对物体施加外力，测试结果：</p><p><img src="https://files.catbox.moe/xd0xkl.gif" alt="水平移动"></p><p>发现角色受到外力直接倒下了……</p><p>这是因为角色的重心太高了，受到外力很容易倒下。（unity 复现了 100% 物理效果）</p><p>解决方法很简单，只要把 z 轴的旋转冻结就可以。</p><p><img src="https://files.catbox.moe/j3bkmm.jpg" alt="冻结z轴旋转"></p><p>然后再进入游戏场景进行测试：</p><p><img src="https://files.catbox.moe/chgu4h.gif" alt="重新测试"></p><h3 id="角色朝向"><a href="#角色朝向" class="headerlink" title="角色朝向"></a>角色朝向</h3><p>虽然角色可以左右滑动了，但是角色的朝向并没有改变。</p><p>修改 <code>FixedUpdate</code> 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(horizontal, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上一个判断水平按键的条件，根据玩家控制的移动方向改变角色的翻转。</p><p>测试效果：</p><p><img src="https://files.catbox.moe/pv53o4.gif" alt="角色朝向"></p><h3 id="角色跳跃"><a href="#角色跳跃" class="headerlink" title="角色跳跃"></a>角色跳跃</h3><p>同理，只需要让角色受到一个向上的力，角色就会“跳起来”了。</p><p>因为跳跃只能触发一次，而不像水平方向移动一样没有限制，所以要增加一个变量用来判断玩家是否按下跳跃键。</p><p>在跳跃状态下就不能再按跳跃键了，因为这个小游戏没有二段跳。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private bool jumpPressed;</span><br></pre></td></tr></table></figure><p>接下来这里有个小技巧，可以解决之前提到过的按键监听 <code>GetButtonDown</code> 手感不好的问题。</p><p>即在 Update 方法里监听按键，在 FixedUpdate 方法里写处理逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Jump&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(horizontal, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (jumpPressed &amp;&amp; isJump &#x3D;&#x3D; false)</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; false;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(rb.velocity.x, jumpSpeed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在按下空格键角色已经可以跳跃了，但是可以在空中无限跳。</p><p>正确的逻辑应该是角色跳跃之后，就不能再按空格键进行二段跳或者三段跳。</p><p>而是应该落到地板上面才能重新按跳跃键。</p><h3 id="落地问题"><a href="#落地问题" class="headerlink" title="落地问题"></a>落地问题</h3><p>现在的跳跃机制没有判断落到地板的情况，要实现这个判断实际上很复杂。</p><p>如果直接用碰撞系统无法避免“陷入物体”的情况（详情见前文）。</p><p>完美的解决方法就是上一篇文章中提到过的“射线检测机制”，但是要自己手动写一个检测系统非常困难。</p><p>幸运的是 unity 已经实现了类似的方法。</p><p><code>Physics2D.Overlap</code> 相关方法可以绘制某种图形，然后判断与某个物体是否相交。</p><p>这个跟我自己设想的「探知领域」差不多。</p><p>我今天折腾了一个下午，到底是为了什么……</p><p>在角色的脚底创建一个空的物体，当做角色的“脚”用来判断角色是否与地板接触。</p><p><img src="https://files.catbox.moe/qw5jf7.jpg" alt="地板检测器"></p><p>然后选中游戏场景中的地板，添加一个新的 Layout（图层），命名为 Ground：</p><p><img src="https://files.catbox.moe/w0n4yr.jpg" alt="Layout"></p><p>图层是用来控制游戏中场景的层级关系，在这里也可以作为检测用的“标签”。</p><p>图层 Layout 也可以作为参数传给脚本，类型是 LayerMask，在 Player 脚本添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public LayerMask layerMask;</span><br><span class="line">private bool isGround;</span><br></pre></td></tr></table></figure><p><code>layerMask</code> 用来赋值地板的图层参数，<code>isGround</code> 用来判断是否站在地板上面。</p><p>在 FixedUpdate 方法添加一行代码;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isGround &#x3D; Physics2D.OverlapCircle(groundCheck.position, 0.5f, layerMask);</span><br></pre></td></tr></table></figure><p><code>Physics2D.OverlapCircle</code> 方法会在脚底的位置画一个半径是 0.5 的圆圈，如果圆圈与 layerMask 的图层相交时就会返回 true。</p><p>其实就是下图这样：</p><p><img src="https://files.catbox.moe/jeeovz.jpg" alt="圆圈判定"></p><p>这个圆的半径不能太大，不然角色还没碰到地板就会被判定成站在地板上面了（毕竟踩着那么大一颗球）。</p><p>进入游戏场景进行测试：</p><p><img src="https://files.catbox.moe/x1dj9g.gif" alt="跳跃测试"></p><p>只有落地了才能继续跳跃，无法在空中进行二段跳。</p><p>跳跃功能也完成了！</p><h2 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h2><p>顺便优化一下代码，完整的 <code>MiniGame_Player</code> 脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float moveSpeed &#x3D; 400f;</span><br><span class="line">    public float jumpSpeed &#x3D; 400f;</span><br><span class="line"></span><br><span class="line">    public Transform groundCheck;</span><br><span class="line"></span><br><span class="line">    private Rigidbody2D rb;</span><br><span class="line">    private float horizontal;</span><br><span class="line"></span><br><span class="line">    private bool jumpPressed;</span><br><span class="line"></span><br><span class="line">    public LayerMask layerMask;</span><br><span class="line">    private bool isGround;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        PressedKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        Move();</span><br><span class="line">        Jump();</span><br><span class="line">        GroundCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void PressedKey()</span><br><span class="line">    &#123;</span><br><span class="line">        horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">        if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGround)</span><br><span class="line">        &#123;</span><br><span class="line">            jumpPressed &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Move()</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">        if (horizontal !&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.localScale &#x3D; new Vector3(horizontal, 1, 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Jump()</span><br><span class="line">    &#123;</span><br><span class="line">        if (jumpPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            jumpPressed &#x3D; false;</span><br><span class="line">            rb.velocity &#x3D; new Vector2(rb.velocity.x, jumpSpeed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void GroundCheck()</span><br><span class="line">    &#123;</span><br><span class="line">        isGround &#x3D; Physics2D.OverlapCircle(groundCheck.position, 0.5f, layerMask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个小知识，可以发现上面我把方法都抽取出来，然后再在 <code>FixedUpdate</code> 里面进行调用。</p><p>是否会多此一举？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    Move();</span><br><span class="line">    Jump();</span><br><span class="line">    GroundCheck();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到网上有人在讨论这个问题，正好思考了一下。</p><p>程序是堆栈调用，为了代码的美观而封装成单独的方法调用，岂不是增加了入栈和出栈的成本？</p><p>确实可能会有一些影响，但这里并不只是为了代码美观整洁才封装的。</p><p>之所以封装成单独的方法调用是因为可以节省内存。</p><p>如果把全部的代码写在一坨，那定义的一些临时变量就会占着内存不放。</p><p>只有函数执行结束的时候回收机制才会销毁函数内部的临时变量。</p><p>代码的美观整洁也是十分重要的，抽取方法还可以实现代码的复用。</p><p>为了以后方便维护，在觉得一些地方写的不够好的时候，我会回头优化一下，如有必要也会像现在这样直接推翻整个系统重来。</p><h2 id="手感调整"><a href="#手感调整" class="headerlink" title="手感调整"></a>手感调整</h2><p>现在虽然实现了角色控制系统，但是操作手感却很不好。</p><p>接下来就开始优化。</p><h3 id="重力系数"><a href="#重力系数" class="headerlink" title="重力系数"></a>重力系数</h3><p>因为重力太小的原因，角色跳跃看起来很“假”。</p><p>打开顶部的菜单 <code>Edit</code> 然后选择 <code>Project Settings</code> 进入游戏参数配置。</p><p>选中左侧的 <code>Physics 2D</code> 把 <code>Gravity</code> 的 y 值改成 -45.5，如下：</p><p><img src="https://i.loli.net/2021/05/05/PWCBsafOUnMbg86.jpg" alt="QQ20210505-094234.jpg"></p><p>然后再进入游戏场景测试：</p><p><img src="https://i.loli.net/2021/05/05/vcIY8dFeonqx1Sf.gif" alt="Kapture 2021-05-05 at 09.47.53.gif"></p><p>掉落的速度看起来好多了。</p><h3 id="不自然停止问题"><a href="#不自然停止问题" class="headerlink" title="不自然停止问题"></a>不自然停止问题</h3><p>角色跳跃的过程，如果立即放开水平移动键，就会像上图那样直接停止水平移动，看起来有些不自然。</p><p>如果要优化操作手感，应该给水平方向一些惯性，即使玩家松开按键，角色也会向前方保持减速运动直到停止，而不是立即停下来。</p><p>想要实现平滑过渡，将原来的 <code>GetAxisRaw</code> 改成 <code>GetAxis</code> 即可，前者返回 0、1、-1 三个数，而后者却返回 -1~1 的范围值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 原来的水平移动按键监听</span><br><span class="line">horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改之后</span><br><span class="line">horizontal &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br></pre></td></tr></table></figure><p>然后再修改 Move 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void Move()</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (horizontal &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的效果如下：</p><p><img src="https://i.loli.net/2021/05/05/RmaBeMxqQ3plJKk.gif" alt="Kapture 2021-05-05 at 09.58.03.gif"></p><p>虽然只是很细微的差别，但实际操作会感觉“丝滑”一些。</p><p>水平方向即使松开按键也会保持一小段减速，而不是直接停下来。</p><h3 id="弹起问题"><a href="#弹起问题" class="headerlink" title="弹起问题"></a>弹起问题</h3><p>角色落到地上，有一个软绵绵的弹起效果。</p><p>但这并不是我们需要的，在 unity 老版本中可以修改刚体的弹力，但是我用的是新版的 2021.1.5f1c1，在刚体上面已经找不到弹力设置项了。</p><p>这里需要修改碰撞检测类型，默认值是 <code>Discrete</code> （离散的），需要修改为 <code>Continuous</code>（连续的）：</p><p><img src="https://i.loli.net/2021/05/05/mCw1TkOal9UfhbI.jpg" alt="QQ20210505-101708.jpg"></p><p>然后再进入游戏测试：</p><p><img src="https://i.loli.net/2021/05/05/MOnekuH9oDQp2m6.gif" alt="Kapture 2021-05-05 at 10.21.56.gif"></p><p>现在角色已经站在“钢”做成的地板上了。</p><h3 id="卡住问题"><a href="#卡住问题" class="headerlink" title="卡住问题"></a>卡住问题</h3><p>当角色与刚体的侧边接触时，会出现卡住的情况：</p><p><img src="https://i.loli.net/2021/05/05/yTiMqgX5Y1VhzIc.gif" alt="Kapture 2021-05-05 at 10.24.03.gif"></p><p>这是因为 unity 的物理系统也模拟了摩擦力，所以角色与边缘接触时，会因为强大的摩擦力而被“吸住”。</p><p>只需要修改摩擦力就可以解决此问题。</p><p>在 <code>Assets</code> 新建一个 <code>Physic Material</code> 来保存物理材质。</p><p>然后右键打开菜单，选择 <code>2D</code>，然后再选择 <code>Physic Material 2D</code>，因为这个游戏是 2D 的，所以要选择 2D 的材质。</p><p><img src="https://i.loli.net/2021/05/05/oP59YgpvwZqCNB6.jpg" alt="QQ20210505-102756.jpg"></p><p>将材质文件命名为 Player，然后在右侧打开的属性中，将 <code>Friction</code>（摩擦力）设置为 0。</p><p><img src="https://i.loli.net/2021/05/05/CJNH1xpS9juiVW5.jpg" alt="QQ20210505-102843.jpg"></p><p>最后，点选场景中的角色，选中刚体组件，点击 <code>Material</code> 旁边的小圈，选择刚才创建好的材质：</p><p><img src="https://i.loli.net/2021/05/05/VLWBEymwSHpGeNl.jpg" alt="QQ20210505-103025.jpg"></p><p>测试效果：</p><p><img src="https://i.loli.net/2021/05/05/GI3S9fUlXMqApJg.gif" alt="Kapture 2021-05-05 at 10.33.05.gif"></p><p>加上材质的女主角已经变得十分“光滑”了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有时总想自己从零开始造轮子，但其实轮子别人已经造好了，直接用就可以了。</p><p>不应该执着于制作过程，而且学习 unity 提供的功能也是一种提升能力的办法。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（三）</title>
      <link href="2021/05/03/monster-game-3/"/>
      <url>2021/05/03/monster-game-3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇将会完成小游戏的跳跃动作以及场景、地面、障碍物的制作。</p><p>PS. 为了节省时间以后的文章可能不会贴代码，只讲实现原理。</p><h2 id="角色跳跃"><a href="#角色跳跃" class="headerlink" title="角色跳跃"></a>角色跳跃</h2><p>按下键盘的 w 键或者 上方向键可以让角色进行单段跳跃。</p><h3 id="动作实现"><a href="#动作实现" class="headerlink" title="动作实现"></a>动作实现</h3><p>因为我不是用物理组件来实现的，所以这里需要自己手动写跳跃的逻辑。</p><p>当玩家按下跳跃键时，给与角色一个 y 轴向上的速度即可，与控制角色移动的原理一样，演示效果：</p><p><img src="https://i.loli.net/2021/05/03/KWGH57lbJ2Ndyvk.gif" alt="Kapture 2021-05-03 at 21.45.07.gif"></p><p>角色“原地升天”！</p><h3 id="重力下降"><a href="#重力下降" class="headerlink" title="重力下降"></a>重力下降</h3><p>这样直接让角色升天可不行，必须受到重力让其下坠。</p><p>如果现实世界一样，当一个人跳起来的时候，受到重力影响 y 轴速度会不断降低，直到掉回地板，有地板的支撑才不会继续下坠。</p><p>所以只要让角色的 y 速度时刻都在减少即可实现重力效果，为了方便演示看到效果，初始 y 速度设置为 0，不然角色会直接掉下去：</p><p><img src="https://files.catbox.moe/ytcuyw.gif" alt="重力效果"></p><p>没有地板的支撑，所以会掉出屏幕外面。</p><h3 id="地板"><a href="#地板" class="headerlink" title="地板"></a>地板</h3><p>角色站在地板可以认为是碰撞事件，即角色和地板产生了碰撞（接触）。</p><p>给角色加上刚体组件和碰撞组件，同时地板也要加上碰撞组件，并且设置为触发器。</p><p>当角色与地板发生碰撞的时候，就给与角色一个“站在地板上”的状态。</p><p>当角色处于「站在地板上」状态的时候，不会受到重力影响而下坠，这样就可以让角色看起来像“站在地板上”了！</p><p>演示效果：</p><p><img src="https://files.catbox.moe/nlb9b2.gif" alt="站在地板"></p><p>角色从空中掉到地板的时候，虽然不再继续下降，但是又出现新的问题——人物“陷入”地板了。</p><p>出现这种情况是因为游戏是按帧渲染的，当一个物体处于高速运动状态的时候，一帧的位移很难正好处于碰撞物体的表面。</p><p>尽管我们在 <code>OnTriggerEnter2D</code> 触发器事件立即让碰撞物停止行动了，但还是无法避免这种情况。</p><h3 id="地板穿透问题"><a href="#地板穿透问题" class="headerlink" title="地板穿透问题"></a>地板穿透问题</h3><p>假设有一面墙壁，朝着墙壁发射子弹，不考虑物理效果，让子弹撞到墙的时候立即停止行动，在游戏里会出现下面这种情况：</p><p><img src="https://files.catbox.moe/oq6v9e.jpg" alt="子弹穿透墙壁示例"></p><p>这是因为子弹飞行的速度太快了，导致每一帧的位置变化非常大，刚好停在墙壁表面的情况几乎不可能出现。</p><p><img src="https://i.loli.net/2021/05/03/45mUqAGTtsO2Hn3.jpg" alt="QQ20210503-223707.jpg"></p><p>如上图所示，虽然保证每一帧的间隔时间相同，但是当子弹与墙壁碰撞的时候，子弹已经移动到墙壁里了。</p><p>这个时候让子弹停止行动也无法解决陷入的问题。</p><p>不过这个问题很容易解决，只要让角色与地板发生碰撞的时候，调整角色的坐标刚好站在地板上不就可以了！？</p><p>没错，改进原来的代码，让角色和地板接触的时候，改变主角的 y 坐标为地板上方，演示如下：</p><p><img src="https://files.catbox.moe/1q3bt7.gif" alt="碰撞时调整y坐标"></p><p>可以看到，虽然调整 y 坐标以后角色确实没有陷入地板，但问题也很明显，落到地板的一刹那出现了一个“幻影”。</p><p>因此，这并非最好的解决方法。</p><h3 id="解决穿透问题"><a href="#解决穿透问题" class="headerlink" title="解决穿透问题"></a>解决穿透问题</h3><p>高速运动的刚体穿透碰撞体是一件很常见的问题，网上的教程一般都是类似上面这样调整坐标或者回到前一帧的位置，但这样就会造成碰撞“抖动”现象，对游戏的操作体验和观感都不好。</p><p>有一个比较靠谱的方案就是「射线检测法」。</p><p>从枪口发射出来的子弹，同时会向前方发射一条射线用来探知前方的碰撞体。</p><p><img src="https://files.catbox.moe/cnptmj.jpg" alt="射线检测法"></p><p>当射线探知的前方有一面墙壁的时候，就可以提前告诉子弹墙壁表面的坐标，当子弹运动到这个坐标的时候，就不再继续前进了。</p><p>这样一来，子弹刚好接触到墙壁表面的位置就停下来了，而且因为接触到墙壁也与墙壁产生了碰撞事件，从而可以在碰撞回调方法进行逻辑处理。</p><p>但是角色跟子弹不一样，如果要用射线检测法，就要从上下左右 4 个方向进行检测，这样比较麻烦。</p><p>相反，从射线检测法得到灵感，我想到一个「探知领域」法：</p><p><img src="https://i.loli.net/2021/05/04/bvxtQGPwmkfeyru.jpg" alt="QQ20210504-125815.jpg"></p><p>角色的周围存在一个「探知领域」，这个领域是一个比角色本身的碰撞盒子稍微大一点的碰撞检测器，因为角色跳跃的时候，并不知道自己的落地点在哪，有可能跳到一个障碍物的上面，也可能落在地板上面，所以需要一个用来检测周围环境的探知领域，由于探知领域的面积比角色本身的碰撞体大，所以探知区域先与地板、障碍物触发碰撞事件，因此就可以提前通知角色的落地点了。</p><p>理论搞清楚了，就开始动手解决问题！</p><p><img src="https://i.loli.net/2021/05/04/ydf31DKcrOECZz5.jpg" alt="QQ20210504-130837.jpg"></p><p>创建一个空白对象，挂在 Player 节点下面，然后给对象加上 <code>Box Collider 2D</code> 碰撞体组件，宽高设置为比角色稍微大一点。</p><p>因为挂在 Player 节点，父节点本身就有刚体组件，所以探知领域不需要再添加刚体。</p><p>新建一个 Tag 命名为 <code>Detect</code>，赋予探知领域此 Tag，用来区分碰撞检测：</p><p><img src="https://i.loli.net/2021/05/04/hOPlt3X4TbinD9V.jpg" alt="QQ20210504-131020.jpg"></p><p>……未完待续。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>我发现如果自己来写这跳跃系统的话，工作量实在太大了。</p><p>折腾了一个下午，居然都在解决陷入地板的问题，但是如果直接使用 unity 的物理系统就不需要考虑这个问题。</p><p>然后又担心物理系统会让小游戏变得太“僵硬”，于是就去看了一些其他平台跳跃游戏的示例，结果发现他们全部都是基于物理系统的。</p><p>甚至包括蔚蓝这种操作手感顶尖的跳跃游戏，也可以用物理效果做出来。</p><p>最后我决定把控制角色的脚本用物理系统重写一遍，下文开始新篇章。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（二）</title>
      <link href="2021/05/03/monster-game-2/"/>
      <url>2021/05/03/monster-game-2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面一篇文章实现了控制角色移动，今天开始实现角色的攻击事件。</p><h2 id="攻击事件"><a href="#攻击事件" class="headerlink" title="攻击事件"></a>攻击事件</h2><p>玩家控制的小魔女可以发射「星之弹」攻击敌人。</p><p>这是子弹的特写：</p><p><img src="https://i.loli.net/2021/05/03/T34xrIR89U7YlXu.jpg" alt="QQ20210503-004833.jpg"></p><p>演示效果（图片加载比较慢）：</p><p><img src="https://files.catbox.moe/d1kake.gif" alt="子弹"></p><p>静帧图：</p><p><img src="https://files.catbox.moe/z7fu39.jpg" alt="子弹2"></p><p>大致就是从手中发射星星弹攻击敌人。</p><p>要实现角色发射子弹攻击，需要一连串的步骤，接下来就一步一步的进行说明。</p><h3 id="制作子弹"><a href="#制作子弹" class="headerlink" title="制作子弹"></a>制作子弹</h3><p>因为子弹是动态生成的，所以把子弹做成一个 prefab（预制体）。</p><p>放在 Resources/Prefabs/MiniGame 目录下备用，子弹还有很多种，这里就把星弹取名为：StarBullet。</p><p><img src="https://files.catbox.moe/2wcsfw.jpg" alt="子弹3"></p><h3 id="子弹发射口"><a href="#子弹发射口" class="headerlink" title="子弹发射口"></a>子弹发射口</h3><p>按下攻击键会发射子弹，按住攻击键会连续发射子弹。</p><p>首先创建一个子弹发射的位置，这是一个看不见的透明物体（标红位置）：</p><p><img src="https://files.catbox.moe/2033ns.jpg" alt="发射口"></p><p>这个发射口位于角色节点底下，这样就会跟随角色转向而改变位置。</p><h3 id="按键攻击"><a href="#按键攻击" class="headerlink" title="按键攻击"></a>按键攻击</h3><p>我们希望按下 <code>Z</code> 或 <code>J</code> 键来发射子弹，因此需要修改 unity 自带的按键指令：</p><p><img src="https://files.catbox.moe/u3rzlr.jpg" alt="修改按键"></p><p>找到 <code>Fire1</code>，别名需要指定两个按键，<code>negative button</code> 和 <code>postive button</code>，即消极的按钮和积极的按钮。</p><p>当按下消极的按钮时，<code>GetAxis</code> 的值就会逐渐趋向于 -1，即负向增加；</p><p>当按下积极按钮时，<code>GetAxis</code> 的值就会逐渐趋向于 1，即正向增加。</p><p>对于攻击指令，只要判定 <code>GetAxis</code> 不等于 0 即玩家正在按攻击键。</p><p>在 Player 脚本添加攻击按键监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void ShootEvent()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetAxisRaw(&quot;Fire1&quot;) !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;攻击&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    ShootEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在按下攻击键只是在控制台打印“攻击”两个字，接下来要生成上面的子弹。</p><h3 id="生成子弹"><a href="#生成子弹" class="headerlink" title="生成子弹"></a>生成子弹</h3><p>通过 <code>Resources</code> 方法动态加载预制体，然后再通过 <code>Instantiate</code> 生成游戏对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 <code>ShootEvent</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void ShootEvent()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetAxisRaw(&quot;Fire1&quot;) !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        CreateBullet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="https://files.catbox.moe/ob6aph.gif" alt="攻击1"></p><p>可以看到子弹好像“粘在”角色身上，这是因为指定了 <code>FirePoint</code> 作为子弹的父节点，而 <code>FirePoint</code> 又挂在 <code>Player</code> 下面，子节点肯定是随着父节点改变位置了。</p><p>解决方法就是把子弹添加到背景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 游戏场景</span><br><span class="line">protected GameObject bg;</span><br><span class="line"></span><br><span class="line">private void Awake()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; ... 找到背景对象</span><br><span class="line">    bg &#x3D; GameObject.Find(&quot;Background&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 生成子弹后，修改子弹的父节点为游戏场景（背景）</span><br><span class="line">    bulletObj.transform.SetParent(bg.transform);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后，再次测试效果：</p><p><img src="https://files.catbox.moe/h2q9qk.gif" alt="攻击2"></p><p>这回子弹的位置正常了，但又发现新的问题——可以看到角色移动时没有播放奔跑动画！</p><h3 id="动画丢失问题"><a href="#动画丢失问题" class="headerlink" title="动画丢失问题"></a>动画丢失问题</h3><p>这是因为 <code>MiniGame_Player</code> 脚本继承了 <code>MiniGame_Character</code>，而动画事件的监听是在父类，现在又在子类重写了 <code>Update</code> 方法，导致父类的动画监听事件没了。</p><p>解决方法就是把父类的 <code>Update</code> 声明为虚方法（virtual），访问修饰符为 <code>protected</code> 可以让子类调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected virtual void Update()</span><br><span class="line">&#123;</span><br><span class="line">    PlayAnimateListerner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改 Player 脚本的 Update 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected override void Update()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 调用父类的方法</span><br><span class="line">    base.Update();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 射击事件</span><br><span class="line">    ShootEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新测试一次：</p><p><img src="https://files.catbox.moe/6gpze2.gif" alt="攻击4"></p><p>我们的女主角终于能快乐的奔跑同时“划出许多星星”了……？！</p><h3 id="攻击频率"><a href="#攻击频率" class="headerlink" title="攻击频率"></a>攻击频率</h3><p>新的问题又出现了，按一下攻击键就生成那么多子弹，甚至造成了卡顿现象。</p><p>子弹的发射应该有限制，比如按住攻击键 0.25s 发射一颗，即存在「攻击间隔」，也可以理解为『攻击速度』。</p><p>原理与前一篇写的动画事件一样，就不再赘述了。</p><p>修改后的效果如下：</p><p><img src="https://files.catbox.moe/5a7utg.gif" alt="攻击5"></p><p>看起来像有频率的进行“划水”了。</p><h2 id="让子弹飞！"><a href="#让子弹飞！" class="headerlink" title="让子弹飞！"></a>让子弹飞！</h2><p>现在的攻击只是生出一颗子弹，但是这个子弹就像一张图片一样一动不动。</p><p>接下来要让子弹能够向前飞行。</p><h3 id="子弹基类"><a href="#子弹基类" class="headerlink" title="子弹基类"></a>子弹基类</h3><p>除了小魔女发射的「星弹」之外，敌人也会发射各种子弹。</p><p>子弹都有共通之处，所以现在新建一个子弹的基类 <code>MiniGame_Bullet</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Bullet : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float damage;</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public MiniGame_Character attacker;</span><br><span class="line"></span><br><span class="line">    protected abstract void MoveEvent();</span><br><span class="line"></span><br><span class="line">    protected void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MoveEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的子弹都有伤害值，以及攻击者，并且需要在子类实现子弹的移动逻辑。</p><p>将 attacker 字段设置为 public 方便赋值，同时再设置 <code>HideInInspector</code> 就可以让 attacker 字段不在属性面板显示了。</p><h3 id="起飞吧，子弹！"><a href="#起飞吧，子弹！" class="headerlink" title="起飞吧，子弹！"></a>起飞吧，子弹！</h3><p>新建一个星弹的脚本 <code>MiniGame_StarBullet</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_StarBullet : MiniGame_Bullet</span><br><span class="line">&#123;</span><br><span class="line">    public float speed;</span><br><span class="line">    private float direct;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        direct &#x3D; attacker.transform.localScale.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void MoveEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        var pos &#x3D; transform.position;</span><br><span class="line">        pos.x +&#x3D; speed * Time.deltaTime * direct;</span><br><span class="line"></span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>星弹的逻辑比较简单，根据玩家的朝向向前直线移动。</p><p>然后把脚本挂在星弹的预制体上，并且将子弹的速度设置为 1500，伤害值设置为 1。</p><p>然后再修改 Player 发射子弹的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line">    bulletObj.transform.SetParent(bg.transform);</span><br><span class="line"></span><br><span class="line">    MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">    bullet.attacker &#x3D; this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在发射子弹的时候，将 this 赋值给子弹的 attacker，这样这颗子弹的主人就是主角了。</p><p>然后打开调试场景测试效果：</p><p><img src="https://i.loli.net/2021/05/03/3iXnzk9oZtYsIeG.gif" alt="Kapture 2021-05-03 at 9.46.27.gif"></p><p>看起来已经没问题了，但是……新的问题果然又来了。</p><p>打开调试窗口可以发现，发射出去的子弹并没有消失，而是继续一直往前飞行，仍然残留在游戏内：</p><p><img src="https://i.loli.net/2021/05/03/4IegDpaqQmfJyEU.gif" alt="Kapture 2021-05-03 at 9.56.18.gif"></p><h2 id="子弹消失术"><a href="#子弹消失术" class="headerlink" title="子弹消失术"></a>子弹消失术</h2><p>不管玩家的电脑有多大的内存，也扛不住无限生成的子弹。</p><p>因此在达到某种条件的时候，应该让子弹“消失”。</p><h3 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h3><p>有几个方案：</p><ul><li>子弹创建 3 秒后自动销毁</li><li>子弹飞行距离达到某个值后自动销毁</li><li>子弹离开屏幕后消失</li></ul><p>第①个方法和第②个方法实际结果是差不多的。</p><p>因为子弹的飞行速度是恒定的，设定 3 秒后销毁子弹，那么子弹最终移动的距离就是固定的。</p><p>所以有两种方法让子弹消失：①根据飞行距离 ②判定子弹是否离开屏幕</p><p>如果子弹的飞行距离过短，玩家就必须贴脸输出，明明是远程攻击最后却还要拉近距离……</p><p>个人感觉体验不好，所以我决定用第二种方法，这也是大多数 FC 游戏的做法。</p><p><img src="https://files.catbox.moe/2odcjn.jpg" alt="场景示意图"></p><p>上图是玩家在游戏场景按键攻击的示意图，当子弹飞出屏幕外的时候，即要进行销毁。</p><p>常规方法是像这样在游戏场景外生成一片区域，子弹撞到这个区域就会自动销毁。</p><p><img src="https://i.loli.net/2021/05/03/ROuA597oyzKlmwf.jpg" alt="QQ20210503-102015.jpg"></p><p>但是还有一种反其道而行之的方法，即把碰撞检测区域放在游戏场景内，改成监听子弹离开这片区域。</p><p><img src="https://i.loli.net/2021/05/03/zhknjHylax47vU3.jpg" alt="QQ20210503-102429.jpg"></p><p>第二种方法更好，因为第一种方法碰撞检测区域不规则，需要监听的区域比较多，而且子弹的大小形态各异，如下图：</p><p><img src="https://i.loli.net/2021/05/03/vsYMqT4eRylfr2w.jpg" alt="QQ20210503-103608.jpg"></p><p>体积比较大的子弹比起体积小的子弹会提前碰到屏幕边缘而消失。</p><p>而且子弹还没离开场景就“不见”了看起来也会很奇怪。</p><p>所以这里采用第二种方法来实现。</p><h3 id="区域检测器"><a href="#区域检测器" class="headerlink" title="区域检测器"></a>区域检测器</h3><p>unity 中要实现碰撞检测，其中一方必须是“刚体”，且双方都必须包含碰撞体组件。</p><p>这里又面临着一个选择：①刚体组件挂在子弹上面 ②刚体组件挂在区域检测器和敌人身上</p><p>常规做法是选择①，因为正常的思路子弹才是“实体”，刚体属于物理组件，理论上应该挂在子弹上面，而区域检测器更像是“触发器”一类的东西。</p><p>这样的想法虽然没错，但是这里还是选择反其道而行之，选择②才是最优解。</p><p>因为子弹的数量理论上是无限的，频繁创建组件需要耗费性能，而且刚体组件耗费的性能十分感人，如果满屏幕的子弹都是刚体，那很可能会有强烈的卡顿现象。</p><p>把刚体加在子弹上面明显是不理智的选择，子弹只需要添加碰撞体并且设置为触发器即可。</p><p>而且碰撞检测事件只需要监听「区域检测器」和「敌人」，而不是监听每一颗子弹，这样游戏监听的事件数量就大大减少了。</p><blockquote><p>有时候这种反其道而行之的做法，在游戏开发中会有很大的帮助</p></blockquote><p>首先在游戏场景创建一个空白物体 SceneArea，分辨率设置为屏幕大小：1280 * 720。</p><p>然后给这个物体添加 <code>Rigidbody 2D</code> 组件（2D刚体），然后再添加 <code>Box Collider 2D</code> 组件（2D 盒型碰撞体）。</p><p>如图所示：</p><p><img src="https://i.loli.net/2021/05/03/1rHFbAJKi9EvaTc.jpg" alt="QQ20210503-155245.jpg"></p><p>这里的 <code>Body Type</code> 应该设置为 <code>Dynamic</code>（动态的）这样才能与触发器产生碰撞检测。</p><p>因此还需要修改刚体组件的 <code>Gravity Scale</code> 为 0，即让它不受重力影响。</p><p>不然开始测试的时候这个区域就会因为重力掉下去，导致测不出来。</p><p><code>Simulated</code> 默认是勾选的，此处保持勾选状态，此选项是设置刚体是否模拟物理效果，如果取消勾选则检测不出碰撞。</p><p>场景区域这样就设置完毕了，现在虽然可以产生碰撞，但是还未对碰撞事件做出处理。</p><p>新建脚本 <code>MiniGame_SceneArea</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_SceneArea : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private void OnTriggerExit2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(collision.gameObject.name + &quot;离开场景&quot;);</span><br><span class="line"></span><br><span class="line">        string tag &#x3D; collision.gameObject.tag;</span><br><span class="line"></span><br><span class="line">        switch (tag)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;Bullet&quot;:</span><br><span class="line">                BulletEvent(collision);</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Enemy&quot;:</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Item&quot;:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void BulletEvent(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(collision.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里监听 <code>OnTriggerExit2D</code> 事件，需要注意的是 unity 还有一个类似的碰撞检测事件 <code>OnCollisionExit</code>。</p><p><code>Trigger</code>（触发器） 和 <code>Collision</code>（碰撞体）的碰撞回调方法是不一样的。</p><p>因为我将子弹视为触发器，所以要用 <code>Trigger</code> 作为碰撞的回调方法，当子弹离开这个区域的时候就会触发 <code>OnTriggerExit2D</code> 回调。</p><p><code>OnTriggerExit2D</code> 回调方法会根据物体的 <code>tag</code>（标签）来判断物体属于哪种类型。</p><p>因为不仅仅是子弹会在离开屏幕时消失，道具、敌人之类的也会在离开视野范围内消除，所以这里设置通过标签来区分。</p><p>其实全部只要触发 <code>Destroy</code> 销毁事件即可，但是在这里区分物体的种类，还可以计算「物品搜集率」、「怪物击败率」等等，完美通关还能弄个成就什么的。</p><h3 id="设置子弹"><a href="#设置子弹" class="headerlink" title="设置子弹"></a>设置子弹</h3><p>接下来设置子弹，同样是给子弹加上一个碰撞体，这里选择圆形碰撞体 <code>Circle Collider 2D</code>，并且设置好半径，然后把 <code>Is Trigger</code> 勾选。</p><p><img src="https://i.loli.net/2021/05/03/m75TWwFX9c3Ci2f.jpg" alt="QQ20210503-153200.jpg"></p><p>然后点击属性面板 <code>Inspector</code> 顶部的 <code>Tag</code>，新增一个 <code>Bullet</code> 标签，然后将子弹设置为该标签。</p><p><img src="https://i.loli.net/2021/05/03/WjCBiDguzGR72My.jpg" alt="QQ20210503-155517.jpg"></p><p>接下来修改调试场景的配置，场景像素配置修改为 <code>Free Aspect</code>，再把 <code>Maximize On Play</code>（最大化）点亮。</p><p><img src="https://i.loli.net/2021/05/03/xFUiO4JTQPWncEz.jpg" alt="QQ20210503-160354.jpg"></p><p>这样就可以看到屏幕摄像机拍不到的地方了，然后进入调试场景测试：</p><p><img src="https://i.loli.net/2021/05/03/1dzFQIGHKsuYgZT.gif" alt="Kapture 2021-05-03 at 16.04.59.gif"></p><p>可以看到子弹离开游戏区域（深色）时就会被自动销毁了。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（一）</title>
      <link href="2021/05/02/monster-game-1/"/>
      <url>2021/05/02/monster-game-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>短篇 AVG 游戏的流程已经差不多了，现在就差 cee 把游戏要用的素材提供给我，最后再导入测试就基本完成了。</p><p>所以趁这个时间，我打算把原来在 cocos creator 引擎上《名为怪物的游戏》制作进度移植到 unity 引擎。</p><p>同时花了一晚上的时间把火兔游戏的官网重建成这样一个博客，后续将会以博文的方式直播制作过程或者发布游戏预告。</p><p>（直播制作过程主要是为了防鸽……）</p><h2 id="移植原因"><a href="#移植原因" class="headerlink" title="移植原因"></a>移植原因</h2><p>首先我很喜欢 cocos creator 引擎，不仅是因为国人制作的，而且上手简单。</p><p>在制作了游戏的序章之后，发现 cocos creator 不能满足我们的要求，因为我们打算发布的是 PC 端，<br>而 cocos creator 主打移动游戏，比方说在游戏内调节分辨率 cocos 就不支持，还有因为 JavaScript<br>对文件读写什么的也有限制，要解决这些问题估计得花很多时间，但对于我们来说可以游刃有余的时间并不多了，<br>所以选择对单机游戏支持比较友好的 unity。</p><h2 id="星之魔女"><a href="#星之魔女" class="headerlink" title="星之魔女"></a>星之魔女</h2><p>星之魔女是《名为怪物的游戏》中的一个怀旧向像素风 FC 游戏。</p><p>使用 cocos creator 引擎开发的画面：<a href="https://www.bilibili.com/video/BV167411L7vJ/">https://www.bilibili.com/video/BV167411L7vJ/</a></p><iframe src="//player.bilibili.com/player.html?aid=89983856&bvid=BV167411L7vJ&cid=153683294&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="移植过程"><a href="#移植过程" class="headerlink" title="移植过程"></a>移植过程</h2><p>文章会包含制作过程的技术相关内容，如果有兴趣的小伙伴可以了解一下。</p><h3 id="素材导入"><a href="#素材导入" class="headerlink" title="素材导入"></a>素材导入</h3><p>由于之前小游戏已经做完了，所以素材可以直接导入。</p><p>像素风的序列帧：</p><p><img src="https://i.loli.net/2021/05/02/ZjeiXxRbSLBlHG7.jpg" alt="QQ20210502-214701.jpg"></p><h3 id="场景配置"><a href="#场景配置" class="headerlink" title="场景配置"></a>场景配置</h3><p>新建一个 1280 * 720 的场景。</p><p><img src="https://i.loli.net/2021/05/02/94OvjVgNtaY1HFG.jpg" alt="QQ20210502-214837.jpg"></p><h3 id="让角色动起来"><a href="#让角色动起来" class="headerlink" title="让角色动起来"></a>让角色动起来</h3><p>现在场景有了，但角色只是一张静态图片，要让角色可以通过按键移动，就要开始编写角色控制脚本了。</p><p>新建名为 <code>MiniGame_MoveEvent</code> 的脚本，用来控制角色移动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_MoveEvent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 500f;</span><br><span class="line"></span><br><span class="line">    private Vector3 left &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    private Vector3 right &#x3D; new Vector3(1, 1, 1);</span><br><span class="line"></span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))</span><br><span class="line">        &#123;</span><br><span class="line">            gameObject.transform.localScale &#x3D; left;</span><br><span class="line">            transform.Translate(Vector3.left * Time.deltaTime * speed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))</span><br><span class="line">        &#123;</span><br><span class="line">            gameObject.transform.localScale &#x3D; right;</span><br><span class="line">            transform.Translate(Vector3.right * Time.deltaTime * speed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 unity 中加载游戏会加载所有脚本，所以脚本的名字加上 <code>MiniGame_</code> 来区分。</p><p>为了让角色的朝向也能改变，在按下移动键的时候，顺便改变图片的翻转。</p><p>这里可以使用 WASD 来控制移动，也可以用方向键控制移动，目前只有左右移动，把这个脚本挂在 Player 对象上即可用键盘控制角色了：</p><p><img src="https://i.loli.net/2021/05/02/ZC73l8bPK6TiDho.gif" alt="Kapture 2021-05-02 at 21.54.23.gif"></p><p>实现角色移动还可以直接用 unity 自带的物理引擎，碰撞检测阻止移动就比较方便，但是我这里选择自己写脚本逻辑，因为 FC 游戏里的一些操作是不符合物理规律的。</p><h3 id="角色小动作"><a href="#角色小动作" class="headerlink" title="角色小动作"></a>角色小动作</h3><p>现在角色能动起来了，但是看起来就是在移动一张图片，没有游戏的感觉。</p><p>为了让角色变得“生动”，就要给角色加上动画演出效果。</p><p>unity 内置了动画系统，但是我这里也选择自己写脚本来控制。</p><p>新建一个名为 <code>MiniGame_Character</code> 的抽象类，因为不仅主角可以播放动画，敌人也有动画效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Character : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Sprite[] idle;</span><br><span class="line">    public Sprite[] hurt;</span><br><span class="line">    public Sprite[] attack;</span><br><span class="line">    public Sprite[] run;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 是否循环播放动画</span><br><span class="line">    private bool animateLoop;</span><br><span class="line">    &#x2F;&#x2F; 当前播放的动画</span><br><span class="line">    private string currentAnimate;</span><br><span class="line">    &#x2F;&#x2F; 当前动画index</span><br><span class="line">    private int animateIndex;</span><br><span class="line">    &#x2F;&#x2F; 当前动画精灵</span><br><span class="line">    public Sprite[] currentAnimateSprites;</span><br><span class="line">    &#x2F;&#x2F; 人物行走图</span><br><span class="line">    private Image character;</span><br><span class="line">    &#x2F;&#x2F; 动画播放间隔</span><br><span class="line">    private float animateInterval;</span><br><span class="line">    &#x2F;&#x2F; 当前时间</span><br><span class="line">    private float time;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        character &#x3D; GetComponent&lt;Image&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 死亡回调</span><br><span class="line">    protected abstract void DeadCallback();</span><br><span class="line"></span><br><span class="line">    public void SetAnimate(string animate)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 不播放重复动画</span><br><span class="line">        if (currentAnimate &#x3D;&#x3D; animate)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Debug.Log(&quot;切换动画：&quot; + animate);</span><br><span class="line"></span><br><span class="line">        currentAnimate &#x3D; animate;</span><br><span class="line">        animateIndex &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        switch (animate)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;idle&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                animateInterval &#x3D; 0.1f;</span><br><span class="line">                currentAnimateSprites &#x3D; idle;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;run&quot;:</span><br><span class="line">                animateLoop &#x3D; true;</span><br><span class="line">                animateInterval &#x3D; 0.1f;</span><br><span class="line">                currentAnimateSprites &#x3D; run;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;attack&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                currentAnimateSprites &#x3D; attack;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;hurt&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                currentAnimateSprites &#x3D; hurt;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void PlayAnimateListerner()</span><br><span class="line">    &#123;</span><br><span class="line">        if (animateLoop &#x3D;&#x3D; false &amp;&amp; animateIndex &gt; currentAnimateSprites.Length - 1)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Time.time &lt; time)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 时间自增</span><br><span class="line">        time &#x3D; Time.time + animateInterval;</span><br><span class="line"></span><br><span class="line">        if (animateLoop &#x3D;&#x3D; true)</span><br><span class="line">        &#123;</span><br><span class="line">            if (animateIndex &gt; currentAnimate.Length - 1)</span><br><span class="line">            &#123;</span><br><span class="line">                animateIndex &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        character.sprite &#x3D; currentAnimateSprites[animateIndex];</span><br><span class="line">        animateIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        PlayAnimateListerner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再新建一个用于玩家控制角色的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MiniGame_Character</span><br><span class="line">&#123;</span><br><span class="line">    protected override void DeadCallback()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO 进入GameOver场景</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画的播放逻辑很简单，就是循环播放图片，以下是主角的序列帧行走图：</p><p><img src="https://i.loli.net/2021/05/02/23e9XzWpJdjHBIw.jpg" alt="QQ20210502-220534.jpg"></p><p>跟制作动画的原理一样，就是以肉眼难以辨别的速度播放细微不同的图片，所以看起来像“动起来”一样。</p><p>为了间隔一定时间播放一张图片，这里用了一个计时器，定义下一个切换图片的时间点，比如 0.1 秒以后，如果当前时间等于 0.1 秒后，就播放下一张图片，然后切换图片的时间点等于当前时间加上 0.1s。</p><p>如果是循环播放类的图片，在图片全部播完之后，就会从第一张开始继续播放，如果是不循环的动画，就停止继续播放。</p><p>声明一个公开的方法 <code>SetAnimate</code>，只要传入要播放的动画，就会自动配置对应的参数，比如当前播放的图片数组和是否循环播放以及播放间隔。</p><p>这里要加一个判断，防止重复播放相同的动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (currentAnimate &#x3D;&#x3D; animate)</span><br><span class="line">&#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前已经在播这个动画了，再调用这个方法就直接返回。</p><p>抽象父类还定义了一个 <code>DeadCallback</code> 死亡回调方法，即当目标死亡时会做什么事情。</p><p>玩家死亡了就是 Gamover，敌人死亡了就爆金币。</p><p>现在先来做基本的动画：待机小动作和跑步动作。</p><p>要播放动画就调用 <code>SetAnimate</code> 方法，在 <code>MiniGame_Character</code> 加入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    SetAnimate(&quot;idle&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样角色在进入场景的时候，就会自动播放待机动画。</p><p>把 <code>MiniGame_Character</code> 脚本挂在场景的 Player 节点，并且在脚本组件上把待机动画图拖进去：</p><p><img src="https://i.loli.net/2021/05/02/IrwmhDUNsGRy8vl.jpg" alt="QQ20210502-221735.jpg"></p><p>进入场景就可以看到效果了：</p><p><img src="https://i.loli.net/2021/05/02/ytqZiRHB5nG6k98.gif" alt="Kapture 2021-05-02 at 22.19.09.gif"></p><p>一个简单的眨眼小动作！</p><p>同理要让角色有奔跑动画只需要在 <code>MiniGame_MoveEvent</code> 控制角色移动的时候播放动画即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;run&quot;);</span><br><span class="line">        gameObject.transform.localScale &#x3D; left;</span><br><span class="line">        transform.Translate(Vector3.left * Time.deltaTime * speed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;run&quot;);</span><br><span class="line">        gameObject.transform.localScale &#x3D; right;</span><br><span class="line">        transform.Translate(Vector3.right * Time.deltaTime * speed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断松开按键</span><br><span class="line">    if (Input.GetKeyUp(KeyCode.A) || Input.GetKeyUp(KeyCode.LeftArrow) ||</span><br><span class="line">        Input.GetKeyUp(KeyCode.D) || Input.GetKeyUp(KeyCode.RightArrow)</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;idle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还要判断当键盘松开的时候，要改成待机动画。</p><p>然后把奔跑的动画素材也拖到脚本组件上，演示效果：</p><p><img src="https://i.loli.net/2021/05/02/hvgxd8Y3pkworau.gif" alt="Kapture 2021-05-02 at 22.26.16.gif"></p><h3 id="小问题修正"><a href="#小问题修正" class="headerlink" title="小问题修正"></a>小问题修正</h3><p>这里其实还存在一个小问题，就是当按键和弹起的一瞬间，有几率出现判定失误，<code>GetKey</code> 方法是监听按键，不管是弹起还是按下都会触发，而 <code>GetKeyUp</code> 则是监听弹起事件，因此会存在监听到弹起事件的一瞬间同时也被判定为按下的情况，导致人物虽然停止移动了，但是奔跑动画却还在播放的情况。</p><p>除此之外，还有一个比较特殊的情况，就是如果玩家同时按下左方向和右方向，这样也会变得很奇怪。</p><p>为了修正上述两个问题，重新修改 <code>MiniGame_MoveEvent</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_MoveEvent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 400f;</span><br><span class="line"></span><br><span class="line">    private MiniGame_Player player;</span><br><span class="line"></span><br><span class="line">    private Vector3 left &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    private Vector3 right &#x3D; new Vector3(1, 1, 1);</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        player &#x3D; GetComponent&lt;MiniGame_Player&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        float raw &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">        float moveSpeed &#x3D; raw * Time.deltaTime * speed;</span><br><span class="line"></span><br><span class="line">        var pos &#x3D; transform.position;</span><br><span class="line">        pos.x +&#x3D; moveSpeed;</span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line"></span><br><span class="line">        if (raw &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;run&quot;);</span><br><span class="line">            gameObject.transform.localScale &#x3D; left;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (raw &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;run&quot;);</span><br><span class="line">            gameObject.transform.localScale &#x3D; right;</span><br><span class="line">        &#125; else</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;idle&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听按键的方法改成 <code>GetAxis</code>，这个方法会返回 -1~1的浮点数，</p><p><code>Horizontal</code> 是 unity 内置的常量，对应水平方向相关的按键，即左右方向键和 WASD。</p><p>所有的常量及对应的按键参数可以在构建游戏时，Player Settings 里查看：</p><p><img src="https://i.loli.net/2021/05/03/P4FR6JSWa3giLmK.jpg" alt="QQ20210503-002740.jpg"></p><p>这些常量有一个好处就是可以支持手柄操作。</p><p>因为 <code>GetAxis</code> 会返回一个范围值，而且是渐进式的增加，这样还可以让角色有一个起跑短暂加速的感觉，在松开按键的时候，也会有缓冲减速效果。</p><p>修改后的演示效果：</p><p><img src="https://i.loli.net/2021/05/02/jUuVS9l6sPQzTO2.gif" alt="Kapture 2021-05-02 at 23.17.15.gif"></p><p>另外，unity 还有一个 <code>GetAxisRaw</code> 方法，类似 <code>GetAxis</code>，但是它只会返回三个值：-1、0、1。</p><p>如果使用 <code>GetAxisRaw</code> 方法，就没有平滑起跑的效果了，而是直接以最大的速度奔跑，改成 <code>GetAxisRaw</code> 后的演示效果如下：</p><p><img src="https://i.loli.net/2021/05/02/agpb3rl1ihWxLo7.gif" alt="Kapture 2021-05-02 at 23.20.22.gif"></p><p>两种效果都各有好坏，有缓冲效果感觉更加笨重，但是比较真实，以最大速度起跑操作体验更好。</p><p>这里我就采用直接最大速度开始奔跑的方案，另外，如果同时按下左右方向键，则行动会立即停止，不会因为同时按而产生奇奇怪怪的结果了。</p><p>而动画是根据按压的 raw 返回值来判断的，也就不会出现行动停止奔跑动画还在继续的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于火兔游戏工作室</title>
      <link href="2021/05/01/welcome/"/>
      <url>2021/05/01/welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="关于火兔游戏工作室"><a href="#关于火兔游戏工作室" class="headerlink" title="关于火兔游戏工作室"></a>关于火兔游戏工作室</h1><h2 id="成员组成"><a href="#成员组成" class="headerlink" title="成员组成"></a>成员组成</h2><p>火兔游戏工作室目前由两个人组成：我（火烧兔子）和 Cee。</p><p>我主要负责游戏的程序，Cee 主要负责游戏的美工以及剧本的主线剧情。</p><h2 id="游戏作品"><a href="#游戏作品" class="headerlink" title="游戏作品"></a>游戏作品</h2><p>我们联合制作的第一部作品是「月之幻想」，记得当时只用了一个月的时间就完成 Demo 版，但最后很遗憾还是没有做到完结。</p><p>我个人的作品还有：</p><ul><li>【短篇AVG】路人甲的故事</li><li>【网页版】魔王传说系列：第三弹（已下线）</li><li>【RPG】魔王传说系列：第一弹及第二弹</li><li>【RPG】宠物战记</li><li>【RPG】冒险物语</li><li>【RPG】黑暗刻印</li></ul><h2 id="新作预告"><a href="#新作预告" class="headerlink" title="新作预告"></a>新作预告</h2><p>目前正在制作一部短篇 AVG，已经快完成了，近期之内应该就会发布。</p><p>以及原创长篇 RPG ——「名为怪物的游戏」。</p><p>由于种种原因导致进度停滞不前，现在开始重新计划中，等到现在制作的 AVG 完成就可以开始了。</p>]]></content>
      
      
      <categories>
          
          <category> 非游戏分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
