<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>代号：宝可梦（一）</title>
      <link href="2021/06/05/like-pokemon-03/"/>
      <url>2021/06/05/like-pokemon-03/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>宝可梦同人游戏正式开始制作。</p><p>与怪物游戏同时进行开发，由于许多系统是类似的，所以完成其中一个再改造一下另一个游戏也能使用。</p><p>想过用 RPG Maker 来制作这个游戏。</p><p>自己从零开始写系统要花费好几倍的精力……</p><p>想到原创系统的梦想，还是咬咬牙坚持下去吧。</p><h1 id="对话系统"><a href="#对话系统" class="headerlink" title="对话系统"></a>对话系统</h1><p>昨天晚上就做好了对话系统，但是 UI 还没做。</p><p><img src="https://files.catbox.moe/35k8kn.gif" alt="对话系统"></p><p>虽然功能完成了，但还不能直接使用。</p><p><img src="https://files.catbox.moe/f39ii6.jpg" alt="对话系统代码"></p><p>现在还只是纯代码的形式，每一句话都要写一段代码。</p><p>为了简化工作，对话要做成配置表或者文本形式。</p><p>因为宝可梦的对话系统比较简单，不用配置头像，所以我选择最简单的文本形式作为对话系统的数据存储。</p><p><img src="https://files.catbox.moe/3jjq7n.jpg" alt="对话文本"></p><p>这个对话系统的数据存储也是想了好久才决定用这种形式。</p><p>第一是要直观的看出对话内容，第二是要方便设置和修改。</p><p>用 excel 虽然可以实现更加复杂的对话系统，但是配置对话文本花的时间也会翻倍。</p><p>按照目前的情况时间并不充裕，我要在最短的时间把游戏赶制出来，选择简单文本是最佳方案。</p><h1 id="选项系统"><a href="#选项系统" class="headerlink" title="选项系统"></a>选项系统</h1><p>要让剧情连贯起来不是一件容易的事情。</p><p>所以我的第一步计划是不用连贯的方法，而是分开实现各个系统。</p><p>假如有一个场景是一个 NPC 跑过来跟玩家对话，然后问了玩家一个问题，要让玩家做出二选一，选完之后 NPC 就会离开。</p><p>这个情景看起来很简单，但是要连贯起来是非常困难的。</p><p>在一些大游戏会专门设计一个可视化剧情系统来完成整个剧情动画。</p><p>但是我现在的状况不允许慢悠悠的去做一套剧情系统，相反如果不用连贯的方式来实现就会简单得多。</p><p>比如对话完了要调出一个选项，那就先结束对话，接着创建一个选项，玩家选择完之后，再重新调用下一段的对话。</p><p>理论上可以实现剧情系统的连贯，但是得花好多时间去完成一整套的剧情系统。</p><p>缺点是代码会有很多层嵌套，玩家层面感知不到，所以没关系。</p><p>能用人力解决的，就先用人力代替吧，节省时间。</p><p><img src="https://files.catbox.moe/9dsndy.gif" alt="选项系统"></p><p>选项系统和对话系统是分开的，因此在一个剧情对话中，需要把一段原本完整的剧情分割成多个。</p><p>这也是比较麻烦的地方，但还好问题不大。</p><h1 id="联动效果"><a href="#联动效果" class="headerlink" title="联动效果"></a>联动效果</h1><p>为了方便调用，创建对话和选项的方法要封装起来。</p><p>创建一个 GameManager 游戏管理类，用于调用一些通用的方法。</p><p><img src="https://files.catbox.moe/fid6fp.jpg" alt="封装方法"></p><p>然后试着写一下对话和选项的联动实现剧情的代码实现。</p><p><img src="https://files.catbox.moe/si4hkc.jpg" alt="对话和选项联动的代码"></p><p>如果剧情对话的分支比较多的话，就比较蛋疼了……</p><p>测试结果：</p><p><img src="https://files.catbox.moe/ysobfs.gif" alt="剧情对话和选项的联动"></p><p>看起来是没啥问题了，但代码写起来不是很优雅。</p><p>而且在创建选项的时候，这里的文字是没有本地化语言处理的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> private void Select()</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;OptionData&gt; optionDatas &#x3D; new List&lt;OptionData&gt;();</span><br><span class="line"></span><br><span class="line">    optionDatas.Add(new OptionData</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; &quot;男孩&quot;,</span><br><span class="line">        callback &#x3D; Dialog_2</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    optionDatas.Add(new OptionData</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; &quot;女孩&quot;,</span><br><span class="line">        callback &#x3D; Dialog_3</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    GameManager.CallSelectPanel(optionDatas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前游戏有两种语言：简体中文和繁体中文。</p><p>如果这样写死代码的话，就没办法实现多语言了。</p><blockquote><p>有时候真的想去游戏公司实习一下，看看别人是怎么做的，网上几乎找不到相关的教程，经常卡到头大</p></blockquote><p>要保证能够多语言化，这里的选项文字就得提取出来。</p><p>所以我决定单独把 UI 的文本提取成一个 TXT 文件。</p><h1 id="UI-文本"><a href="#UI-文本" class="headerlink" title="UI 文本"></a>UI 文本</h1><p>创建一个本地化文本 ui.txt：</p><p><img src="https://files.catbox.moe/m6f6gc.jpg" alt="ui.txt"></p><p>这个文件保存了界面 UI 上的文字和对话选项的文字。</p><p>UI 文本需要在游戏启动时进行加载。</p><p>创建一个 Loading 场景加载资源，加载完成后即跳转到测试场景。</p><p>在 GameManager 里用一个静态变量保存所有 UI 文本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class GameManager : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public static Dictionary&lt;string, string&gt; uiTexts &#x3D; new Dictionary&lt;string, string&gt;();</span><br><span class="line"></span><br><span class="line">    public static void LoadLocaleSetting()</span><br><span class="line">    &#123;</span><br><span class="line">        string lang &#x3D; &quot;zh-cn&quot;;</span><br><span class="line">        TextAsset uiText &#x3D; Resources.Load(&quot;Locale&#x2F;&quot; + lang + &quot;&#x2F;common&#x2F;ui&quot;) as TextAsset;</span><br><span class="line">        string[] data &#x3D; uiText.text.Split(Environment.NewLine.ToCharArray());</span><br><span class="line"></span><br><span class="line">        foreach (string item in data)</span><br><span class="line">        &#123;</span><br><span class="line">            if (item !&#x3D; &quot;&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                string[] res &#x3D; item.Split(&#39;&#x3D;&#39;);</span><br><span class="line">                uiTexts.Add(res[0], res[1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且提供了一个加载资源的方法。</p><p>这样文本就会全部载入到静态变量中，全局都可以调用。</p><h1 id="选项本地化"><a href="#选项本地化" class="headerlink" title="选项本地化"></a>选项本地化</h1><p>修改之前生成选项的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void Select()</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;OptionData&gt; optionDatas &#x3D; new List&lt;OptionData&gt;();</span><br><span class="line"></span><br><span class="line">    optionDatas.Add(new OptionData</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; &quot;boy&quot;,</span><br><span class="line">        callback &#x3D; Dialog_2</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    optionDatas.Add(new OptionData</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; &quot;girl&quot;,</span><br><span class="line">        callback &#x3D; Dialog_3</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    GameManager.CallSelectPanel(optionDatas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只要传入 UI 文本中等号左边的 key（键名）就可以。</p><p>boy 和 girl 是在 ui.txt 文本中定义的。</p><p>只要传入这个键名，就会转化成对应的键值：男孩和女孩。</p><p>最后在选项数据里加一个将 key 转化为对应文本的方法即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class OptionData</span><br><span class="line">&#123;</span><br><span class="line">    public string text;</span><br><span class="line">    public System.Action callback;</span><br><span class="line"></span><br><span class="line">    public string GetText()</span><br><span class="line">    &#123;</span><br><span class="line">        GameManager.uiTexts.TryGetValue(text, out string value);</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下大功告成~</p><p>这样看起来舒服多了~</p>]]></content>
      
      
      <categories>
          
          <category> 代号：宝可梦 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝可梦游戏室内地图绘制学习</title>
      <link href="2021/06/04/like-pokemon-02/"/>
      <url>2021/06/04/like-pokemon-02/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>宝可梦游戏的室内地图都很小巧精致。</p><p>为了制作宝可梦同人，绘制自己的场景地图，需要学习一下宝可梦风格的房子有什么特征。</p><h1 id="单间房子"><a href="#单间房子" class="headerlink" title="单间房子"></a>单间房子</h1><p><img src="https://files.catbox.moe/4ctqor.jpg" alt="单间"><br><img src="https://files.catbox.moe/x2l3f6.jpg" alt="单间"></p><h1 id="隔间房子"><a href="#隔间房子" class="headerlink" title="隔间房子"></a>隔间房子</h1><p>如果房子比较大，就会用墙壁分割成多间小房子。</p><p><img src="https://files.catbox.moe/j9bt4c.jpg" alt="多间"></p><h1 id="风格总结"><a href="#风格总结" class="headerlink" title="风格总结"></a>风格总结</h1><p>宝可梦室内地图都很小巧，掌机屏幕不大所以设计成小房子没什么奇怪的。</p><p>但是观察之后发现可能并不是因为这个原因。</p><p><img src="https://files.catbox.moe/q6hi8v.jpg" alt="实际的场景大小"></p><p>在本来就不大的掌机屏幕，宝可梦公司并没有最大程度的利用屏幕空间。</p><p>反而是把空间进一步的压缩，可以发现所有室内地图周围都有黑边。</p><p>也许是日本那边比较喜欢小的房间，所以将游戏中的房子也设计成小房间。</p><p>房间小还有几个优点：</p><p>① 看起来更加精致</p><p>宝可梦是 Q 版风格，小巧的房间显得更加精致。</p><p>② 减少玩家跑图距离</p><p>避免玩家因为跑图而浪费太多时间。</p><p>在房间里不能骑自行车，所以太远的距离会影响玩家的体验。</p><p>宝可梦公司在掌机屏幕已经很局限的情况下，再将房间进一步的进行压缩，这种设计有点大胆~</p><p>另外，仔细观察不难发现几乎家家户户的边角都有这种植物和电视机。</p><p><img src="https://files.catbox.moe/f3x0vy.jpg" alt="植物和电视机"></p><p>此外，所有的出口都有地毯作为标志物。</p><p><img src="https://files.catbox.moe/mnn1gt.jpg" alt="地毯"></p><p>看到地毯就知道这是房间的出口。</p><p>最后，所有的房间几乎都有窗户（正面）。</p><p><img src="https://files.catbox.moe/x2p3zx.jpg" alt="窗户"></p><h1 id="设计要点"><a href="#设计要点" class="headerlink" title="设计要点"></a>设计要点</h1><p>总结出宝可梦室内房间风格之后，不难发现有几个特征。</p><ul><li>空间很小</li><li>周围有黑边</li><li>有电视剧、植物等常见室内摆设</li><li>出口出有地毯</li><li>正面看得见窗户</li></ul><p>那么根据这些特征设计房间就能有“宝可梦”的味道了！</p><h1 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h1><p>这是未总结宝可梦风格之前设计的室内地图。</p><p><img src="https://files.catbox.moe/t9chba.jpg" alt="第一版"></p><p>场景的像素为 640*480。</p><p>因为没有使用黑边，所以看起来有点空旷。</p><p>明显可以感觉到左下角和右上角的这两个部分有点“空”。</p><p><img src="https://files.catbox.moe/e9vklw.jpg" alt="空空如也"></p><p>墙壁看不见窗户，有一种密闭感会让人觉得透不过气。</p><h1 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h1><p>在保证基本布局不变的情况下，将此房间改造成“宝可梦风”。</p><h2 id="缩小房间面积"><a href="#缩小房间面积" class="headerlink" title="缩小房间面积"></a>缩小房间面积</h2><p>空间不需要占满，周围用黑边代替。</p><p>将整个房间压缩到一个很精致小巧的大小。</p><p>第一步，绘制地板和墙壁，房间的面积大幅缩减，周围用黑边代替。</p><p><img src="https://files.catbox.moe/da4bmc.jpg" alt="黑边和地板、墙壁"></p><h2 id="出口处放置地毯"><a href="#出口处放置地毯" class="headerlink" title="出口处放置地毯"></a>出口处放置地毯</h2><p><img src="https://files.catbox.moe/e5un5m.jpg" alt="放置地毯"></p><h2 id="摆放房屋物件"><a href="#摆放房屋物件" class="headerlink" title="摆放房屋物件"></a>摆放房屋物件</h2><p>这是一间卧室，所以有床、书柜和桌子等基本物件。</p><p><img src="https://files.catbox.moe/2yrb9i.jpg" alt="基本家具"></p><h2 id="装饰物"><a href="#装饰物" class="headerlink" title="装饰物"></a>装饰物</h2><p>家具有了，已经具备了一个普通房间的基本标准。</p><p>但这个房间没有什么特色，因此接下来摆放一些装饰物来点缀房间。</p><p>给地板铺上毛绒毯子，还有地上随处乱扔的抱枕，再加点猫脚印填补下方的空白。</p><p><img src="https://files.catbox.moe/539gid.jpg" alt="装饰物"></p><p>墙壁有点空，再贴上海报和蝴蝶挂画。</p><p><img src="https://files.catbox.moe/xb1f6n.jpg" alt="墙壁装饰物"></p><h2 id="窗户"><a href="#窗户" class="headerlink" title="窗户"></a>窗户</h2><p>没有窗户会产生密闭感，会让人觉得很压迫。</p><p>这里既可以直接用窗户，也可以用窗帘，都能产生相同的效果。</p><p>（发现植物盆子底下少了一块，趁机补上）</p><p><img src="https://files.catbox.moe/gtpfgo.jpg" alt="窗户"></p><p>这间屋子是典型的少女房间，一般都会拉上窗帘。</p><p>当然用正方形格子的窗户也是可以的。</p><h1 id="两版对比"><a href="#两版对比" class="headerlink" title="两版对比"></a>两版对比</h1><p>改进版虽然左下角没有放装饰物，但看起来却不会那么空旷。</p><p>右上角原本空空的地方已经变成很自然了。</p><p><img src="https://files.catbox.moe/qec56k.jpg" alt="左下角部分"></p><p>左下角还可以再放个毛绒熊的布娃娃填补空白。</p><p>但是留白的地方还是很重要的，太多的装饰物看起来反而会让人眼花缭乱。</p><p>再加上压缩了房间的面积，要素过多就会变得杂乱不堪。</p><p>左右下角两边各有猫脚印的坐垫，好似猫走过的痕迹。</p><p><img src="https://files.catbox.moe/yhzol5.jpg" alt="猫走过的痕迹"></p><p>两边对称的摆设让人看起来会很舒服~</p><p>正中间的地方再放一个猫型抱枕，起到点题的作用。</p><p>因此这间房间就是「猫主题的少女房间」。</p><p><img src="https://files.catbox.moe/n7wxd5.jpg" alt="猫主题少女房间"></p><h1 id="素材来源"><a href="#素材来源" class="headerlink" title="素材来源"></a>素材来源</h1><p>本文演示用的地图块素材来源如下：</p><p><a href="https://rpg.blue/thread-485281-1-1.html">by loffid</a><br><a href="http://www.rpgtuzi.com/?id=35">by  rpgtuzi</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代号：宝可梦</title>
      <link href="2021/06/02/like-pokemon-01/"/>
      <url>2021/06/02/like-pokemon-01/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>小学的时候放学就直奔回家，为了防止错过宝可梦无印篇。</p><p>因为没有办法入手 GB、GBA 等掌机，所以没机会接触到口袋妖怪。</p><p>唯一的童年回忆就是无印篇的动画版了。</p><p>直到初中以后，家里买了电脑，所以开始搜索宝可梦相关的游戏。</p><p>最开始是找到魔兽世界的宝可梦地图，但很遗憾不会用。</p><p>接着无意中搜索了宝可梦的图片（可能是想找壁纸什么的）。</p><p>看到一张图片下面有水印“66RPG”，机缘巧合的打开了新世界的大门。</p><p>估计是某人用 RPG Maker XP 自制的宝可梦同人游戏。</p><p>我期待的下载下来试玩，我还记得只有一场战斗对阵化石翼龙。</p><p>打完就结束了。</p><p>回合制的战斗外加很不错的连击系统，打击感比起正统的宝可梦游戏强得多。</p><p>然后开始逛 6R 的论坛，发现原来这里是一个游戏制作者论坛。</p><p>后面就很奇妙的下载了 RPG Maker XP，开始了游戏制作之旅。</p><p>再后面的话，对电脑的操作技术也越来越熟练了。</p><p>知道原来可以用模拟器启动口袋妖怪游戏，最初玩的是口袋妖怪：钻石。</p><p>后面又玩了白金。</p><p>不知道从哪里发现了一个国产的口袋妖怪在线对战软件 PBO。</p><p>可以自由组合搭配队伍与其他玩家对战。</p><p>但是 PBO 的网络不稳定，经常无法联机。</p><p>然后又不知道从哪里下载了老外的 PBO，可以与全世界的人进行对战。</p><p>玩的不亦乐乎！</p><p>又玩了 GBA 的绿宝石、火红叶绿。</p><p>然后就在电脑上启动两个模拟器，左边是我，右边是 cee，两个人一起玩绿宝石。</p><p>模拟器还可以进行联机对战，我们就在屏幕中间用胶布粘了一个纸板，防止对战的时候偷看。</p><p>可以说宝可梦游戏给我们带来了很多的欢乐。</p><h1 id="最初的梦想"><a href="#最初的梦想" class="headerlink" title="最初的梦想"></a>最初的梦想</h1><p>最初我们是为了寻找口袋妖怪游戏，误打误撞进入了 6R 论坛。</p><p>接触了 RPG Maker 制作工具，当时就想自己做一款宝可梦的同人。</p><p>但是可惜宝可梦的系统没办法实现，后面就不了了之了。</p><p>现在已经有能力原创系统了，所以打算重拾梦想。</p><h1 id="制作计划"><a href="#制作计划" class="headerlink" title="制作计划"></a>制作计划</h1><p>为了避免与《名为怪物的游戏》制作产生冲突。</p><p>这个游戏将会是我个人进行开发，两个游戏同时开发。</p><p>虽然说是宝可梦的同人，但是宝可梦公司是严令禁止二次创作的。</p><p>所以我不会直接使用宝可梦相关的素材，沿用的是宝可梦的世界观和背景、系统。</p><p>当然，并不是单纯的复刻宝可梦，那样没什么意义。</p><p>我想做的是融入自己想法的宝可梦游戏，所以会有一定程度的魔改。</p><p>素材也将从零开始自学像素画完成。</p><p>在制作初期会使用口袋妖怪绿宝石的素材临时替代。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>初步计划是做到第三个道馆的剧情。</p><p>预计在今年发布 Demo 版。</p><p>目标是登录 Steam 发售。</p><p>同时发布免费的体验版在 QQ 群以及本博客。</p><p>如果能顺利完成，将会保持更新直至完结为止。</p>]]></content>
      
      
      <categories>
          
          <category> 代号：宝可梦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏预告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的像素画学习（二）小技巧整合篇</title>
      <link href="2021/05/31/pixel-02/"/>
      <url>2021/05/31/pixel-02/</url>
      
        <content type="html"><![CDATA[<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><h3 id="快速描线"><a href="#快速描线" class="headerlink" title="快速描线"></a>快速描线</h3><p>通常像素画要用鼠标一个一个点出线条，但是今天学到一招小技巧。</p><p>先用铅笔点出一个点，再按住 Shift 键在别的地方点一下，一个像素风格的线条就出现了！</p><p><img src="https://i.loli.net/2021/05/31/QAagvjyDHERGV6s.gif" alt="Kapture 2021-05-31 at 12.37.55.gif"></p><h3 id="临摹模式"><a href="#临摹模式" class="headerlink" title="临摹模式"></a>临摹模式</h3><p>通常我们会选用一张参考图片，然后放到旁边当做参考。</p><p><img src="https://i.loli.net/2021/05/30/rN847JuQ1tZlH2K.jpg" alt="参考图片"></p><p>但还有一种临摹模式，可以直接在原图上进行绘制。</p><p>打开一张要临摹的图片，然后在右侧图层将不透明度改成 50% 即可。</p><p><img src="https://i.loli.net/2021/05/31/eSTDtWjgcnNkOb8.jpg" alt="QQ20210531-124256.jpg"></p><p>然后新建一个图层，在新的图层上面描线。</p><p><img src="https://i.loli.net/2021/05/31/IWmNRi5SCJGkPQw.jpg" alt="QQ20210531-124545.jpg"></p><h3 id="新建图层"><a href="#新建图层" class="headerlink" title="新建图层"></a>新建图层</h3><p>线稿以及涂色都要在单独的图层，快速新建图层只要按快捷键：Shift+Ctrl+N。</p><h3 id="切换工具"><a href="#切换工具" class="headerlink" title="切换工具"></a>切换工具</h3><p>想要快速切换橡皮擦与铅笔，只要将鼠标移动到左侧的工具菜单，稍等一会就可以看到快捷键提示。</p><p><img src="https://i.loli.net/2021/05/31/ctdnXvypqk1Ns4P.jpg" alt="QQ20210531-134744.jpg"></p><p>橡皮擦的快捷键是 E（英文：Eraser），画笔的快捷键是 B（Brush）。</p><p>直接使用快捷键切换可以大大提高绘图效率。</p><h3 id="快速选择"><a href="#快速选择" class="headerlink" title="快速选择"></a>快速选择</h3><p>想要直接获得图像的轮廓，可以按住 Ctrl 键然后点击右侧图层。</p><p>这样整个图层都会变成选中状态。</p><p><img src="https://i.loli.net/2021/05/31/YtoEcLiAu4psh52.jpg" alt="QQ20210531-135140.jpg"></p><h3 id="文字转图层"><a href="#文字转图层" class="headerlink" title="文字转图层"></a>文字转图层</h3><p>默认情况下文字是不能被涂改的，可以将文字栅格化转变为图层。</p><p><img src="https://files.catbox.moe/mrtobf.jpg" alt="栅格化文字"></p><p>栅格化之后文字会变成一个图层，然后就可以随意涂改了。</p><p><img src="https://files.catbox.moe/vpi4oo.jpg" alt="涂改文字"></p><h3 id="自由变换"><a href="#自由变换" class="headerlink" title="自由变换"></a>自由变换</h3><p>按住 Ctrl+T 可以对图像进行自由变换。</p><p>不仅可以缩放、调整位置，还可以旋转图像。</p><p><img src="https://files.catbox.moe/byo0bl.jpg" alt="自由变换"></p><h3 id="所有快捷键"><a href="#所有快捷键" class="headerlink" title="所有快捷键"></a>所有快捷键</h3><p>Photoshop 所有快捷键操作。</p><p>参考官方文档：<a href="https://helpx.adobe.com/cn/photoshop/using/default-keyboard-shortcuts.html">https://helpx.adobe.com/cn/photoshop/using/default-keyboard-shortcuts.html</a></p><h2 id="绘制技巧"><a href="#绘制技巧" class="headerlink" title="绘制技巧"></a>绘制技巧</h2><h3 id="抖动"><a href="#抖动" class="headerlink" title="抖动"></a>抖动</h3><p>能让密集恐惧症抓狂的小技巧。</p><p><img src="https://i.loli.net/2021/05/31/mQ3tdufgHTn1LxE.jpg" alt="QQ20210531-125250.jpg"></p><p>抖动可以让画面更有质感。</p><p><img src="https://i.loli.net/2021/05/31/t9Egz8nBwVSx32d.jpg" alt="QQ20210531-133513.jpg"></p><p>无抖动的效果：</p><p><img src="https://i.loli.net/2021/05/31/bXSw9svhk6xFTRN.jpg" alt="QQ20210531-133647.jpg"></p><p>加了抖动的效果：</p><p><img src="https://i.loli.net/2021/05/31/ozbUMYTmhGciqD6.jpg" alt="QQ20210531-133716.jpg"></p><p>尾巴部分的毛色看起来更加自然。</p><p>如果用不好的话，就会让密集恐惧者抓狂。</p><p><img src="https://i.loli.net/2021/05/31/VOquEPLpXNKbGMr.jpg" alt="QQ20210531-133936.jpg"></p><h3 id="平滑的线"><a href="#平滑的线" class="headerlink" title="平滑的线"></a>平滑的线</h3><p>在保证线条不断的情况下删掉多余的点，让线条变得更加平滑。</p><p><img src="https://i.loli.net/2021/05/31/Vpw6AHsrk2vLxuU.jpg" alt="QQ20210531-125502.jpg"><br><img src="https://i.loli.net/2021/05/31/flkrOqJAVIsgeNT.jpg" alt="QQ20210531-125513.jpg"></p><h3 id="抗锯齿"><a href="#抗锯齿" class="headerlink" title="抗锯齿"></a>抗锯齿</h3><p>像素画的边界会有明显的锯齿感，但是浅色的就比较不会。</p><p>这是因为颜色与背景产生鲜明的对比，所以看起来更加“犀利”。</p><p><img src="https://i.loli.net/2021/05/31/tXHIFPTWrbodcDh.jpg" alt="QQ20210531-130054.jpg"></p><p>要想消除锯齿感只要让边缘与背景颜色的对比不那么鲜明即可。</p><p>像素风的圆不是一个真正的原型，对比之下可以发现与真实的圆存在一些空缺。</p><p><img src="https://i.loli.net/2021/05/31/gplnb9xcMdo7C1k.jpg" alt="QQ20210531-130246.jpg"></p><p>只要在空缺的地方补上较浅的颜色即可。</p><p>缺失得多的地方就补上较深的颜色，缺失少的部分就补上浅色。</p><p><img src="https://i.loli.net/2021/05/31/BwLGhp5U4Q2sVWv.jpg" alt="QQ20210531-130409.jpg"></p><p>补上空缺之后看起来好多了。</p><h3 id="阴影效果"><a href="#阴影效果" class="headerlink" title="阴影效果"></a>阴影效果</h3><p>只要在光暗交界处绘制阴影即可。</p><p><img src="https://i.loli.net/2021/05/31/CMsLEhQc2AkwPYI.jpg" alt="QQ20210531-125652.jpg"></p><h3 id="渐变效果"><a href="#渐变效果" class="headerlink" title="渐变效果"></a>渐变效果</h3><p>通过颜色深浅变化来绘制渐变效果。</p><p><img src="https://i.loli.net/2021/05/31/kWgIpL7iqCj6EnN.jpg" alt="QQ20210531-125744.jpg"></p><h3 id="颜色组合"><a href="#颜色组合" class="headerlink" title="颜色组合"></a>颜色组合</h3><p>不同的颜色组合会有不同的效果。</p><p>绘制阴影的时候可以多尝试几个不同的颜色。</p><p><img src="https://i.loli.net/2021/05/31/TdFIp81B493VkjR.jpg" alt="QQ20210531-125900.jpg"></p><h3 id="转像素图"><a href="#转像素图" class="headerlink" title="转像素图"></a>转像素图</h3><p>将一张非像素图片转化为像素图的方法。</p><p>即直接将一张大图调整为小图，缩放之后自然就会变成像素风格了（其实就是变糊了）。</p><p><img src="https://i.loli.net/2021/05/31/qF4dSjBigWzVLem.jpg" alt="QQ20210531-130849.jpg"></p><p>就着在新图上面描线和添加颜色，就可以完成一张像素画了。</p><p><img src="https://i.loli.net/2021/05/31/5a6UscfwhKJWuBj.jpg" alt="QQ20210531-131503.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> 游戏素材 </tag>
            
            <tag> 像素画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的像素画学习（一）</title>
      <link href="2021/05/30/pixel-01/"/>
      <url>2021/05/30/pixel-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为 Cee 非全职制作，所以进度比较慢。</p><p>在等待素材完成期间我会再开一个新坑同步开发，保证今年绝不会鸽！</p><p>无论如何我都想开发一个纯原创的游戏（音乐除外），所以排除了用 RPG Maker 的素材，打算自己原创。</p><p>我并不是专业学美术的，所以打算挑选比较适合非专业人员易上手的像素风作为游戏的基本风格。</p><h2 id="第一次练习"><a href="#第一次练习" class="headerlink" title="第一次练习"></a>第一次练习</h2><p>第一次用皮卡丘作为参照物绘制像素画。</p><p>工具是 PS + 画图，PS 的操作还不太熟悉，等熟悉以后就完全用 PS 绘制。</p><p>虽然是第一次画，但是速度还挺快的，大约只花了十几分钟就完成了。</p><p><img src="https://i.loli.net/2021/05/30/XNuRYISp9kVAC4g.jpg" alt="QQ截图20210530230154.jpg"><br><img src="https://i.loli.net/2021/05/30/rN847JuQ1tZlH2K.jpg" alt="QQ截图20210530231344.jpg"><br><img src="https://i.loli.net/2021/05/30/5iHuZvGOS79lYNw.jpg" alt="QQ截图20210530232349.jpg"></p><p>线条看起来毛躁毛躁的，接下来开始看一些像素画教程提升一下绘画水平(～￣▽￣)～</p><h2 id="一些感想"><a href="#一些感想" class="headerlink" title="一些感想"></a>一些感想</h2><p>由于我有色弱，所以天生就不适合当美工，我画的素材颜色可能不对。</p><p>(上面的皮卡丘不会是绿色的吧……)</p><p>记得上幼儿园的时候，老师让我们画画，我画了树和太阳，把树涂成了黄色……结果还被老师批评了。</p><p>并不是我涂错色，我当然知道树应该涂绿色，但是我分不清黄色和绿色，结果涂成了黄色。</p><p>老师并不知道有色盲这种症状，在不知情的情况下批评一个小孩……我还清楚的记得那种打击感。</p><p>如果老师能问：为什么把树涂成黄色了，难道是秋天到了？</p><p>我可能就不会因为这件事产生心理阴影了。</p><p>后面我都不敢继续画画了，即使画了也不敢涂颜色，生怕涂错被人嘲笑……</p><p>（我小时候是很喜欢画画的，就因为涂错了颜色被嘲笑之后留下了心理阴影）</p><p>长大之后最可怕的就是地理课了，各种地图上面用颜色标注我根本就分不清，比如什么温带气候啊，用深色和浅色来标注，我压根就看不清楚到底哪个颜色对应哪个区域，结果被老师提问了也答不上来，然后又被狠狠的批评了……</p><p>真的是欲哭无泪，还有每次体检遇到色盲检测图的时候，总有几个答不上来，如果旁边有其他小朋友，那就十分尴尬了。</p><p>所幸的是我并不是色盲，而只是对于某些颜色分不清，要不然驾照都考不了。</p><p>我一直很疑惑为什么交通红绿灯一定要用颜色来区分？</p><p>为什么不能改变灯的形状，比如圆形是停下，三角形是通行，正方形是警示灯。</p><p>如果用形状区分的话，那么色盲和色弱也能分得清楚了。</p><p>有些事是天生的，没办法改变靠努力改变，ε=(´ο｀*)))唉</p><p>现在长大了，有了克服心理阴影的勇气。</p><p>如果我也能当个美工，那样游戏的制作进度就可以自己掌控了。</p><p>在《名为怪物的游戏》素材完成期间进行开发不会影响到整体的进度，新坑作为 B 计划防止因为意外事件导致今年没能推出游戏作品。</p><p>自从《魔王传说2》和《路人甲的故事》之后，N 年间都没能推出新作品，这是我现在最悔恨的事情。</p><p>制作一个原创游戏是我多年的夙愿，无论如何今年都必须推出新作，如果怪物游戏也能够顺利完成，今年就会有两部新作推出了！！！</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> 游戏素材 </tag>
            
            <tag> 像素画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（END）</title>
      <link href="2021/05/30/monster-game-10/"/>
      <url>2021/05/30/monster-game-10/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>真的完结啦！！！</p><p>演示地址：<a href="https://www.bilibili.com/video/BV1Bf4y1h7RE/">前往B站观看</a></p><p>下载地址：<a href="https://pan.baidu.com/s/1lYDppNY_xTawMjX2H5rCkQ">百度网盘</a></p><p>提取码：gq8c</p><h2 id="场景搭建"><a href="#场景搭建" class="headerlink" title="场景搭建"></a>场景搭建</h2><h3 id="基本场景"><a href="#基本场景" class="headerlink" title="基本场景"></a>基本场景</h3><p>导入场景素材，然后搭建游戏基础场景。</p><p><img src="https://files.catbox.moe/faph6j.jpg" alt="游戏场景"></p><h3 id="场景滚动"><a href="#场景滚动" class="headerlink" title="场景滚动"></a>场景滚动</h3><p>玩家向前奔跑时，当玩家跑到屏幕的中线位置，背景就会开始跟随滚动。</p><h3 id="多重卷轴"><a href="#多重卷轴" class="headerlink" title="多重卷轴"></a>多重卷轴</h3><p>多重卷轴的原理是利用多个背景层移动速度不一致让玩家存在视觉的偏差。</p><p>使用多重卷轴可以让背景更有立体感。</p><h3 id="场景限制"><a href="#场景限制" class="headerlink" title="场景限制"></a>场景限制</h3><p>跑到极限位置时，背景不再滚动，并且玩家无法继续向前。</p><p>而玩家跑到屏幕左侧时，也无法往回跑。</p><h3 id="视野跟随"><a href="#视野跟随" class="headerlink" title="视野跟随"></a>视野跟随</h3><p>场景中的摄像机默认是静止的，当玩家向前走时，摄像机应该也跟着走。</p><p>这样才能让主角一直保持在视野里。</p><p>摄像机的移动是有规律的。</p><p>当玩家没有超过屏幕水平中线位置时摄像机不会移动，这样可以让玩家不会超过屏幕中线的位置。</p><p>距离屏幕右侧有一段比较大的安全距离，可以让玩家有足够的判断时间躲避袭来的敌人或者子弹。</p><h4 id="技术问题"><a href="#技术问题" class="headerlink" title="技术问题"></a>技术问题</h4><p>实际上视野跟随实现起来很简单，但是因为我一开始设计失误，把所有的图片都当做 UI 了。</p><p>UI 无法跟随摄像机移动，但是可以解决图片缩放问题。</p><p>所以制作的过程快了很多，不过现在要让视野跟随玩家移动就比较麻烦了。</p><h4 id="摄像机跟随"><a href="#摄像机跟随" class="headerlink" title="摄像机跟随"></a>摄像机跟随</h4><p>虽然无法通过平移摄像机的方式来改变视野，但是反过来可以让 UI 移动，让视野中心一直处于摄像机中间。</p><p>只不过这样移动是把整个游戏的场景进行平移，在性能上远不如移动摄像机。</p><p>所幸小游戏只有一关而且流程不长，所以可以通过这种方法实现视野跟随。</p><p><img src="https://files.catbox.moe/0hi1bp.jpg" alt="游戏场景"></p><p>玩家控制的角色永远都在红色方块的区域，而玩家移动时，背景也跟着相对移动。</p><p>所以视觉上就会变成玩家在向前奔跑的效果。（请回顾高中物理：相对运动）</p><p><img src="https://i.loli.net/2021/05/21/qtQVvwECgB4esiz.jpg" alt="QQ20210521-175501.jpg"></p><p>总的关卡场景由 4 个屏幕组成，最终要留一个屏幕的距离，每一个屏幕的宽度为 1280 像素。</p><p>背景滚动示意图：</p><p><img src="https://i.loli.net/2021/05/21/4K9nYTcLtjJhHyB.jpg" alt="QQ20210521-181226.jpg"></p><h3 id="阻挡玩家前进-后退"><a href="#阻挡玩家前进-后退" class="headerlink" title="阻挡玩家前进/后退"></a>阻挡玩家前进/后退</h3><p>为了避免玩家可以回头或者继续向前走离开屏幕范围，在场景看不见的位置设置两道“空气墙”（白色区域）阻挡玩家行走。</p><p><img src="https://i.loli.net/2021/05/21/ThyaOvPnemfR5AN.jpg" alt="QQ20210521-175947.jpg"></p><p>玩家走到左侧边缘或者右侧边缘的时候，就会被空气墙挡住了。</p><h2 id="销毁物体-敌人-子弹"><a href="#销毁物体-敌人-子弹" class="headerlink" title="销毁物体/敌人/子弹"></a>销毁物体/敌人/子弹</h2><p>由于游戏场景的道具、敌人、子弹会占用内存并且还会处于一直计算的状态（占用 CPU）。</p><p>对于飞出屏幕之外的子弹以及离开屏幕的道具、敌人应该将其销毁，从而释放内存。</p><p><img src="https://i.loli.net/2021/05/21/NeTI1Wa5poL29tU.jpg" alt="QQ20210521-182310.jpg"></p><p>当前场景中有一个看不见的检测区域，当游戏中的物体进入/离开时，就会触发碰撞监听。</p><p>当物体进入的时候，触发激活状态；当物体离开的时候就销毁。</p><p>激活状态对敌人的设定非常有用，只有敌人进入玩家视野的时候才让敌人开始行动，否则就是静止状态。</p><h2 id="关卡设计"><a href="#关卡设计" class="headerlink" title="关卡设计"></a>关卡设计</h2><p>在玩别人制作的游戏时，总觉得玩起来没有违和感。</p><p>但如果自己来设计关卡的话，总觉得各种怪怪的。</p><p>因为只有一关，所以关卡就设计的比较简单，跑图然后进入 BOSS 战，结束。</p><blockquote><p>小插曲：unity 中的 transform.position 获取的是世界坐标，而 transform.localPosition 才是相对于父节点的坐标，如果直接用世界坐标会出现敌人跟着场景运动（即运动的叠加，例如一个人站在高速行驶的火车上向前跑或者回头跑）所以应该只在相对于父节点的位置进行运动</p></blockquote><h3 id="激活敌人"><a href="#激活敌人" class="headerlink" title="激活敌人"></a>激活敌人</h3><p>场景中的敌人在进入视野前不应该能够自由移动。</p><p>也就是说，默认情况下应该让敌人处于“静止”状态，只有进入玩家的视野才“激活”它们。</p><p>做法十分简单，原理与让子弹消失一样。</p><p><img src="https://files.catbox.moe/kpsunj.jpg" alt="区域检测器"></p><p>区域检测器不仅可以用来让离开区域的子弹消失，同样可以检测进入区域的怪物。</p><p>只要怪物进入区域就自动触发激活状态的回调即可。</p><p>屏幕外的敌人处于不动的状态，进入区域之后才变为激活。</p><p>不仅可以节约 CPU 的开销，也可以避免敌人乱蹦乱跳打乱关卡节奏。</p><p>因为是全局的设置，所以最开始抽取的 <code>MiniGame_Enemy</code> 作为敌人的父类方法就可以直接“一键修改”了。</p><p>这就是抽取出父类的好处，后面加入新功能可以节约很多时间。</p><h3 id="教学关卡"><a href="#教学关卡" class="headerlink" title="教学关卡"></a>教学关卡</h3><p>游戏开始时，前面有一小段“教学关卡”。</p><p><img src="https://i.loli.net/2021/05/14/uQUzMJshAFcOERb.jpg" alt="QQ20210514-190224.jpg"></p><p>因为以前的 FC 游戏都是手柄操作的，所以不需要提示按键。</p><p>玩家可以靠自己尝试了解到每一个键的作用。</p><p>为了让玩家知道基本操作，这是游戏中仅有的一次提示。</p><p>前方设置三个樱桃，即使玩家想要跳过也一定会碰到。</p><p>让玩家知道吃到这个东西可以加分。</p><p>接下来右方有一根水管限制玩家继续移动，玩家需要跳过水管或者站在水管上面。</p><p>接着刚好会飘来一只幽灵，让玩家第一次接触战斗。</p><p>教学关键这样就结束了。</p><p>（这个水管的形状以及放置的位置就是致敬以前玩的马里奥 FC 游戏，毕竟 FC 游戏是我们的启蒙）</p><h2 id="BOSS-及关卡流程"><a href="#BOSS-及关卡流程" class="headerlink" title="BOSS 及关卡流程"></a>BOSS 及关卡流程</h2><p>此处省略一万个字……</p><p>本来是打算边写制作过程记录下来的，结果是边修 BUG，边测试……</p><p>因为最开始设计失误导致全部游戏对象都采用了 UI，接着为了让摄像机跟随就要挪动整个游戏场景；</p><p>挪动整个游戏场景意味着地图上的怪物也会跟着挪动，因此需要重新修改怪物的行动方式……</p><p>“将错就错”反而需要花费更多的时间来弥补前面的失误，重新修改的过程心态都快爆炸了。</p><p>如同网上的段子一样，修好了一个 BUG，就会出现另一个新的 BUG，所以那天一整个下午都沉浸在修 BUG 的恐惧。</p><p>所幸还是坚持改完了，剩下一些操作体验的问题以后有时间再修改。</p><blockquote><p>“以后再改”的潜台词就是“不打算改了”——兔(ge)子(zi)语录</p></blockquote><h2 id="游戏剧情"><a href="#游戏剧情" class="headerlink" title="游戏剧情"></a>游戏剧情</h2><p>为了弥补原来没有设剧情的遗憾，重置版增加了结局。</p><p>（实际上跟哑剧差不多）</p><p>玩家操控女主角将布偶 BOSS 打出真身，然后返回城里。</p><p>返途中，场景出现的怪物会为布偶“送别”，直到快要靠近城里的时候依依不舍的离开。</p><p>最后，女主角将布偶交还给小女孩，剧情结束。</p><p>另外本结局将解锁 CG 一枚。</p><h2 id="素材问题"><a href="#素材问题" class="headerlink" title="素材问题"></a>素材问题</h2><p>由于我们两个人都没有制作音乐的能力，所以我们决定直接使用公开版权的音乐素材。</p><p>游戏是 FC 时代的风格，因此采用 8-Bit 的背景音乐。</p><p>最终选择的是魔王の魂提供的免费版权的素材。</p><p>魔王の魂：<a href="https://maou.audio/">https://maou.audio/</a></p><p>在小游戏最后场景将以滚动文字的方式注明版权出处。</p><h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><p>最终完成版：<a href="https://www.bilibili.com/video/BV1Bf4y1h7RE/">https://www.bilibili.com/video/BV1Bf4y1h7RE/</a></p><p>(已投稿至 B 站)</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>中间断更了几天（在摸鱼）</p><p>在闲鱼淘了一个二手的 3DSLL，用来纪念当初逝去的青春~~~</p><p>这几天又沉迷在宝可梦大探险，虽然游戏很坑，但是抵挡不住对宝可梦的热情，结果还是沦陷了，ε=(´ο｀*)))唉！</p><p>网易游戏一直都在挑战我的忍耐力，看看这个宝可梦游戏我能坚持多久。</p><p>但我发誓以后再也不玩网易的游戏了。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（EX）</title>
      <link href="2021/05/12/monster-game-9/"/>
      <url>2021/05/12/monster-game-9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前篇完成了敌人设计，最后只差 BOSS 了。</p><p>本篇应该能做完了，应该……</p><h2 id="布偶怪（BOSS）"><a href="#布偶怪（BOSS）" class="headerlink" title="布偶怪（BOSS）"></a>布偶怪（BOSS）</h2><p>这是一只被丢弃布偶。</p><p>它的胸前系着巨大的蝴蝶结，看上去并不像玩偶本身的装饰物，而是主人给它戴上的。</p><p>一边的耳朵似乎曾经坏掉过，但被什么人用丝线缝补过。</p><p>给它戴上可爱的蝴蝶结，又修补了破掉的耳朵……</p><p>它的主人应该是十分疼爱它的，但为何它却出现在荒郊野外的垃圾堆里……</p><p>不知是什么原因让它具有了意识，成为了布偶型的魔物。</p><p>是主人丢弃了它？或者是遭遇了什么变故？</p><p>它似乎在等着什么，游荡在附近不肯离开。</p><p>也许，是仍在期待着见到主人一面……</p><p><img src="https://z3.ax1x.com/2021/05/09/gJyNfP.gif" alt="布偶怪"></p><h3 id="行动模式"><a href="#行动模式" class="headerlink" title="行动模式"></a>行动模式</h3><p>BOSS 一共有三个阶段。</p><p>血量被消除到一定程度的时候，将会转换行动模式，不同模式挑战难度由易到难。</p><h4 id="基础设定"><a href="#基础设定" class="headerlink" title="基础设定"></a>基础设定</h4><p>BOSS 始终漂浮在玩家上方的位置，需要玩家跳跃起来才能打得到。</p><p><a href="https://imgtu.com/i/gJgjXT"><img src="https://z3.ax1x.com/2021/05/09/gJgjXT.gif" alt="漂浮的布偶"></a></p><p>如此设计的目的是避免玩家站在地上“无脑”输出，导致毫无挑战性。</p><p>当玩家跳起来的时候，在空中的阶段虽然可以通过方向键改变运动位置，但却没有在地面上灵活。</p><p>跳跃本身就是一个危险的动作，在空中躲避子弹的难度比地面上高得多。</p><p>让玩家不能在舒适区输出，以此增加危机感。 </p><p>太频繁的让玩家进行跳跃也会造成操作性的乏味。</p><p>所以 BOSS 的血量并不会很多，而且除了第一阶段之外也不会经常在低空位置漂浮。</p><p>大多数情况，玩家需要做的就是在地面上躲避 BOSS 的弹幕攻击，然后等 BOSS 飘下来的时候打它。</p><h4 id="技能：隐遁"><a href="#技能：隐遁" class="headerlink" title="技能：隐遁"></a>技能：隐遁</h4><p>潜入黑暗，悄无声息的出现在奇妙的位置。</p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/a0dc8f065c5b6372.gif" alt="技能：隐遁"></p><p>隐遁是 BOSS 经常使用的技能，因此它的位置飘忽不定。</p><p>玩家需要时刻打起精神避免它“突然”出现在身后。</p><h4 id="技能：黑暗能量弹"><a href="#技能：黑暗能量弹" class="headerlink" title="技能：黑暗能量弹"></a>技能：黑暗能量弹</h4><p>从布偶的口中吐出黑暗能量攻击玩家。</p><p><img src="https://files.catbox.moe/xwcx8y.gif" alt="黑暗能量弹"></p><h4 id="平静布偶"><a href="#平静布偶" class="headerlink" title="平静布偶"></a>平静布偶</h4><p>此状态下的布偶，性格温顺，只会缓缓的在场景中低空漂浮，同时发射少量的子弹试探性的攻击。</p><p>这个阶段的 BOSS 仅仅只是做出一些“吓人”的举动，以此来观察玩家的反应。</p><p><img src="https://files.catbox.moe/qqcy6f.gif" alt="平静模式攻击方式"></p><p>布偶怪会向前“逼近”玩家，但是却又在快要靠近极限边缘的时候使用“隐遁”消失在黑暗中。</p><p>然后出现在上方的位置，悠闲的飘到另一边，途中释放 3 次黑暗能量弹攻击玩家，接着又消失在黑暗。</p><p>小插曲：</p><p>控制 BOSS 的行动方式还没找到一个简单有效的方法，只能硬撸。</p><p>结果就是整整一个下午加上忙到晚上 9 点才把这个功能实现出来。</p><p>最后贴上 BOSS 行动轨迹的代码图，简直令人绝望的嵌套地狱：</p><p><img src="https://files.catbox.moe/8ix6fi.jpg" alt="平静布偶行动逻辑代码（部分）"></p><p>这还是我重写了三次，用三种不同方法最后实现的结果（前面两种方法更糟）。</p><p>尽管代码很潦草，但功能本身是没问题的，玩家层面感知不到。</p><p>因为我不懂得使用状态机的缘故，为了赶进度只好暂时妥协了，等忙完了就好好学习。</p><h4 id="狂暴布偶"><a href="#狂暴布偶" class="headerlink" title="狂暴布偶"></a>狂暴布偶</h4><p>布偶被激怒而进入狂暴状态，它会遁入黑暗，然后从高处猛冲向玩家。</p><p><img src="https://files.catbox.moe/m4u3g4.gif" alt="高速猛冲"></p><p>随后，召唤出许多幽灵向玩家袭来。</p><p><img src="https://files.catbox.moe/pzpk3b.gif" alt="幽灵召唤"></p><p>进入第二阶段以后，难度直线上升。</p><p>BOSS 的行动将会锁定玩家的位置，然后以极快的速度向玩家袭来，躲避难度极高。</p><p>第二阶段十分考验玩家的反应速度。</p><h4 id="疯狂布偶"><a href="#疯狂布偶" class="headerlink" title="疯狂布偶"></a>疯狂布偶</h4><p>濒死状态的布偶垂死反击！</p><p>召唤附近生物“大游行”！</p><p><img src="https://files.catbox.moe/4tnx60.jpg" alt="异常生物大游行(静态示意图)"></p><p>BOSS 停留在原地不断召唤出球球怪和幽灵来攻击玩家。</p><p>第三阶段的难度直线上升，虽然 BOSS 此时会停在边缘位置，但是玩家需要躲避袭来的魔物。</p><p>在躲避的同时一边发射子弹攻击 BOSS，空中还会有幽灵的“空袭”威胁。</p><h4 id="形态转换"><a href="#形态转换" class="headerlink" title="形态转换"></a>形态转换</h4><p>BOSS 的三个阶段完成了，但还缺少逻辑判断什么时候该进行下一个阶段。</p><p>只要在 BOSS 受伤的时候判断当前血量即可，分别在：66%、33% 的时候自动进入下一个阶段。</p><h2 id="BOSS-血条"><a href="#BOSS-血条" class="headerlink" title="BOSS 血条"></a>BOSS 血条</h2><p>怪物的血条 UI 制作比较简单。</p><p>在屏幕下方创建一个水平的滑动条即可。</p><p><img src="https://files.catbox.moe/ztybtb.jpg" alt="血条UI"></p><p>实现血条的逻辑有两种方案。</p><p>第一种是被动式的，将怪物和血条绑定，在怪物受到伤害的时候血条也会减少。</p><p>第二种是主动式的，血条实时获取怪物的血量，根据血量改变血条的值。</p><p>第一种比较节省 CPU，第二种普适性比较高。</p><p>因为小游戏的性能没压力，所以就选第二种作为实现方案。</p><p>还有一个需要注意的地方是之前把血量转成 int（整数）类型，可是血条的值是浮点数。</p><p>所以在计算的时候，需要进行转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    slider.value &#x3D; (float)monster.currentHP &#x2F; monster.maxHP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>血条的 Update 方法这样就可以了。</p><p>然后进入游戏测试：</p><p><img src="https://files.catbox.moe/vlv8x8.gif" alt="血条测试"></p><p>BOSS 的血条处理也完成了！</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>EX 篇整整写了三天半才完成。</p><p>除了设计 BOSS 的时候找灵感花了一点时间，还有制作效率也降低了不少。</p><p>可能是跟最近天气变热有关，气温上升了很多，下午的时候会有点迷迷糊糊。</p><p>（舍不得开空调……）</p><p>还有一方面是连续集中精神做一件事很容易出现精神疲劳。</p><p>中间还是得找一些别的事情分散精力，让大脑稍微休息一下。</p><p>总的来说，最后的怪物 BOSS 终于完成了，下一篇 END（终结）篇，将会迎来小游戏的完结（应该）。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（八）</title>
      <link href="2021/05/08/monster-game-8/"/>
      <url>2021/05/08/monster-game-8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小游戏终篇，完成最后的敌人设计和关卡设计，以及各种音效处理。</p><p>为了加快写作速度，后面真的不贴代码了。</p><h2 id="敌人系统"><a href="#敌人系统" class="headerlink" title="敌人系统"></a>敌人系统</h2><p>接前前篇，已经完成了部分敌人的动画和幽灵的行动轨迹。</p><h3 id="敌人受伤"><a href="#敌人受伤" class="headerlink" title="敌人受伤"></a>敌人受伤</h3><p>敌人没有受伤动画，而且也没有无敌时间。</p><p>只要计算伤害扣除当前血量，再判断是否归零，就执行死亡回调。</p><p><img src="https://files.catbox.moe/9rs1ht.gif" alt="子弹的物理碰撞"></p><p>这里存在一个很严重的问题，因为子弹添加了刚体，就会与敌人身上的刚体发生碰撞。</p><p>所以子弹击中敌人就会出现上图这样的效果，因为子弹脚本一直在给子弹施加一个前进的力，所以子弹会一直向前飞。</p><p>敌人身上又设置了弹性材质，把子弹弹开，子弹又继续向前，又被弹开……如此反复，变成抖动效果。</p><p>既要使用刚体组件，又不想用它的物理碰撞效果，看起来有点自相矛盾。</p><h3 id="刚体类型"><a href="#刚体类型" class="headerlink" title="刚体类型"></a>刚体类型</h3><p>这个问题困扰了我一段时间，然后查阅手册以及看了一些教程才弄清楚了刚体组件的“妙用”。</p><p><img src="https://files.catbox.moe/d7k0cd.jpg" alt="Body Type"></p><p>刚体组件有三种类型可以设置：</p><ul><li>Dynamic（动力学的）</li><li>Kinematic（运动学的）</li><li>Static（静态的）</li></ul><p>趁这个机会详细搜寻了相关的资料，恶补一下 unity 的知识。</p><h4 id="Dynamic（动力学的）"><a href="#Dynamic（动力学的）" class="headerlink" title="Dynamic（动力学的）"></a>Dynamic（动力学的）</h4><p>贴个官方手册的说明：</p><p><img src="https://files.catbox.moe/uigfio.jpg" alt="Dynamic类型说明"></p><p>简单地说如果一个物体要符合物理特性，可以受到外力的作用，就用此类型。</p><p>如果将物体设置为此类型，那么它应该是受到外力的驱动而发生移动，不应该直接用 transform 来修改坐标。</p><p>此类型对于 CPU 的消耗是极高的，因为它要计算各种物理效果。</p><p>Dynamic 类型的特性大致就是这样，在 FC 小游戏中，把主角设置成这个类型就可以了。</p><p>正如其名“动力学”即通过外力来驱动。</p><h4 id="Kinematic（运动学的）"><a href="#Kinematic（运动学的）" class="headerlink" title="Kinematic（运动学的）"></a>Kinematic（运动学的）</h4><p>Kinematic 类型的刚体，不会受到重力以及其他外力的影响。</p><p>虽然不能受到外力的驱动而移动，但是刚体可以直接赋予速度，例如前文控制主角移动的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br></pre></td></tr></table></figure><p>给与刚体一个水平方向的力，就可以驱动刚体朝着水平方向移动。</p><p>所以这种类型才是我想要的：不会受到外力影响。</p><p>正如其名“运动学”即通过改变速度来驱动。</p><h4 id="Static（静态的）"><a href="#Static（静态的）" class="headerlink" title="Static（静态的）"></a>Static（静态的）</h4><p>静态的比较好理解，就是风雨不动安如山。</p><p>既无法通过外力“撼动”它，亦无法赋予刚体速度来移动它。</p><p>不管你推它、撞它，它都在那里。</p><h3 id="解决子弹卡住问题"><a href="#解决子弹卡住问题" class="headerlink" title="解决子弹卡住问题"></a>解决子弹卡住问题</h3><p>将子弹类型设置为 <code>Kinematic</code>。</p><p><img src="https://files.catbox.moe/vzd7xs.gif" alt="运动学不发生碰撞"></p><p>默认情况下，Kinematic 类型只与 Dynamic 类型的刚体发生碰撞。</p><p>如果要检测与其他类型的碰撞，需要勾选 <code>Use Full Kinematic Contacts</code>：</p><p><img src="https://files.catbox.moe/3w1dbk.jpg" alt="完全碰撞检测设置"></p><p>不过这里并不希望子弹发生物理碰撞效果。</p><p>只需要把子弹的碰撞体改成 <code>Trigger</code>（触发器），然后监听触发器事件即可。</p><h3 id="敌人消失动画"><a href="#敌人消失动画" class="headerlink" title="敌人消失动画"></a>敌人消失动画</h3><p>敌人死亡时，会停止移动，然后原地淡出消失。</p><p><img src="https://files.catbox.moe/cte3md.gif" alt="敌人消失"></p><h3 id="掉落物"><a href="#掉落物" class="headerlink" title="掉落物"></a>掉落物</h3><p>敌人完全消失后，会在原地爆出道具。</p><p><img src="https://files.catbox.moe/8ynq6c.gif" alt="消灭敌人爆金币"></p><p>吃到道具加上分数提示效果。</p><p><img src="https://files.catbox.moe/mxq0hk.gif" alt="分数提示"></p><h3 id="子弹击中特效"><a href="#子弹击中特效" class="headerlink" title="子弹击中特效"></a>子弹击中特效</h3><p>子弹击中敌人时，应该把子弹消除，而不是让子弹还能继续穿透。</p><p>制作子弹击中的特效动画。</p><p><img src="https://files.catbox.moe/xn83qe.gif" alt="子弹击中动画"></p><p>把这个做成预制体，当子弹击中目标的时候就生成这个动画特效，然后把子弹消除。</p><p><img src="https://files.catbox.moe/70zsr7.gif" alt="击中特效"></p><p>击中特效在动画播放结束后也会自动销毁。</p><p>敌人受伤事件这样就完成了。</p><h2 id="怪物设计"><a href="#怪物设计" class="headerlink" title="怪物设计"></a>怪物设计</h2><p>幽灵的行动轨迹比较简单，但是后面的这几个就比较复杂了。</p><h3 id="垃圾桶怪"><a href="#垃圾桶怪" class="headerlink" title="垃圾桶怪"></a>垃圾桶怪</h3><p>垃圾桶怪前方一小片区域是“侦查区”，如果玩家靠近这个区域，自己的“领地”被入侵了，它就会发怒驱逐入侵者。</p><p>玩家没有踏进领地，但是在远处用子弹“骚扰攻击”，也会令垃圾桶怪变得愤怒，原因是“吵到”它休息了！</p><p>愤怒的垃圾桶怪会向前“狂奔”，如果玩家被碰到了就会受到 1 点伤害。</p><p>而且因为有“垃圾桶”的防护，它的防御力比起其他生物要高得多，想要打败它可不容易。</p><p>如果不小心激怒了它，最好的方法就是找个机会从它身上跳过。</p><h4 id="踏入警戒区"><a href="#踏入警戒区" class="headerlink" title="踏入警戒区"></a>踏入警戒区</h4><p>踏入垃圾桶怪的警戒区时，这个距离非常危险。</p><p>垃圾桶怪会现出“原形”吓退入侵者，原本可爱的外表也会变得十分可怕。</p><p><img src="https://files.catbox.moe/m6k160.gif" alt="踏入警戒区"></p><h4 id="骚扰攻击"><a href="#骚扰攻击" class="headerlink" title="骚扰攻击"></a>骚扰攻击</h4><p>玩家使用子弹攻击多次后，垃圾桶怪也会因为被骚扰而变得烦躁愤怒。</p><p>如果本体还未出现，玩家的子弹会打在垃圾桶上，这是不会对本体造成伤害的。</p><p>可以从子弹的攻击特效看出来，在还没露出本体的时候，子弹直接消失了，而本体出现之后，子弹击中会产生特效。</p><p>除此之外，还会加入一个打中铁桶的音效。</p><p>这样设计之后，即使不告诉玩家垃圾桶怪是无敌的，玩家自然也能根据细节判断出来了。</p><blockquote><p>当一个怪物不可战胜的时候，应该让玩家从细微之处发觉不对劲，而不是故意让玩家去挑战一个无法战胜的敌人白费时间。</p></blockquote><p>演示效果：</p><p><img src="https://files.catbox.moe/8259wh.gif" alt="攻击骚扰"></p><h4 id="愤怒追击"><a href="#愤怒追击" class="headerlink" title="愤怒追击"></a>愤怒追击</h4><p>现在它还只是傻傻的在原地挨打，是时候给它增加一些对玩家的威胁了。</p><p>在整个 FC 小游戏中，它是第二危险的魔物！</p><p>垃圾桶怪在进入愤怒状态的时候，会朝着玩家“飞扑”过来。</p><p><img src="https://files.catbox.moe/gmlkn9.gif" alt="受到骚扰的愤怒追击"></p><p><img src="https://files.catbox.moe/dzu46x.gif" alt="进入警戒区域的追击"></p><h4 id="挑战失败案例"><a href="#挑战失败案例" class="headerlink" title="挑战失败案例"></a>挑战失败案例</h4><p>试图强行跳过的玩家很容易被“三连击”。</p><p><img src="https://files.catbox.moe/pi2b6m.gif" alt="三连带走"></p><h4 id="强行击破案例"><a href="#强行击破案例" class="headerlink" title="强行击破案例"></a>强行击破案例</h4><p>强行“站撸”在垃圾桶靠近之前消灭它！</p><p><img src="https://files.catbox.moe/t765u3.gif" alt="强行站撸"></p><p>虽然最终消灭了垃圾桶怪，但还是被带走一颗心。</p><p>比起直接踏入警戒区，用子弹骚扰会让它更加愤怒！</p><p>所以千万不要这么做……</p><h4 id="正确挑战示例"><a href="#正确挑战示例" class="headerlink" title="正确挑战示例"></a>正确挑战示例</h4><p>实际上只要找准位置，可以轻松的从它的头上跃过。</p><p><img src="https://files.catbox.moe/keoplh.gif" alt="正确跳过垃圾桶怪"></p><h3 id="球球怪"><a href="#球球怪" class="headerlink" title="球球怪"></a>球球怪</h3><p>球球怪是在地面巡逻的敌人。</p><p>它会在地面弹跳巡逻指定的区域，不会主动攻击玩家。</p><h4 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h4><p>在地面弹起动画。</p><p><img src="https://files.catbox.moe/9x9zye.gif" alt="球球怪"></p><h4 id="巡逻逻辑"><a href="#巡逻逻辑" class="headerlink" title="巡逻逻辑"></a>巡逻逻辑</h4><p>因为不是用刚体实现跳跃，花了好长时间……</p><p>不过总算是完成了。</p><p><img src="https://files.catbox.moe/etqlek.gif" alt="跳跃巡逻球球怪"></p><h3 id="自爆怪"><a href="#自爆怪" class="headerlink" title="自爆怪"></a>自爆怪</h3><p>自爆怪是头顶上有着竹蜻蜓的球状炸弹型敌人。</p><p>最开始的时候，并不是将这只怪物设计成投弹自爆的。</p><p>而是想做一个类似“苍蝇”一样很小只的敌人，在 BOSS 的第二阶段，BOSS 使用召唤技能就会招来一群这样的敌人。</p><p>然后这群“苍蝇”会排的整整齐齐飞向玩家（肉搏冲击！）</p><p>它本身并不会发射子弹，仅仅只是用身体撞击玩家造成伤害。</p><p>脑补出它们成群阶段，转着圈圈，摆出各种阵势的样子（类似大雁成群结队飞行，摆出各种阵型）感觉会很有趣。</p><p>但是要实现起来就比较复杂了，要设计好各种阵型的坐标……</p><p>然后就弃坑了。</p><p>弃坑之后，反而激发了另一种灵感：</p><p>既然是飞行，像多啦A梦那样在头上带着竹蜻蜓感觉也是挺有趣的。</p><p>因为本体太重了，竹蜻蜓脱落，并且飞走了！</p><p>它本体并不会飞，所以就自由落体运动掉了下来。</p><p>掉到地上砸到玩家？感觉也不错，但是为何不像飞机投下导弹那样？</p><p>伴随着咻咻的音效（空袭警报）让玩家产生紧张感。</p><p>所以头顶竹蜻蜓的自爆怪就这么设计出来了。</p><h4 id="动态效果"><a href="#动态效果" class="headerlink" title="动态效果"></a>动态效果</h4><p><img src="https://files.catbox.moe/omynqq.gif" alt="自爆怪"></p><p>它会在天上飞行，然后从竹蜻蜓脱落，掉到地上产生爆炸。</p><p>因为体型很小，如果玩家没有注意观察的话很容易中招。</p><h4 id="爆炸动画"><a href="#爆炸动画" class="headerlink" title="爆炸动画"></a>爆炸动画</h4><p>自爆怪掉到地上或者在空中被玩家击中就会产生爆炸。</p><p><img src="https://files.catbox.moe/yk2m92.gif" alt="爆炸动画"></p><h4 id="竹蜻蜓"><a href="#竹蜻蜓" class="headerlink" title="竹蜻蜓"></a>竹蜻蜓</h4><p>竹蜻蜓会与本体分离，独自飞出去，最后消失在天空。</p><p><img src="https://files.catbox.moe/079ac4.gif" alt="竹蜻蜓脱离动画"></p><h4 id="炸弹本体"><a href="#炸弹本体" class="headerlink" title="炸弹本体"></a>炸弹本体</h4><p>当竹蜻蜓脱离后，本体就不能再继续飞行了，而会掉落到地上。</p><p>本体（炸弹）会因为惯性继续向前运动，直到落到地上或者被玩家击中爆炸。</p><p><img src="https://files.catbox.moe/uixqy3.gif" alt="运动轨迹"></p><h4 id="爆炸攻击"><a href="#爆炸攻击" class="headerlink" title="爆炸攻击"></a>爆炸攻击</h4><p>掉落的本体要与角色或者地面碰撞，然后发生爆炸。</p><p><img src="https://files.catbox.moe/5h8d0t.gif" alt="碰到地板爆炸"></p><p>一起去看流星雨，落在主角的头上。</p><p><img src="https://files.catbox.moe/gqne8z.gif" alt="碰到玩家"></p><p>高难度操作，在对方还没落地成盒之前打爆它！</p><p><img src="https://files.catbox.moe/p82413.gif" alt="截胡射击"></p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>虽然今天又是爆肝一整天，但还是做不完啊！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（七）</title>
      <link href="2021/05/07/monster-game-7/"/>
      <url>2021/05/07/monster-game-7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇完成角色系统和道具系统。</p><p>小游戏的制作也接近尾声了。</p><h2 id="玩家受伤"><a href="#玩家受伤" class="headerlink" title="玩家受伤"></a>玩家受伤</h2><p>主角受到的伤害来自两种，第一是被敌人发射的子弹击中，第二是碰到敌人。</p><p>而敌人受伤只来源于玩家的攻击，主角碰到敌人只有主角会受到伤害，敌人不会受伤。</p><p>给子弹加上 Bullet 的 Tag（标签），给敌人加上 Enemy 标签。</p><p>之后就可以在碰撞回调中通过标签区分碰撞对象。</p><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>首先需要知道碰到玩家的物体是什么，可以用上面说的标签来区分。</p><p>如果是碰到道具则应该获得加分或加血，如果是敌人和子弹才会受到伤害。</p><p>编辑 <code>MiniGame_Player</code> 脚本，添加碰撞监听事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private void OnCollisionEnter2D(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line">    string tag &#x3D; collision.gameObject.tag;</span><br><span class="line"></span><br><span class="line">    switch (tag)</span><br><span class="line">    &#123;</span><br><span class="line">        case &quot;Enemy&quot;:</span><br><span class="line">            TouchEnemy(collision);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;Item&quot;:</span><br><span class="line">            TouchItem(collision);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;Bullet&quot;:</span><br><span class="line">            TouchBullet(collision);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void TouchEnemy(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void TouchItem(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void TouchBullet(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的碰撞事件是两个刚体之间的碰撞，因此需要使用 <code>OnCollisionEnter2D</code> 监听。</p><p>其实这里有两种设计方案，①在角色身上监听碰撞事件 ②在道具上监听碰撞事件</p><p>一般来说在“被动”的一方身上绑定监听事件比较符合常规思想。</p><p>比如道具“被”主角吃，那么就在道具上处理吃到道具的效果；</p><p>再比如主角“被”敌人的子弹击中，那么就在主角身上处理受伤事件。</p><p>所以这里的 <code>TouchItem</code> 有点多余，以后可能会移除。</p><p>此处设置角色与 3 种类型的物体发生碰撞的处理，即敌人、道具、子弹。</p><p>具体的方法留空，接下来逐一进行实现。</p><h3 id="受伤-死亡动画"><a href="#受伤-死亡动画" class="headerlink" title="受伤/死亡动画"></a>受伤/死亡动画</h3><p>增加受伤和死亡动画的状态机。</p><p>任意状态都可以直接进入受伤状态，而当受伤判定为死亡时，进入死亡动画。</p><p><img src="https://files.catbox.moe/6xpk7k.jpg" alt="主角的受伤和死亡状态"></p><h3 id="抽离受伤事件"><a href="#抽离受伤事件" class="headerlink" title="抽离受伤事件"></a>抽离受伤事件</h3><p>因为角色受到伤害会进入一个保护状态，要与敌人区分开来。</p><p>因此需要修改之前写的游戏角色基类，将 <code>TakeDamage</code> 方法改成抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract void TakeDamage(float damage);</span><br></pre></td></tr></table></figure><p>接着在 <code>MiniGame_Player</code> 方法里实现受伤处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public override void TakeDamage(float damage)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(&quot;受到伤害：&quot; + damage);</span><br><span class="line"></span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">    Wait(delegate</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, 0.25f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="碰到敌人"><a href="#碰到敌人" class="headerlink" title="碰到敌人"></a>碰到敌人</h3><p>玩家碰到敌人时，显示受伤动画，减少血量，进入场景测试。</p><p><img src="https://files.catbox.moe/3i5m3g.gif" alt="撞到敌人测试"></p><p>发现撞到敌人之后，虽然播放了受伤动画，但是却没有在 0.25s 后解除。</p><p>这是因为受伤动画没有转换成其他动画的设置。</p><h3 id="受伤动画不解除问题"><a href="#受伤动画不解除问题" class="headerlink" title="受伤动画不解除问题"></a>受伤动画不解除问题</h3><p>修改动画状态机，当解除受伤动画时，让主角变成待机状态。</p><p><img src="https://files.catbox.moe/0q2ogj.jpg" alt="受伤动画转换为待机动画"></p><p>然后再进入游戏测试：</p><p><img src="https://files.catbox.moe/8856n6.gif" alt="受伤修改后测试"></p><p>受伤动画不解除的问题解决了，但是可以发现，如果继续停留在原地，角色与敌人依然保持接触状态，却不会再触发受伤事件了。这是因为两个刚体组件发生碰撞时，会出现弹开的情况。</p><h3 id="无敌时间"><a href="#无敌时间" class="headerlink" title="无敌时间"></a>无敌时间</h3><p>当主角受伤的时候会进入短暂的无敌，避免玩家连续碰到敌人还没反应过来就直接 gg 了。</p><p>增加一个变量用来设定角色无敌状态的持续时间，另一个变量保存当前无敌剩余时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public float pretectedTime &#x3D; 1f;</span><br><span class="line">private float currentPretectedTime;</span><br></pre></td></tr></table></figure><p>当玩家受伤时，就赋予无敌时间，持续时间在 Update 方法里减少。</p><p>修改受伤事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void TouchEnemy(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line">    if (currentPretectedTime &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentPretectedTime &#x3D; pretectedTime;</span><br><span class="line"></span><br><span class="line">    TakeDamage(1f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在无敌时间里，再次调用受伤方法就直接返回，否则计算伤害同时赋予玩家无敌时间。</p><p>接着消除无敌时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    ProtectedTime();</span><br><span class="line">    Shoot();</span><br><span class="line">    Move();</span><br><span class="line">    Jump();</span><br><span class="line">    GroundCheck();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ProtectedTime()</span><br><span class="line">&#123;</span><br><span class="line">    if (currentPretectedTime &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        currentPretectedTime -&#x3D; Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>FixedUpdate</code> 方法里计算无敌时间。</p><p>最后进入游戏场景测试：</p><p><img src="https://files.catbox.moe/oa3v53.gif" alt="无敌时间测试"></p><p>主角跟敌人碰撞之后，还是“停在原地”，看起来依然与敌人保持着接触。</p><p>实际上，无敌时间确实生效了，但是玩家跟敌人保持接触却没有受到伤害不是因为无敌时间的关系。</p><p>而是玩家在撞到怪物身上的时候，发生“弹开”的情况。</p><p>只要稍微修改一下碰撞盒子就可以看出效果了：</p><p><img src="https://files.catbox.moe/q4qmhr.gif" alt="碰撞盒子修改测试"></p><p>把敌人的碰撞盒子变大的时候，可以看到主角被“击退”了一步。</p><p>但是这个弹力实际上很小，所以肉眼看不出来。</p><h3 id="击退效果"><a href="#击退效果" class="headerlink" title="击退效果"></a>击退效果</h3><p>修改弹力需要创建一个物理材质：</p><p><img src="https://files.catbox.moe/p9ud5b.jpg" alt="弹性材质"></p><p>然后把材质拖到敌人的碰撞盒子上。</p><p>为了测试弹力效果，先将弹力设置成一个比较大的值：10.</p><p>观察效果：</p><p><img src="https://files.catbox.moe/roegwf.gif" alt="增强弹力效果"></p><p>可以观察到角色撞到敌人之后被弹开了一段较大的距离。</p><p>如果仔细观察的话，还能发现角色又会向前挪动，继续与敌人发生碰撞，然后反复碰撞出现“抖动”的情况。</p><p>原因是角色受伤状态下仍然可以按方向键向前移动，所以又与前方的敌人发生了碰撞。除此之外，由于移动是用 <code>GetAxis</code> 来监听的，即使松开按键也存在一个缓冲的过程，速度并不会直接降低为 0，所以还会保持向前移动一小段距离，又与敌人产生碰撞。</p><p>只要修改移动方法，在无敌时间里禁止角色受到水平方向的力推动玩家就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> private void Move()</span><br><span class="line">&#123;</span><br><span class="line">    if (currentPretectedTime &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    animator.SetFloat(&quot;horizontal&quot;, Mathf.Abs(horizontal));</span><br><span class="line"></span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (horizontal &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果：</p><p><img src="https://files.catbox.moe/e1zyfr.gif" alt="修改之后的弹力效果"></p><p>因为弹力太大所以主角撞到敌人之后直接飞出屏幕外面了~</p><p>把弹力跳到 0.25 重新测试：</p><p><img src="https://files.catbox.moe/n1x4sd.gif" alt="降低弹力的效果"></p><p>可以看到这样好多了，但是主角在受伤之后会进入“小跑动画”。</p><h3 id="小跑动画问题"><a href="#小跑动画问题" class="headerlink" title="小跑动画问题"></a>小跑动画问题</h3><p>这是因为玩家在受伤的时候仍然可以按住水平方向键，因此还会播放奔跑动画。</p><p>在控制角色移动的方法中，修改动画参数就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void Move()</span><br><span class="line">&#123;</span><br><span class="line">    if (currentPretectedTime &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 设置水平参数为0，即不会再播放奔跑动画了</span><br><span class="line">        animator.SetFloat(&quot;horizontal&quot;, 0);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    animator.SetFloat(&quot;horizontal&quot;, Mathf.Abs(horizontal));</span><br><span class="line"></span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (horizontal &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要注意一个问题，这里因为用了 <code>currentPretectedTime</code> 来作为判定时间，就必须让受伤动画的“硬直”时间与无敌时间相同，否则无敌状态还没解除，受伤动画就先解除了，角色就会变成待机状态。</p><p><img src="https://files.catbox.moe/kydjby.gif" alt="受伤动画时间不一致问题"></p><h3 id="动画不一致问题"><a href="#动画不一致问题" class="headerlink" title="动画不一致问题"></a>动画不一致问题</h3><p>修改受伤动画解除事件与无敌时间保持一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public override void TakeDamage(float damage)</span><br><span class="line">&#123;</span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">    Wait(delegate</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, pretectedTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Wait</code> 方法的第二个参数改成无敌时间即可，然后继续测试：</p><p><img src="https://files.catbox.moe/nogqt4.gif" alt="受伤动画优化效果"></p><h3 id="受伤下的操作限制"><a href="#受伤下的操作限制" class="headerlink" title="受伤下的操作限制"></a>受伤下的操作限制</h3><p>但是又有新的问题，受伤的时候还可以跳跃和发射子弹。</p><p><img src="https://files.catbox.moe/cu01km.gif" alt="受伤跳跃和攻击"></p><p>受伤跳跃还可以接受，但是受伤了还能发射子弹就有点离谱。</p><p>修改 <code>Shoot</code> 方法，当角色在无敌状态时，不能发射子弹攻击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void Shoot()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 加上无敌时间判断</span><br><span class="line">    if (currentPretectedTime &lt; 0 &amp;&amp; isShoot)</span><br><span class="line">    &#123;</span><br><span class="line">        isShoot &#x3D; false;</span><br><span class="line">        animator.SetBool(&quot;shoot&quot;, true);</span><br><span class="line"></span><br><span class="line">        GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">        GameObject bulletObj &#x3D; Instantiate(prefab, firePoint);</span><br><span class="line"></span><br><span class="line">        MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">        bullet.attacker &#x3D; this;</span><br><span class="line"></span><br><span class="line">        bulletObj.transform.SetParent(bg);</span><br><span class="line"></span><br><span class="line">        Wait(delegate</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(&quot;shoot&quot;, false);</span><br><span class="line">        &#125;, 0.05f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="https://files.catbox.moe/bb6thw.gif" alt="受伤时限制攻击"></p><p>玩家受伤动作总算完成了（撒花）</p><h2 id="场景UI"><a href="#场景UI" class="headerlink" title="场景UI"></a>场景UI</h2><p>角色受伤虽然减少了 HP，但是现在玩家还看不到具体的生命值还有多少。</p><p>这时候就要开始制作场景的 UI（界面）。</p><p>包括：</p><ul><li>显示剩余生命值</li><li>显示当前得分</li></ul><p>场景 UI 图例：</p><p><img src="https://files.catbox.moe/emgazc.jpg" alt="场景UI"></p><p>左上角显示生命值，右上角显示得分。</p><h3 id="场景控制"><a href="#场景控制" class="headerlink" title="场景控制"></a>场景控制</h3><p>需要一个脚本用来控制整个小游戏的流程。</p><p>如进入游戏、游戏结束、UI 显示。</p><p>新建脚本 <code>MiniGame_Controller</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Controller : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Text scoreText;</span><br><span class="line"></span><br><span class="line">    private int score;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        this.AddScore(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void AddScore(int score)</span><br><span class="line">    &#123;</span><br><span class="line">        this.score +&#x3D; score;</span><br><span class="line">        scoreText.text &#x3D; this.score.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个脚本现在包含了得分显示的方法。</p><p><code>AddScore</code> 方法传入一个分数参数，更新场景中的文本显示数字。</p><p>在游戏对象启动的时候，调用了 <code>this.AddScore(0)</code> 来更新文本。</p><p>脚本挂在小游戏根节点。</p><p><img src="https://files.catbox.moe/7po71z.jpg" alt="控制器脚本"></p><p>小游戏节点的标签更改为：<code>Controller</code></p><p>这样在别的对象中可以直接通过标签来获得场景控制器。</p><h3 id="分数显示"><a href="#分数显示" class="headerlink" title="分数显示"></a>分数显示</h3><p>创建一个 Text 组件，放在右上角的位置即可。</p><p><img src="https://files.catbox.moe/jq4hpc.jpg" alt="分数显示"></p><p>将文本节点拖到控制器的参数上面。</p><p>进入游戏场景测试：</p><p><img src="https://files.catbox.moe/nb28l6.gif" alt="测试分数文本"></p><p>“得分”两字在进入游戏的时候会自动更新为实际的分数值。</p><h3 id="生命值显示"><a href="#生命值显示" class="headerlink" title="生命值显示"></a>生命值显示</h3><p>生命值在界面左上角显示。</p><p><img src="https://files.catbox.moe/zbms1u.jpg" alt="生命值UI结构示意图"></p><p>UI 是由特殊的自动排列 Layout 结构，实现心形血量的自动对齐。</p><p>所以这里需要分成两块制作：① 放置心形血量的 Layout ② 心形血量（单体）</p><p>还有一种做法就是直接“写死”，即固定角色的血量上限是 5 颗心。</p><p>这样不用自动排列结构也不需要单独抽离出单体的心形血量。</p><p>好处是更简单，坏处是不利于扩展，这里就不偷懒了，不然以后还得回头修改。</p><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>创建一个空的对象，然后需要注意的是，这里的 Transfrom 并不是普通的，而是 UI 用的 <code>Rect Transfrom</code>。</p><p>普通的 Transform 示例：</p><p><img src="https://files.catbox.moe/r1w7pd.jpg" alt="普通的transform"></p><p>UI 用的 Rect Transfrom：</p><p><img src="https://files.catbox.moe/rl8131.jpg" alt="UI用的rect transform"></p><p>可以看到 UI 的对象有宽度和高度，而且还有锚域（不是锚点）。</p><p>这个真的是非常难理解的一个要点，刚开始学的时候，卡了一个下午都弄不清楚。</p><p>有一篇写的非常好的文章：<a href="http://www.cocoachina.com/articles/16570">Unity进阶技巧 - RectTransform详解</a></p><p>其实现在我也还没完全搞懂这个锚域的原理……所幸还不需要用到。</p><p>Layout 需要设置一个宽度，相当于是一个容器，用来盛放心形图片（血量）。</p><p>给 Layout 添加 <code>Grid Layout Group</code> 组件：</p><p><img src="https://files.catbox.moe/aqlvth.jpg" alt="容器组件"></p><p>这个组件可以设置单元格的大小，然后按照指定的规则进行自动排列。</p><p>设置好之后，把心形图片拖到 Layout 底下，当做子节点，然后测试效果：</p><p><img src="https://files.catbox.moe/gb1nrx.gif" alt="测试容器效果"></p><p>可以看到每次创建一个新的心形图片的时候，容器自动将其排列，超过容器的宽度时自动换行。</p><p>容器这样就设置好了。</p><h4 id="心形血量"><a href="#心形血量" class="headerlink" title="心形血量"></a>心形血量</h4><p>心形血量包括两种形态：①充满血量 ②空</p><p>创建脚本 <code>MiniGame_Heart</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Heart : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Sprite[] sprites;</span><br><span class="line"></span><br><span class="line">    private Image icon;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        icon &#x3D; GetComponent&lt;Image&gt;();</span><br><span class="line"></span><br><span class="line">        SetActive(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void SetActive(bool result)</span><br><span class="line">    &#123;</span><br><span class="line">        int index &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        if (result &#x3D;&#x3D; true)</span><br><span class="line">        &#123;</span><br><span class="line">            index &#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        icon.sprite &#x3D; sprites[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Sprite[] sprites</code> 是一个精灵数组（即图片），把空的心和填满的心的图片放在这个数组备用。</p><p>这里对外暴露一个 <code>SetActive</code> 用来控制让心变满或变空的方法。</p><p>默认情况下，心是空的。</p><p><img src="https://files.catbox.moe/wzlt1g.jpg" alt="空的心"></p><p>进入游戏测试：</p><p><img src="https://files.catbox.moe/wesj3x.jpg" alt="测试填充心"></p><p>可以发现心已经被填满了，这是因为通过脚本调用 <code>SetActive</code> 方法修改了心的图片。</p><p>心形血量这样就完成了，拖到 <code>Resources/Prefabs/MiniGame</code> 下作为预制体备用。</p><h4 id="血量控制"><a href="#血量控制" class="headerlink" title="血量控制"></a>血量控制</h4><p>心形血量的控制交给 Layout。</p><p>新建 <code>MiniGame_HeartLayout</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_HeartLayout : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private List&lt;MiniGame_Heart&gt; hearts &#x3D; new List&lt;MiniGame_Heart&gt;();</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public MiniGame_Player player;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        player &#x3D; GameObject.FindGameObjectWithTag(&quot;Player&quot;).GetComponent&lt;MiniGame_Player&gt;();</span><br><span class="line"></span><br><span class="line">        Init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void UpdateLast(bool result)</span><br><span class="line">    &#123;</span><br><span class="line">        GetCurrentHeart().SetActive(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private MiniGame_Heart GetCurrentHeart()</span><br><span class="line">    &#123;</span><br><span class="line">        int index &#x3D; player.currentHP - 1;</span><br><span class="line"></span><br><span class="line">        return hearts[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Init()</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; player.maxHP; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateHeart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void CreateHeart()</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;Heart&quot;) as GameObject;</span><br><span class="line">        GameObject heartObj &#x3D; Instantiate(prefab, transform);</span><br><span class="line"></span><br><span class="line">        MiniGame_Heart heart &#x3D; heartObj.GetComponent&lt;MiniGame_Heart&gt;();</span><br><span class="line"></span><br><span class="line">        hearts.Add(heart);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要修改之前的设定，角色的血量原来设定成 float 类型，需要改成 int。</p><p>脚本初始化时自动获取场景的 Player 对象，然后根据玩家的最大血量自动初始化对应的心形血量。</p><p>提供了一个可以控制血量变空和填满的方法：<code>UpdateLast</code>。</p><p>进入游戏测试：</p><p><img src="https://files.catbox.moe/kgpyud.jpg" alt="测试血量容器"></p><p>测试 OK，然后在场景控制器新增一个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public MiniGame_HeartLayout heartLayout;</span><br></pre></td></tr></table></figure><p>将容器赋值给场景控制器，这样在场景控制器里就可以对心形容器进行控制了。</p><h2 id="道具系统"><a href="#道具系统" class="headerlink" title="道具系统"></a>道具系统</h2><p>游戏中存在 4 种道具。</p><ul><li>樱桃：在场景中出现，吃到可以加分</li><li>金币：打败怪物出现，吃到可以加分</li><li>爱心：在场景中出现，吃到可以恢复1点HP</li><li>布偶：打败BOSS爆出，吃到可以加分（在正式篇触发隐藏事件）</li></ul><p>总体来说可以分成两类：①加分 ②加血</p><p>搞清楚之后，就可以开始制作道具了。</p><h3 id="道具基类"><a href="#道具基类" class="headerlink" title="道具基类"></a>道具基类</h3><p>道具存在许多共通点，可以抽取出道具的基类。</p><p>创建脚本 <code>MiniGame_Item</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Item : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public int score;</span><br><span class="line"></span><br><span class="line">    private void OnTriggerEnter2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        if (collision.gameObject.CompareTag(&quot;Player&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            TouchEvent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void TakeScore()</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject root &#x3D; GameObject.FindGameObjectWithTag(&quot;Controller&quot;);</span><br><span class="line">        MiniGame_Controller ctrl &#x3D; root.GetComponent&lt;MiniGame_Controller&gt;();</span><br><span class="line"></span><br><span class="line">        ctrl.AddScore(score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void TouchEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（其实这个脚本是修改之后的结果，原来是监听刚体碰撞，后来改成了监听触发器，下文解释为什么要这么改）</p><p>道具基类包含了一个 <code>score</code> 参数，用于计算角色吃到道具的得分。</p><p><code>TakeScore</code> 方法是吃到加分道具时更新场景的分数显示的通用方法。</p><p>道具只要监听与主角的碰撞事件即可，然后声明一个抽象方法，获得道具的效果在子类实现。</p><h3 id="加分道具"><a href="#加分道具" class="headerlink" title="加分道具"></a>加分道具</h3><p>加分道具的逻辑很简单，只要玩家吃到道具，更新场景右上角显示的分数即可。</p><p>最后销毁道具就完了。</p><h4 id="动态效果"><a href="#动态效果" class="headerlink" title="动态效果"></a>动态效果</h4><p>为了节约时间，直接使用第三方提供的插件包 <code>Itween</code> 来制作动态效果。</p><p>这是一个可以控制运动、数值变化的插件。</p><p>地址：<a href="https://assetstore.unity.com/packages/tools/animation/itween-84?locale=zh-CN">iTween</a></p><p>直接从 unity 商店添加到工程即可。</p><p><img src="https://files.catbox.moe/nmpnl6.jpg" alt="添加itween"></p><p>获得资源后，在 Unity 的 Window 菜单中选择 <code>Package Manage</code>（包管理）</p><p>在打开的窗口中选择 <code>My Assets</code> 即可看到刚才从商店中获取的 <code>Itween</code> 插件包了。</p><p><img src="https://files.catbox.moe/w7q4ed.jpg" alt="获取我的插件"></p><p>然后选择导入到工程即可。</p><p><img src="https://files.catbox.moe/2un1w2.jpg" alt="导入itween"></p><p>导入的插件放在 <code>Assets/Plugins</code> 目录下，插件会自动加载，因此这样就完成了。</p><h4 id="樱桃"><a href="#樱桃" class="headerlink" title="樱桃"></a>樱桃</h4><p>樱桃是直接出现在场景的道具，它漂浮在空中，有规律的上下浮动。</p><p>在场景中添加樱桃的游戏对象：</p><p><img src="https://files.catbox.moe/d4y2oo.jpg" alt="樱桃道具"></p><p>创建樱桃脚本 <code>MiniGame_CherryItem</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_CherryItem : MiniGame_Item</span><br><span class="line">&#123;</span><br><span class="line">    public float moveSpeed &#x3D; 5f;</span><br><span class="line">    public float height &#x3D; 10f;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        iTween.ValueTo(gameObject, new Hashtable</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; &quot;from&quot;, height &#125;,</span><br><span class="line">            &#123; &quot;to&quot;, -height &#125;,</span><br><span class="line">            &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">            &#123; &quot;loopType&quot;, iTween.LoopType.pingPong &#125;,</span><br><span class="line">            &#123; &quot;onUpdate&quot;, &quot;MoveAction&quot; &#125;,</span><br><span class="line">            &#123; &quot;onUpdateTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;time&quot;, 0.5f &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void TouchEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        TakeScore();</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void MoveAction(float value)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 pos &#x3D; transform.position;</span><br><span class="line"></span><br><span class="line">        pos.y +&#x3D; value * moveSpeed;</span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>iTween.ValueTo</code> 方法的作用是动态的将一个初始值 a，调整到 b。</p><p><code>loopType</code> 循环类型为：<code>iTween.LoopType.pingPong</code>，即像打乒乓球一样有来有回。</p><p>比如先从 0 到 1，这样就算值的变化结束了，然后又从 1 到 0，始终如此循环。</p><p><code>easeType</code> 参数指定了变化的曲线，<code>iTween.EaseType.linear</code> 即线性变化，可以理解为均匀的变化。</p><p>参数的 <code>height</code> 指定了樱桃漂浮的高度，通过 <code>ValueTo</code> 方法在这个高度范围内变化。</p><p>每次值改变的时候就会调用 <code>MoveAction</code> 方法修改樱桃的 y 坐标。</p><p>这样樱桃的漂浮轨迹就完成了。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/vr39nk.gif" alt="漂浮的樱桃"></p><p>吃到樱桃右上角的分数也更新了。</p><p>发现角色在吃到道具的时候，发生了刚体碰撞，导致角色被道具反弹了一下，影响手感。</p><p>此处是因为我把道具也设置成刚体了，只要将道具设置为触发器，并且移除刚体组件即可。</p><p>然后修改 Item 的碰撞回调为触发器回调即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void OnTriggerEnter2D(Collider2D collision)</span><br><span class="line">&#123;</span><br><span class="line">    if (collision.gameObject.CompareTag(&quot;Player&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        TouchEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新测试：</p><p><img src="https://files.catbox.moe/akm99i.gif" alt="移除道具的刚体"></p><p>刚体碰撞的问题也解决了。</p><h4 id="金币"><a href="#金币" class="headerlink" title="金币"></a>金币</h4><p>金币有自己的动画效果，先给金币加上动画。</p><p><img src="https://files.catbox.moe/n9fz55.gif" alt="金币动画"></p><p>金币在生成的时候，会有一个“爆出”的效果，即向上飞出然后落到地上消失。</p><p>原来的道具基类没有接触地板的判断，因此需要进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Item : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public int score;</span><br><span class="line">    protected Rigidbody2D rb;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void OnTriggerEnter2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        string tag &#x3D; collision.gameObject.tag;</span><br><span class="line"></span><br><span class="line">        switch (tag)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;Player&quot;:</span><br><span class="line">                TouchPlayerEvent();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Ground&quot;:</span><br><span class="line">                TouchGroundEvent();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void TakeScore()</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject root &#x3D; GameObject.FindGameObjectWithTag(&quot;Controller&quot;);</span><br><span class="line">        MiniGame_Controller ctrl &#x3D; root.GetComponent&lt;MiniGame_Controller&gt;();</span><br><span class="line"></span><br><span class="line">        ctrl.AddScore(score);</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void TouchGroundEvent();</span><br><span class="line">    protected abstract void TouchPlayerEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增抽象方法 <code>TouchGroundEvent</code>，用于执行道具与地板接触的处理。</p><p>然后创建金币道具类 <code>MiniGame_GoldItem</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_GoldItem : MiniGame_Item</span><br><span class="line">&#123;</span><br><span class="line">    public float ySpeed &#x3D; 300f;</span><br><span class="line">    public float time &#x3D; 1.5f;</span><br><span class="line"></span><br><span class="line">    private float currentSpeed;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        iTween.ValueTo(gameObject, new Hashtable</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; &quot;from&quot;, ySpeed &#125;,</span><br><span class="line">            &#123; &quot;to&quot;, -ySpeed &#125;,</span><br><span class="line">            &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">            &#123; &quot;onUpdate&quot;, &quot;MoveAction&quot; &#125;,</span><br><span class="line">            &#123; &quot;onUpdateTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;time&quot;, time &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void TouchGroundEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void TouchPlayerEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        TakeScore();</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void MoveAction(float value)</span><br><span class="line">    &#123;</span><br><span class="line">        currentSpeed &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 pos &#x3D; transform.position;</span><br><span class="line"></span><br><span class="line">        pos.y +&#x3D; currentSpeed * Time.deltaTime;</span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里同样利用了 <code>ValueTo</code> 方法的值变化。</p><p>金币的上抛速度先是从最大值逐渐减到负数，这样就会反向运动了。</p><p>最后掉落到地上把金币销毁就可以了。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/y5xb5x.gif" alt="爆出金币"></p><p>直接消失的观感似乎不怎么好，以后如果有时间的话再优化。</p><h4 id="分值显示"><a href="#分值显示" class="headerlink" title="分值显示"></a>分值显示</h4><p>吃到加分道具的时候，会在原地留下一个分数显示的文本。</p><p>然后逐渐向上飞行然后淡出。</p><p><img src="https://files.catbox.moe/hj2nno.jpg" alt="分数显示效果"></p><p>做法十分简单，创建一个 Text 对象。</p><p>再创建用来控制文本逻辑的脚本 <code>MiniGame_ScoreText</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class MiniGame_ScoreText : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public int score;</span><br><span class="line">    public Text text;</span><br><span class="line">    public float time &#x3D; 1f;</span><br><span class="line">    public float speed &#x3D; 10f;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; GetComponent&lt;Text&gt;();</span><br><span class="line">        text.text &#x3D; &quot;+&quot; + score.ToString();</span><br><span class="line"></span><br><span class="line">        iTween.ValueTo(gameObject, new Hashtable</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; &quot;from&quot;, 1f &#125;,</span><br><span class="line">            &#123; &quot;to&quot;, 0f &#125;,</span><br><span class="line">            &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">            &#123; &quot;onUpdate&quot;, &quot;UpdateColor&quot; &#125;,</span><br><span class="line">            &#123; &quot;onUpdateTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;onComplete&quot;, &quot;Hiden&quot; &#125;,</span><br><span class="line">            &#123; &quot;onCompleteTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;time&quot;, time &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void UpdateColor(float value)</span><br><span class="line">    &#123;</span><br><span class="line">        text.color &#x3D; new Color(1, 1, 1, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Hiden()</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 pos &#x3D; transform.position;</span><br><span class="line">        pos.y +&#x3D; speed * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果:</p><p><img src="https://files.catbox.moe/g0rab2.gif" alt="加分文本"></p><h3 id="加血道具"><a href="#加血道具" class="headerlink" title="加血道具"></a>加血道具</h3><p>加血道具直接使用心形图标即可，这样玩家看了就知道这是回血的。</p><p>因为要调用到回血的方法，所以修改 Item 基类，把碰撞体也作为参数传给子类方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protected abstract void TouchGroundEvent(Collider2D collision);</span><br><span class="line">protected abstract void TouchPlayerEvent(Collider2D collision);</span><br></pre></td></tr></table></figure><p>然后给 Player 方法添加回血方法，修改 <code>MiniGame_Character</code> 基类，自动获取场景控制器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected MiniGame_Controller controller;</span><br><span class="line"></span><br><span class="line">controller &#x3D; GameObject.FindGameObjectWithTag(&quot;Controller&quot;).GetComponent&lt;MiniGame_Controller&gt;();</span><br></pre></td></tr></table></figure><p>如此一来在子类中就可以直接获得控制器了。</p><p>接着修改 <code>MiniGame_Player</code>，添加回血方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void RecoverHP()</span><br><span class="line">&#123;</span><br><span class="line">    if (currentHP &gt;&#x3D; maxHP)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentHP +&#x3D; 1;</span><br><span class="line">    controller.heartLayout.UpdateLast(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次调用这个方法可以恢复 1 点 HP。</p><p>这里需要先让当前 HP 增加，然后才调用 <code>UpdateLast</code> 方法（因为此方法是让最后一格血量充满）。</p><p>然后是主角受伤的时候，应该扣掉一格血。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public override void TakeDamage(int damage)</span><br><span class="line">&#123;</span><br><span class="line">    controller.heartLayout.UpdateLast(false);</span><br><span class="line"></span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line"></span><br><span class="line">    Wait(delegate</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, pretectedTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>受伤时应该后先更新血量的标志，然后再扣除当前 HP。</p><p>接着是吃到补血道具时，要调用 Player 的回复 HP 的方法。</p><p>新建 <code>MiniGame_HeartItem</code> 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_HeartItem : MiniGame_Item</span><br><span class="line">&#123;</span><br><span class="line">    protected override void TouchGroundEvent(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void TouchPlayerEvent(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        MiniGame_Player player &#x3D; collision.GetComponent&lt;MiniGame_Player&gt;();</span><br><span class="line"></span><br><span class="line">        player.RecoverHP();</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>心形道具与角色碰撞时，获得 Player 脚本，然后调用回血方法。</p><p>最后销毁自身，让道具消失。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/yw4vpt.gif" alt="受伤与回血"></p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>早上 9 点兴奋的起床，开始撸代码。</p><p>结果到现在第二天的 00:36 还没弄完……</p><p>高估了自己的制作速度。</p><p>看来还需要一篇才能真正的完结了。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（六）</title>
      <link href="2021/05/06/monster-game-6/"/>
      <url>2021/05/06/monster-game-6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天开始设计与角色相关的东西，比如跟随在主角旁边的小鸟、可以吃的加分道具、场景内的敌人，还有 BOSS 战用来显示 BOSS 的血条。</p><h2 id="宠物跟随"><a href="#宠物跟随" class="headerlink" title="宠物跟随"></a>宠物跟随</h2><p>主角在行动时，旁边会有一只小鸟跟随在身边。</p><p>（其实就是一个装饰物）</p><p><img src="https://files.catbox.moe/v6d4wg.jpg" alt="使魔跟随"></p><p>最早的时候设想过让小鸟可以帮助玩家挡一次子弹，然后小鸟就会死了掉出屏幕。</p><p>但是这样太可怜了，所以取消了这个设定。</p><h3 id="飞行动画"><a href="#飞行动画" class="headerlink" title="飞行动画"></a>飞行动画</h3><p>在场景创建一个小鸟对象，然后为它添加飞行动画。</p><p><img src="https://files.catbox.moe/4n7p7y.gif" alt="飞行动画"></p><h3 id="跟随主角"><a href="#跟随主角" class="headerlink" title="跟随主角"></a>跟随主角</h3><p>这里有一个简单的做法就是直接把小鸟放在角色对象底下。</p><p><img src="https://files.catbox.moe/b5bsgs.gif" alt="放在角色对象下"></p><p>因为 Pet 变成了 Player 的子节点，所以会自动跟随父节点改变位置和翻转。</p><p>然鹅，主角在转向的时候，小鸟会突然“变到”主角身后，很不自然。</p><h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><p>以遛狗为例，狗会在绳子周围走动，人物向前走的时候，狗的移动范围也会发生变化，但狗的行动范围总是不会超过绳子的长度。</p><p>因此“绳子”的长度可以理解成宠物的移动范围。</p><p>以主角为中心，存在一条“看不见的绳子”，即宠物和角色之间的距离就是小鸟飞行范围的约束。</p><p>以角色和小鸟的锚点（即中心点）计算两点的距离即可。</p><p>可以用两点间距离公式，也可以直接用 unity 的方法，有现成的方法肯定是直接用啦！</p><p>编写 MiniGame_Pet 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Pet : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Transform player;</span><br><span class="line">    public float flySpeed &#x3D; 10f;</span><br><span class="line">    public float followDistance &#x3D; 10f;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Vector3.Distance(player.position, transform.position) &gt;&#x3D; followDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.position &#x3D; Vector3.Lerp(transform.position, player.position, Time.deltaTime * flySpeed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本有三个参数，第一个是要跟随的对象，即主角的位置。</p><p>第二个是飞行的速度，决定了当主角甩开小鸟的时候，小鸟会以多快的速度追上主角。</p><p>第三个参数是跟随范围的距离，当超过这个距离的时候，小鸟就会开始追主角。</p><p><img src="https://files.catbox.moe/h2vvif.gif" alt="跟随效果"></p><p>看起来丝滑了很多，小鸟现在还不能跟随角色转身，根据玩家的朝向让小鸟也转向就好了。</p><p><img src="https://files.catbox.moe/p1c2xw.gif" alt="转身效果"></p><p>这扑腾翅膀的样子也太萌了~</p><h2 id="角色系统"><a href="#角色系统" class="headerlink" title="角色系统"></a>角色系统</h2><p>基于“万物皆对象”的思想，可以把主角和敌人的相似点抽取出来，做成基类。</p><p>主角有动画，敌人也有动画；</p><p>主角有血量，敌人也有血量；</p><p>诸如此类，它们身上存在许多相似点，所以可以进行抽取。</p><h3 id="角色基类"><a href="#角色基类" class="headerlink" title="角色基类"></a>角色基类</h3><p>新建一个游戏角色的脚本 <code>MiniGame_Character</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Character : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float maxHP;</span><br><span class="line">    public GameObject[] bullets;</span><br><span class="line"></span><br><span class="line">    protected float currentHP;</span><br><span class="line"></span><br><span class="line">    protected Rigidbody2D rb;</span><br><span class="line">    protected Animator animator;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        currentHP &#x3D; maxHP;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">        animator &#x3D; GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IEnumerator TakeDamage(float damage)</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">        currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">        yield return new WaitForSeconds(0.05f);</span><br><span class="line"></span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void DeadCallback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在唤醒的时候自动获取对象的刚体和动画组件，并且赋予当前 HP 属性。</p><p>并且声明了一个抽象方法 <code>DeadCallback</code>（死亡回调），即当角色死亡的时候会发生什么事情，必须在子类中实现。</p><p>虽然游戏中的角色都会死亡，但是玩家死亡了会触发 GameOver，但是敌人死亡了会爆金币，所以要单独实现。</p><p><code>TakeDamage</code> 方法是角色的受伤事件，传入一个 damage（伤害值）。</p><p>类似攻击事件，这里用到协程，在 0.05s 后解除受伤动画状态。</p><p>要调用协程方法必须用 <code>StartCoroutine</code>，这样很不方便。</p><h3 id="延迟类封装"><a href="#延迟类封装" class="headerlink" title="延迟类封装"></a>延迟类封装</h3><p>可以将延迟函数封装成一个工具类，然后让子类继承这个类就可以直接使用延迟函数了。</p><p>在 <code>Assets/Scripts</code> 目录新建一个 Core 文件夹，用来保存游戏的核心类文件。</p><p>新建脚本 <code>TimeManger</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class TimeManager : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 重复执行</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected void RepeatForever(string methodName, float time, float repeatRate)</span><br><span class="line">    &#123;</span><br><span class="line">        InvokeRepeating(methodName, time, repeatRate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 延迟执行</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected void Wait(System.Action action, float seconds)</span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(WaitIEnumerable(action, seconds));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 延迟执行方法封装</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private IEnumerator WaitIEnumerable(System.Action action, float seconds)</span><br><span class="line">    &#123;</span><br><span class="line">        yield return new WaitForSeconds(seconds);</span><br><span class="line">        action();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 关闭该脚本上的Timer方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected void ClearTimeer()</span><br><span class="line">    &#123;</span><br><span class="line">        CancelInvoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TimeManger</code> 封装了协程的方法，只要直接调用 <code>Wait</code> 就可以实现延迟执行。</p><p>还有一些其他定时重复执行的方法，以后会用到。</p><p>而且这个类必须继承 <code>MonoBehaviour</code>，不然没办法调用 unity 提供的延迟函数。</p><p>而且继承了 <code>MonoBehaviour</code> 可以当做组件挂在场景中的游戏物体上。</p><h3 id="修改调用方法"><a href="#修改调用方法" class="headerlink" title="修改调用方法"></a>修改调用方法</h3><p>未修改前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public IEnumerator TakeDamage(float damage)</span><br><span class="line">&#123;</span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">    if(currentHP &lt;&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        DeadCallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    yield return new WaitForSeconds(0.05f);</span><br><span class="line"></span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void TakeDamage(float damage)</span><br><span class="line">&#123;</span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">    Wait(delegate</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, 0.05f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TakeDamage</code> 方法已经不再是返回 <code>IEnumerator</code> 类型了，因此可以作为普通方法调用。</p><p><code>delegate</code> 是 <code>C#</code> 的委托类型，可以传入一个匿名函数作为回调，匿名函数的类型是 <code>System.Action</code>，可以作为函数的参数。</p><p><code>TimeManager</code> 封装的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected void Wait(System.Action action, float seconds)</span><br><span class="line">&#123;</span><br><span class="line">    StartCoroutine(WaitIEnumerable(action, seconds));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要传入一个委托和延迟执行的时间，就会自动去调用协程方法。</p><p>同理，再去修改之前的 Player 脚本的 Shoot 方法，这样代码又整洁了一些。</p><h2 id="制作敌人"><a href="#制作敌人" class="headerlink" title="制作敌人"></a>制作敌人</h2><p>小游戏只有一关，所以敌人数量不会很多。</p><p>包括数个小怪以及最后的 BOSS。</p><p>上面已经封装了角色类，现在再封装一层敌人的通用类。</p><h3 id="敌人基类"><a href="#敌人基类" class="headerlink" title="敌人基类"></a>敌人基类</h3><p>敌人也具有共通点，比如死亡会掉落金币（道具）。</p><p>把基础方法抽取出来可以提高代码的复用性，节省时间。</p><p>新建 <code>MiniGame_Enemy</code> 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Enemy : MiniGame_Character</span><br><span class="line">&#123;</span><br><span class="line">    protected override void DeadCallback()</span><br><span class="line">    &#123;</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void MoveAction();</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MoveAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>死亡回调留个空，后面再完善就行了。</p><p>然后声明了一个抽象的 <code>MoveAction</code>（移动控制），每个敌人的行动模式都不一样，所以要在子类单独实现。</p><h3 id="漂浮幽灵"><a href="#漂浮幽灵" class="headerlink" title="漂浮幽灵"></a>漂浮幽灵</h3><p>幽灵敌人比较简单，它只会在一个区域范围内进行巡逻。</p><p>制作飞行动画：</p><p><img src="https://files.catbox.moe/v9ilid.gif" alt="漂浮幽灵"></p><p>然后再写一个控制幽灵的逻辑。</p><p>幽灵的移动轨迹示意图：</p><p><img src="https://files.catbox.moe/cij098.jpg" alt="幽灵的移动轨迹"></p><p>演示效果：</p><p><img src="https://files.catbox.moe/sm5xoq.gif" alt="演示幽灵移动"></p><h3 id="垃圾桶怪"><a href="#垃圾桶怪" class="headerlink" title="垃圾桶怪"></a>垃圾桶怪</h3><p>垃圾桶怪是固定不动的敌人，只有玩家走进攻击范围或者被玩家攻击的时候才会变成攻击形态。</p><p>待机状态：</p><p><img src="https://files.catbox.moe/snldse.gif" alt="垃圾桶怪待机动画"></p><p>愤怒形态：</p><p><img src="https://files.catbox.moe/h9pa0a.gif" alt="垃圾桶怪愤怒形态"></p><p>攻击形态：</p><p><img src="https://files.catbox.moe/8zprhn.gif" alt="攻击形态"></p><p>动画的状态转化关系也比较简单。</p><p><img src="https://files.catbox.moe/2rebvq.jpg" alt="垃圾桶怪的动画状态机"></p><p>然后为垃圾桶怪添加逻辑处理。</p><p>垃圾桶怪前方有一块警戒区域，当玩家进入这个区域的时候，垃圾桶怪就会变成攻击形态追击玩家。</p><p><img src="https://files.catbox.moe/idqygz.jpg" alt="垃圾桶怪的警戒区域"></p><p>还有第二种情况，当玩家用子弹攻击垃圾桶怪的时候，如果垃圾桶怪藏在桶里，此时是无敌的。</p><p>如果攻击达到一定次数，即使玩家没有踏入警戒区，垃圾桶怪也会变得愤怒，然后开始追击玩家。</p><p>（打扰到它睡觉了）</p><p>警戒区域也是一个碰撞体，设置为触发器即可。</p><p><img src="https://files.catbox.moe/bpsoxg.jpg" alt="警戒区域设置"></p><p>演示效果：</p><p><img src="https://files.catbox.moe/3l8ids.gif" alt="进入垃圾桶怪的警戒区域"></p><p>这里会出现一个问题，因为使用了物理系统，所以会产生物理碰撞效果。</p><p><img src="https://files.catbox.moe/81hsjo.gif" alt="与敌人的物理碰撞效果"></p><p>但这并不是游戏中应该有的效果，主角撞到敌人时，不应该把敌人撞飞。</p><p>只要将刚体组件的类型设置为 <code>Static</code>（静态不受外力）即可。</p><p><img src="https://files.catbox.moe/562zu9.jpg" alt="静态刚体"></p><p>修正后的效果：</p><p><img src="https://files.catbox.moe/mq0eet.gif" alt="无法被击飞的垃圾桶怪"></p><p>垃圾桶怪的行为逻辑还没完成，不过还有不少怪物的动画没完成，今天已经挺晚了，就留到明天再补充。</p><h3 id="自爆怪"><a href="#自爆怪" class="headerlink" title="自爆怪"></a>自爆怪</h3><p>自爆怪是一个组合类型的敌人，包括头顶的“竹蜻蜓”以及本体的“炸弹”。</p><p>当它靠近主角的时候，竹蜻蜓就会飞走，然后本体掉落在地上产生爆炸。</p><p><img src="https://files.catbox.moe/6yuzhl.jpg" alt="自爆怪"></p><p>添加了“竹蜻蜓”的动画效果：</p><p><img src="https://files.catbox.moe/omynqq.gif" alt="竹蜻蜓动画"></p><p>具体的分离逻辑也留到明天完成。</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>今天的进度先到这里了，明天写完最后一篇，小游戏应该就能结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（五）</title>
      <link href="2021/05/05/monster-game-5/"/>
      <url>2021/05/05/monster-game-5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>unity 自带了一套动画系统，还内置了“状态机”。</p><p>状态机是一种可以实现不同状态之间互相转换的机制。</p><p>本篇开始制作角色的攻击动作以及其他一些动画。</p><p>unity 的动画系统比起 cocos 复杂很多，在网上没找到比较好的教程，因此决定自己看官方文档。</p><p>官方文档：<a href="https://docs.unity3d.com/cn/2020.3/Manual/AnimationSection.html">https://docs.unity3d.com/cn/2020.3/Manual/AnimationSection.html</a></p><h2 id="攻击系统"><a href="#攻击系统" class="headerlink" title="攻击系统"></a>攻击系统</h2><p>制作动画之前，要先把角色的攻击功能做出来。</p><h3 id="攻击事件"><a href="#攻击事件" class="headerlink" title="攻击事件"></a>攻击事件</h3><p>前文写的方法是通过按键实现连发攻击。</p><p>现在为了让手感更加丝滑，改成按一下攻击键就发射一颗子弹。</p><p>使用 <code>GetButtonDown</code> 来监听玩家按下攻击键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private void PressedKey()</span><br><span class="line">&#123;</span><br><span class="line">    horizontal &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGround)</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 新增</span><br><span class="line">    if (Input.GetButtonDown(&quot;Fire1&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        Shoot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写 <code>Shoot</code> 方法，在这里创建子弹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void Shoot()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint);</span><br><span class="line"></span><br><span class="line">    MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">    bullet.attacker &#x3D; this;</span><br><span class="line"></span><br><span class="line">    bulletObj.transform.SetParent(bg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样按键攻击的功能就完成了。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/tszeso.gif" alt="按键射击"></p><p>这里的子弹以及如何让子弹飞离屏幕就消失，前面发的博文已经有介绍了，故不再重复说明。</p><h3 id="刚体碰撞问题"><a href="#刚体碰撞问题" class="headerlink" title="刚体碰撞问题"></a>刚体碰撞问题</h3><p>因为现在使用了物理系统，所以之前使用的区域检测法让子弹消失会出现问题。</p><p>如下图：</p><p><img src="https://files.catbox.moe/osp1cd.jpg" alt="内部碰撞"></p><p>这是刚体和刚体之间会发生碰撞，产生物理效果。</p><p>虽然碰撞区域移除了重力影响，但现在这个场景里面，角色身上有刚体组件，地板也有刚体组件，这样必然会触发物理系统，结果就是碰撞区域发生了偏移。</p><p>因为我已经把角色的操控系统改成用物理效果来实现了，原理已经不同了。</p><p>现在不能让碰撞区域作为刚体，而是要让子弹、敌人和玩家作为刚体，区域检测器设置为触发器。</p><p>尽管让子弹加上刚体会影响性能，但至少要先把功能实现了再说，如果出现卡顿现象，到时候再想办法优化。</p><p>（这个小游戏不是弹幕游戏，应该不至于会出现性能问题）</p><h3 id="子弹实例"><a href="#子弹实例" class="headerlink" title="子弹实例"></a>子弹实例</h3><p>移除碰撞区域的刚体，并设置为 Trigger，这样碰撞区域就是一个触发器了。</p><p>再给子弹加上 2D 刚体组件。</p><p>修改原来子弹代码移动逻辑，改成用外力进行推动而不是直接修改坐标，与控制角色的代码一样。</p><p>在父类中获得刚体组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Bullet : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float damage;</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public MiniGame_Character attacker;</span><br><span class="line"></span><br><span class="line">    protected Rigidbody2D rb;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void MoveEvent();</span><br><span class="line"></span><br><span class="line">    protected void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MoveEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改子类的移动逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_StarBullet : MiniGame_Bullet</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 1000f;</span><br><span class="line">    private float direct;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        direct &#x3D; attacker.transform.localScale.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void MoveEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(speed * direct, rb.velocity.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果：</p><p><img src="https://files.catbox.moe/0l2djk.gif" alt="子弹消失"></p><p>可以看到，子弹离开边界的时候已经被销毁了。</p><h2 id="角色动画"><a href="#角色动画" class="headerlink" title="角色动画"></a>角色动画</h2><p>为了方便观察动画效果，先调整一下 unity 引擎的界面布局。</p><p><img src="https://files.catbox.moe/wpdw8j.jpg" alt="unity 布局调整"></p><p>接下来就可以开始制作动画了。</p><p>在 Assets 目录下创建一个 Animations 文件夹用来存放动画，依次创建 MiniGame、Player 子文件夹。</p><p>这里有个比较坑爹的地方，我用的 2021 版 unity 默认会把动画的播放间隔参数隐藏起来。</p><p>如下图：</p><p><img src="https://files.catbox.moe/t2bkg3.jpg" alt="动画界面"></p><p>其实只要点开界面的右上方，选择更多，在弹出的菜单中再选择 <code>ShowSampleRate</code>：</p><p><img src="https://files.catbox.moe/vgl65s.jpg" alt="showSampleRate"></p><p>勾选以后，就可以在动画界面看到设定帧数的输入框了，默认值是 60，也就是说 1 秒钟有 60 帧：</p><p><img src="https://files.catbox.moe/g48voy.jpg" alt="帧数设置"></p><p>实际上我们没有那么多的素材能用，一般也就几帧而已，每帧对应一张图片素材。</p><h3 id="待机动画"><a href="#待机动画" class="headerlink" title="待机动画"></a>待机动画</h3><p>待机动画是角色静止不动时的动作。</p><p>动画是女主角眨眼的动作，这个动画只播放一次，不循环。</p><p>完整动作只有 4 张素材，也就是把眼睛闭上的动作。</p><p>睁眼的动作其实就反过来倒序播放而已。</p><p>顺序播放：1234321，一共有 7 帧。</p><p>60 / 7 = 8.5，因此这里可以四舍五入取 9 作为帧数，即将 1 秒钟划分成 9 份。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/6c0sgn.gif" alt="待机动画"></p><p>动画默认是循环播放的，我们这个待机效果只要播放一次就够。</p><p>找到刚才存放动画的文件：</p><p><img src="https://files.catbox.moe/4sewgq.jpg" alt="待机动画文件"></p><p>双击选中，然后在右侧的属性面板中把 <code>Loop Time</code> 的勾去掉即可：</p><p><img src="https://files.catbox.moe/c9b7b4.jpg" alt="动画属性"></p><h3 id="奔跑动画"><a href="#奔跑动画" class="headerlink" title="奔跑动画"></a>奔跑动画</h3><p>继续制作奔跑动画，创建新的动画然后把素材拖进去：</p><p><img src="https://files.catbox.moe/xlkzmh.gif" alt="奔跑动画"></p><p>奔跑的动画是循环的，所以不需要调整。</p><h3 id="奔跑攻击动画"><a href="#奔跑攻击动画" class="headerlink" title="奔跑攻击动画"></a>奔跑攻击动画</h3><p>角色一边奔跑一边按攻击键，也有独立的动画。</p><p>直接将素材拖进去即可：</p><p><img src="https://files.catbox.moe/zqdfm6.gif" alt="奔跑攻击"></p><h3 id="攻击动画"><a href="#攻击动画" class="headerlink" title="攻击动画"></a>攻击动画</h3><p>攻击动画只有一张素材，也拖进去即可。</p><p><img src="https://files.catbox.moe/5qsyf4.jpg" alt="攻击动画"></p><h3 id="受伤动画"><a href="#受伤动画" class="headerlink" title="受伤动画"></a>受伤动画</h3><p>受伤也只有一张。</p><p><img src="https://files.catbox.moe/4bwpzy.jpg" alt="受伤动画"></p><h3 id="倒下动画"><a href="#倒下动画" class="headerlink" title="倒下动画"></a>倒下动画</h3><p>角色 gg 的时候倒地动画。</p><p><img src="https://files.catbox.moe/2frez6.jpg" alt="倒地动画"></p><h3 id="未完成动画"><a href="#未完成动画" class="headerlink" title="未完成动画"></a>未完成动画</h3><p>其实还有跳跃、跳跃攻击的动画，但是没有做出来。</p><p>角色的动画这样就算弄好了。</p><h2 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h2><p>事物具有“状态”属性，遇到不同条件时，状态就会发生变化。</p><p>比如天冷的时候，水结冰，此时水是固态，而当天气变热，冰化了，变成液态的水，然后天气继续升温，水被蒸发了，变成气态的水蒸气，水蒸气遇到冷空气又会变成雨。</p><p>这个过程就是水的状态转化机制，动画系统也是同理。</p><p>当玩家操控角色行走时，由待机动作转化为奔跑动作，而玩家又按下了攻击键，则角色的动画就会从奔跑转变为奔跑攻击，攻击动作完成后又会变回奔跑动作，然后玩家松开方向键停止奔跑，角色的动画就会从奔跑转为待机。</p><p>一般来说，除了自发的转换之外，动画转换基本是根据玩家的操作来决定的。</p><p>来看看令人头大的动画状态控制器：</p><p><img src="https://files.catbox.moe/82a86r.jpg" alt="动画状态控制器"></p><h3 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h3><p>物体总是有一个初始状态，其中 <code>Entry</code> 箭头指向的就是默认进入的动画效果。</p><p><img src="https://files.catbox.moe/4g2m3y.jpg" alt="初始状态"></p><p>这里的意思是，游戏开始时，角色就会进入 <code>Idle</code>（待机动画）。</p><p>打开调试场景测试：</p><p><img src="https://files.catbox.moe/2lsdgf.gif" alt="初始动画"></p><p>可以发现角色播放了眨眼动画，说明设置成功了。</p><p>而且这里只眨眼了一次，说明上面设置的取消循环也成功了。</p><h3 id="待机-奔跑"><a href="#待机-奔跑" class="headerlink" title="待机-奔跑"></a>待机-奔跑</h3><p>角色只有在玩家按键操作的时候，才会从静止状态变为奔跑状态。</p><p>因此可以用两种方法实现状态的转化，第一种是根据玩家的按键，第二种是根据角色当前的移动速度。</p><p>第一种方法是主动变化，第二种方法是被动触发。</p><p>这里选择第一种。</p><p>右键 <code>Player_Idle</code> 动画，在弹出的菜单中选择 <code>Make Transtition</code> 创建一个新的转换关系。</p><p><img src="https://files.catbox.moe/hh7o6d.jpg" alt="新建关系"></p><p>待机动画和奔跑动画是可以相互转换的，所以要建立双向关系。</p><p>动画转换条件只要监听玩家按键就可以了，控制玩家移动的 <code>GetAxis</code> 方法会返回 -1~1 的值。</p><p>当玩家没有按键的时候，返回的是 0，向左移动返回负数，向右返回整数。</p><p>因此这个值就可以当做动画转换的条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 保存动画组件</span><br><span class="line">private Animator animator;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在唤醒的时候获取动画组件</span><br><span class="line">animator &#x3D; GetComponent&lt;Animator&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在移动方法里获得水平按键参数</span><br><span class="line">animator.SetFloat(&quot;horizontal&quot;, Mathf.Abs(horizontal));</span><br></pre></td></tr></table></figure><p>这里将水平参数转换成绝对值，因为只要正数就够了，方向并不影响动画的播放。</p><p>好了，现在这样就可以进入游戏场景调试了：</p><p><img src="https://files.catbox.moe/d9qysu.gif" alt="待机和奔跑之间的转换"></p><p>简直不要太神奇……如果是自己来写状态机，指不定要花多长的时间呢！</p><h3 id="待机-攻击"><a href="#待机-攻击" class="headerlink" title="待机-攻击"></a>待机-攻击</h3><p>从待机到攻击比较简单，只要在待机状态下玩家按下攻击键就认为是攻击状态。</p><p>这里我对代码进行了一些修改，把按键判定放在 Update，然后在 FixedUpdate 实际发射出子弹。</p><p>因为攻击动作太快（只有 1 帧）会导致以肉眼看不见的速度结束，所以要用到延迟函数，这里我通过协程来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    StartCoroutine(Shoot());</span><br><span class="line">    Move();</span><br><span class="line">    Jump();</span><br><span class="line">    GroundCheck();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void PressedKey()</span><br><span class="line">&#123;</span><br><span class="line">    horizontal &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGround)</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Fire1&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        isShoot &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private IEnumerator Shoot()</span><br><span class="line">&#123;</span><br><span class="line">    if (isShoot)</span><br><span class="line">    &#123;</span><br><span class="line">        isShoot &#x3D; false;</span><br><span class="line">        animator.SetBool(&quot;shoot&quot;, true);</span><br><span class="line"></span><br><span class="line">        GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">        GameObject bulletObj &#x3D; Instantiate(prefab, firePoint);</span><br><span class="line"></span><br><span class="line">        MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">        bullet.attacker &#x3D; this;</span><br><span class="line"></span><br><span class="line">        bulletObj.transform.SetParent(bg);</span><br><span class="line"></span><br><span class="line">        yield return new WaitForSeconds(0.05f);</span><br><span class="line"></span><br><span class="line">        animator.SetBool(&quot;shoot&quot;, false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成子弹后 0.05s 将攻击状态变为 false，即切换动画状态。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/ps485v.gif" alt="待机-攻击"></p><p>奔跑状态下按攻击键没有触发攻击动画，是因为还没设置。</p><h3 id="奔跑-奔跑攻击"><a href="#奔跑-奔跑攻击" class="headerlink" title="奔跑-奔跑攻击"></a>奔跑-奔跑攻击</h3><p>普通攻击是停下来的，而奔跑攻击有单独的动画。</p><p>演示效果如下：</p><p><img src="https://files.catbox.moe/8odefg.gif" alt="奔跑-奔跑攻击"></p><p>这里出现了一个比较“呆萌”的效果，主角奔跑攻击然后松开方向键，会出现“原地小跑”的情况，然后才停下来。</p><p><img src="https://files.catbox.moe/ojwxmg.gif" alt="原地小跑"></p><p>这是因为动画先从 Player_RunAttack 转换到 Player_Run，本来应该立即从 Player_Run 转化为 Player_Idle 的，但是因为我用的是 <code>GetAxis</code> 会有一段缓冲减速效果，因此这段极短的缓冲时间就是播放奔跑动画的时间，所以就会出现原地小跑的情况。</p><p>还有这段伸手动作：</p><p><img src="https://files.catbox.moe/8qzngf.gif" alt="伸手"></p><p>这是因为奔跑攻击动画用了循环，而且帧数比较多，所以才会有点“迟钝”的样子。</p><p>只要改成不循环然后减少帧数解决可以解决“伸手”的问题，但还是因为看起来很呆萌，所以就保留下来了。</p><blockquote><p>火兔语录：所有的 bug 都是游戏彩蛋！</p></blockquote><h3 id="未完成动画-1"><a href="#未完成动画-1" class="headerlink" title="未完成动画"></a>未完成动画</h3><p>还剩下两个动画没完成，一个是受伤另一个是倒地。</p><p>这两个动画要等制作出敌人才能实现，所以就留到下一篇了。</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>参考资料：<a href="https://www.bilibili.com/video/BV1sE411g7jK?t=1301">https://www.bilibili.com/video/BV1sE411g7jK?t=1301</a></p><p>最终还是找到了一个视频资料。</p><p>第一次看到 unity 的动画状态机还以为会是很难理解的东西，但实际体验了一下，感觉并不是想象中那么困难。</p><p>有时候对于未知的事物，还是要勇敢的尝试一下才知道是不是真的很难。</p><p>最开始学 unity 是 4 年前，跟着教学制作了一个 3D 小球的 Demo。</p><p>虽然做出来了，但是全英文的界面让我感觉到学习很困难。</p><p>而且 3D 的摄像机弄了半天也没搞清楚原理，最后就不了了之了。</p><p>也许是因为那时刚毕业，对自己的技术不那么自信，所以才会打退堂鼓。</p><p>但是经过了这么多年以后，技术提高了，自信心也增强了。</p><p>所谓“功夫不负有心人”，我开始相信只要是想学的技术，肯定能学会。</p><p>关键在于决心强不强烈。</p><p>成就感可以驱动行动，如果一个人擅长做一件事，而且这件事具有一定的挑战性，完成这件事就能得到成就感。</p><p>成就感是一种正反馈，得到的正反馈越多，学习的动力越强。</p><p>但如果一个人不擅长做某事，而且尝试过一次之后就失败了，这样就会得到与成就感相反的——『挫败感』。</p><p>如果这个人的内心又比较脆弱，意志也不够坚定，积累了一定的挫败感超过承受能力最终就会打退堂鼓。</p><p>像现在这样记录博客实际上也是在积累「成就感」，边做边写也能够督促自己每天坚持更新。</p><p>如果哪一天没更新了，说明自己偷懒了。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（四）</title>
      <link href="2021/05/04/monster-game-4/"/>
      <url>2021/05/04/monster-game-4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于自己写一个控制系统的工作量太大，因此决定改用 unity 的物理系统来完成这个平台跳跃 FC 小游戏。</p><p>虽然又得重头开始了，但这样也是为了让整个游戏的制作速度更快和更好。</p><h2 id="角色控制系统"><a href="#角色控制系统" class="headerlink" title="角色控制系统"></a>角色控制系统</h2><p>话不多说，直接开始。</p><h3 id="重力系统"><a href="#重力系统" class="headerlink" title="重力系统"></a>重力系统</h3><p>新建场景，然后创建一个角色图像，给角色加上 <code>Rigid Body 2D</code> 组件和 <code>Capsule Collider 2D</code> 组件。</p><p><img src="https://i.loli.net/2021/05/04/WXdDeG4w8UOoSEh.jpg" alt="QQ20210504-184126.jpg"></p><p><code>Rigid Body 2D</code> 是刚体组件，带有物理属性，<code>Capsule Collider 2D</code> 则是胶囊状碰撞体。</p><p>然后进入调试场景，发现角色已经会受到重力自由下落了。</p><p><img src="https://files.catbox.moe/tgafa6.gif" alt="重力效果"></p><h3 id="创建地板"><a href="#创建地板" class="headerlink" title="创建地板"></a>创建地板</h3><p>由于没有地板支撑，角色会掉到屏幕外面。</p><p>接下来创建一个地板，加上 <code>Rigid Body 2D</code> 和 <code>Box Collider 2D</code> 组件。</p><p><img src="https://files.catbox.moe/tnvyq1.jpg" alt="地板"></p><p>同时地板的刚体组件类型设置为 <code>Kinematic</code>：</p><p><img src="https://files.catbox.moe/lccafr.jpg" alt="刚体类型"></p><p>然后打开调试场景测试：</p><p><img src="https://files.catbox.moe/h2l724.gif" alt="地板效果"></p><p>两个刚体之间产生了碰撞，因此角色可以站在地板上面。</p><h3 id="水平移动"><a href="#水平移动" class="headerlink" title="水平移动"></a>水平移动</h3><p>使用物理系统控制角色移动十分简单，只要让角色受到水平方向的力就可以了。</p><p>新建 <code>MiniGame_Player</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float moveSpeed &#x3D; 100f;</span><br><span class="line"></span><br><span class="line">    private Rigidbody2D rb;</span><br><span class="line">    private float horizontal;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在唤醒物体时，取得身上绑定的刚体组件，然后监听水平方向的按键，并且赋值给 <code>horizontal</code> 变量。</p><p>然后在 <code>FixedUpdate</code> 方法里对刚体赋予水平速度，测试结果：</p><p><img src="https://files.catbox.moe/xd0xkl.gif" alt="水平移动"></p><p>发现角色受到外力直接倒下了……</p><p>这是因为角色的重心太高了，受到外力很容易倒下。</p><p>解决方法很简单，只要把 z 轴的旋转冻结就可以。</p><p><img src="https://files.catbox.moe/j3bkmm.jpg" alt="冻结z轴旋转"></p><p>然后再进入游戏场景进行测试：</p><p><img src="https://files.catbox.moe/chgu4h.gif" alt="重新测试"></p><h3 id="角色朝向"><a href="#角色朝向" class="headerlink" title="角色朝向"></a>角色朝向</h3><p>虽然角色可以左右滑动了，但是角色的朝向并没有改变。</p><p>修改 <code>FixedUpdate</code> 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(horizontal, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上一个判断水平按键的条件，根据玩家控制的移动方向改变角色的翻转。</p><p>测试效果：</p><p><img src="https://files.catbox.moe/pv53o4.gif" alt="角色朝向"></p><h3 id="角色跳跃"><a href="#角色跳跃" class="headerlink" title="角色跳跃"></a>角色跳跃</h3><p>同理，只需要让角色受到一个向上的力，角色就会“跳起来”了。</p><p>因为跳跃只能触发一次，而不像水平方向移动一样没有限制，所以要增加一个变量用来判断玩家是否按下跳跃键。</p><p>在跳跃状态下就不能再按跳跃键了，因为这个小游戏没有二段跳。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private bool jumpPressed;</span><br></pre></td></tr></table></figure><p>接下来这里有个小技巧，可以解决之前提到过的按键监听 <code>GetButtonDown</code> 手感不好的问题。</p><p>即在 Update 方法里监听按键，在 FixedUpdate 方法里写处理逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Jump&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(horizontal, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (jumpPressed &amp;&amp; isJump &#x3D;&#x3D; false)</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; false;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(rb.velocity.x, jumpSpeed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在按下空格键角色已经可以跳跃了，但是可以在空中无限跳。</p><p>正确的逻辑应该是角色跳跃之后，就不能再按空格键进行二段跳或者三段跳。</p><p>而是应该落到地板上面才能重新按跳跃键。</p><h3 id="落地问题"><a href="#落地问题" class="headerlink" title="落地问题"></a>落地问题</h3><p>现在的跳跃机制没有判断落到地板的情况，要实现这个判断实际上很复杂。</p><p>如果直接用碰撞系统无法避免“陷入物体”的情况（详情见前文）。</p><p>完美的解决方法就是上一篇文章中提到过的“射线检测机制”，但是要自己手动写一个检测系统非常困难。</p><p>幸运的是 unity 已经实现了类似的方法。</p><p><code>Physics2D.Overlap</code> 相关方法可以绘制某种图形，然后判断与某个物体是否相交。</p><p>这个跟我自己设想的「探知领域」差不多。</p><p>我今天折腾了一个下午，到底是为了什么……</p><p>在角色的脚底创建一个空的物体，当做角色的“脚”用来判断角色是否与地板接触。</p><p><img src="https://files.catbox.moe/qw5jf7.jpg" alt="地板检测器"></p><p>然后选中游戏场景中的地板，添加一个新的 Layout（图层），命名为 Ground：</p><p><img src="https://files.catbox.moe/w0n4yr.jpg" alt="Layout"></p><p>图层是用来控制游戏中场景的层级关系，在这里也可以作为检测用的“标签”。</p><p>图层 Layout 也可以作为参数传给脚本，类型是 LayerMask，在 Player 脚本添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public LayerMask layerMask;</span><br><span class="line">private bool isGround;</span><br></pre></td></tr></table></figure><p><code>layerMask</code> 用来赋值地板的图层参数，<code>isGround</code> 用来判断是否站在地板上面。</p><p>在 FixedUpdate 方法添加一行代码;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isGround &#x3D; Physics2D.OverlapCircle(groundCheck.position, 0.5f, layerMask);</span><br></pre></td></tr></table></figure><p><code>Physics2D.OverlapCircle</code> 方法会在脚底的位置画一个半径是 0.5 的圆圈，如果圆圈与 layerMask 的图层相交时就会返回 true。</p><p>其实就是下图这样：</p><p><img src="https://files.catbox.moe/jeeovz.jpg" alt="圆圈判定"></p><p>这个圆的半径不能太大，不然角色还没碰到地板就会被判定成站在地板上面了（毕竟踩着那么大一颗球）。</p><p>进入游戏场景进行测试：</p><p><img src="https://files.catbox.moe/x1dj9g.gif" alt="跳跃测试"></p><p>只有落地了才能继续跳跃，无法在空中进行二段跳。</p><p>跳跃功能也完成了！</p><h2 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h2><p>顺便优化一下代码，完整的 <code>MiniGame_Player</code> 脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float moveSpeed &#x3D; 400f;</span><br><span class="line">    public float jumpSpeed &#x3D; 400f;</span><br><span class="line"></span><br><span class="line">    public Transform groundCheck;</span><br><span class="line"></span><br><span class="line">    private Rigidbody2D rb;</span><br><span class="line">    private float horizontal;</span><br><span class="line"></span><br><span class="line">    private bool jumpPressed;</span><br><span class="line"></span><br><span class="line">    public LayerMask layerMask;</span><br><span class="line">    private bool isGround;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        PressedKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        Move();</span><br><span class="line">        Jump();</span><br><span class="line">        GroundCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void PressedKey()</span><br><span class="line">    &#123;</span><br><span class="line">        horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">        if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGround)</span><br><span class="line">        &#123;</span><br><span class="line">            jumpPressed &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Move()</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">        if (horizontal !&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.localScale &#x3D; new Vector3(horizontal, 1, 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Jump()</span><br><span class="line">    &#123;</span><br><span class="line">        if (jumpPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            jumpPressed &#x3D; false;</span><br><span class="line">            rb.velocity &#x3D; new Vector2(rb.velocity.x, jumpSpeed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void GroundCheck()</span><br><span class="line">    &#123;</span><br><span class="line">        isGround &#x3D; Physics2D.OverlapCircle(groundCheck.position, 0.5f, layerMask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个小知识，可以发现上面我把方法都抽取出来，然后再在 <code>FixedUpdate</code> 里面进行调用。</p><p>是否会多此一举？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    Move();</span><br><span class="line">    Jump();</span><br><span class="line">    GroundCheck();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到网上有人在讨论这个问题，正好思考了一下。</p><p>程序是堆栈调用，为了代码的美观而封装成单独的方法调用，岂不是增加了入栈和出栈的成本？</p><p>确实可能会有一些影响，但这里并不只是为了代码美观整洁才封装的。</p><p>之所以封装成单独的方法调用是因为可以节省内存。</p><p>如果把全部的代码写在一坨，那定义的一些临时变量就会占着内存不放。</p><p>只有函数执行结束的时候回收机制才会销毁函数内部的临时变量。</p><p>代码的美观整洁也是十分重要的，抽取方法还可以实现代码的复用。</p><p>为了以后方便维护，在觉得一些地方写的不够好的时候，我会回头优化一下，如有必要也会像现在这样直接推翻整个系统重来。</p><h2 id="手感调整"><a href="#手感调整" class="headerlink" title="手感调整"></a>手感调整</h2><p>现在虽然实现了角色控制系统，但是操作手感却很不好。</p><p>接下来就开始优化。</p><h3 id="重力系数"><a href="#重力系数" class="headerlink" title="重力系数"></a>重力系数</h3><p>因为重力太小的原因，角色跳跃看起来很“假”。</p><p>打开顶部的菜单 <code>Edit</code> 然后选择 <code>Project Settings</code> 进入游戏参数配置。</p><p>选中左侧的 <code>Physics 2D</code> 把 <code>Gravity</code> 的 y 值改成 -45.5，如下：</p><p><img src="https://i.loli.net/2021/05/05/PWCBsafOUnMbg86.jpg" alt="QQ20210505-094234.jpg"></p><p>然后再进入游戏场景测试：</p><p><img src="https://i.loli.net/2021/05/05/vcIY8dFeonqx1Sf.gif" alt="Kapture 2021-05-05 at 09.47.53.gif"></p><p>掉落的速度看起来好多了。</p><h3 id="不自然停止问题"><a href="#不自然停止问题" class="headerlink" title="不自然停止问题"></a>不自然停止问题</h3><p>角色跳跃的过程，如果立即放开水平移动键，就会像上图那样直接停止水平移动，看起来有些不自然。</p><p>如果要优化操作手感，应该给水平方向一些惯性，即使玩家松开按键，角色也会向前方保持减速运动直到停止，而不是立即停下来。</p><p>想要实现平滑过渡，将原来的 <code>GetAxisRaw</code> 改成 <code>GetAxis</code> 即可，前者返回 0、1、-1 三个数，而后者却返回 -1~1 的范围值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 原来的水平移动按键监听</span><br><span class="line">horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改之后</span><br><span class="line">horizontal &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br></pre></td></tr></table></figure><p>然后再修改 Move 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void Move()</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (horizontal &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的效果如下：</p><p><img src="https://i.loli.net/2021/05/05/RmaBeMxqQ3plJKk.gif" alt="Kapture 2021-05-05 at 09.58.03.gif"></p><p>虽然只是很细微的差别，但实际操作会感觉“丝滑”一些。</p><p>水平方向即使松开按键也会保持一小段减速，而不是直接停下来。</p><h3 id="弹起问题"><a href="#弹起问题" class="headerlink" title="弹起问题"></a>弹起问题</h3><p>角色落到地上，有一个软绵绵的弹起效果。</p><p>但这并不是我们需要的，在 unity 老版本中可以修改刚体的弹力，但是我用的是新版的 2021.1.5f1c1，在刚体上面已经找不到弹力设置项了。</p><p>这里需要修改碰撞检测类型，默认值是 <code>Discrete</code> （离散的），需要修改为 <code>Continuous</code>（连续的）：</p><p><img src="https://i.loli.net/2021/05/05/mCw1TkOal9UfhbI.jpg" alt="QQ20210505-101708.jpg"></p><p>然后再进入游戏测试：</p><p><img src="https://i.loli.net/2021/05/05/MOnekuH9oDQp2m6.gif" alt="Kapture 2021-05-05 at 10.21.56.gif"></p><p>现在角色已经站在“钢”做成的地板上了。</p><h3 id="卡住问题"><a href="#卡住问题" class="headerlink" title="卡住问题"></a>卡住问题</h3><p>当角色与刚体的侧边接触时，会出现卡住的情况：</p><p><img src="https://i.loli.net/2021/05/05/yTiMqgX5Y1VhzIc.gif" alt="Kapture 2021-05-05 at 10.24.03.gif"></p><p>这是因为 unity 的物理系统也模拟了摩擦力，所以角色与边缘接触时，会因为强大的摩擦力而被“吸住”。</p><p>只需要修改摩擦力就可以解决此问题。</p><p>在 <code>Assets</code> 新建一个 <code>Physic Material</code> 来保存物理材质。</p><p>然后右键打开菜单，选择 <code>2D</code>，然后再选择 <code>Physic Material 2D</code>，因为这个游戏是 2D 的，所以要选择 2D 的材质。</p><p><img src="https://i.loli.net/2021/05/05/oP59YgpvwZqCNB6.jpg" alt="QQ20210505-102756.jpg"></p><p>将材质文件命名为 Player，然后在右侧打开的属性中，将 <code>Friction</code>（摩擦力）设置为 0。</p><p><img src="https://i.loli.net/2021/05/05/CJNH1xpS9juiVW5.jpg" alt="QQ20210505-102843.jpg"></p><p>最后，点选场景中的角色，选中刚体组件，点击 <code>Material</code> 旁边的小圈，选择刚才创建好的材质：</p><p><img src="https://i.loli.net/2021/05/05/VLWBEymwSHpGeNl.jpg" alt="QQ20210505-103025.jpg"></p><p>测试效果：</p><p><img src="https://i.loli.net/2021/05/05/GI3S9fUlXMqApJg.gif" alt="Kapture 2021-05-05 at 10.33.05.gif"></p><p>加上材质的女主角已经变得十分“光滑”了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有时总想自己从零开始造轮子，但其实轮子别人已经造好了，直接用就可以了。</p><p>不应该执着于制作过程，而且学习 unity 提供的功能也是一种提升能力的办法。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（三）</title>
      <link href="2021/05/03/monster-game-3/"/>
      <url>2021/05/03/monster-game-3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇将会完成小游戏的跳跃动作以及场景、地面、障碍物的制作。</p><p>PS. 为了节省时间以后的文章可能不会贴代码，只讲实现原理。</p><h2 id="角色跳跃"><a href="#角色跳跃" class="headerlink" title="角色跳跃"></a>角色跳跃</h2><p>按下键盘的 w 键或者 上方向键可以让角色进行单段跳跃。</p><h3 id="动作实现"><a href="#动作实现" class="headerlink" title="动作实现"></a>动作实现</h3><p>因为我不是用物理组件来实现的，所以这里需要自己手动写跳跃的逻辑。</p><p>当玩家按下跳跃键时，给与角色一个 y 轴向上的速度即可，与控制角色移动的原理一样，演示效果：</p><p><img src="https://i.loli.net/2021/05/03/KWGH57lbJ2Ndyvk.gif" alt="Kapture 2021-05-03 at 21.45.07.gif"></p><p>角色“原地升天”！</p><h3 id="重力下降"><a href="#重力下降" class="headerlink" title="重力下降"></a>重力下降</h3><p>这样直接让角色升天可不行，必须受到重力让其下坠。</p><p>如果现实世界一样，当一个人跳起来的时候，受到重力影响 y 轴速度会不断降低，直到掉回地板，有地板的支撑才不会继续下坠。</p><p>所以只要让角色的 y 速度时刻都在减少即可实现重力效果，为了方便演示看到效果，初始 y 速度设置为 0，不然角色会直接掉下去：</p><p><img src="https://files.catbox.moe/ytcuyw.gif" alt="重力效果"></p><p>没有地板的支撑，所以会掉出屏幕外面。</p><h3 id="地板"><a href="#地板" class="headerlink" title="地板"></a>地板</h3><p>角色站在地板可以认为是碰撞事件，即角色和地板产生了碰撞（接触）。</p><p>给角色加上刚体组件和碰撞组件，同时地板也要加上碰撞组件，并且设置为触发器。</p><p>当角色与地板发生碰撞的时候，就给与角色一个“站在地板上”的状态。</p><p>当角色处于「站在地板上」状态的时候，不会受到重力影响而下坠，这样就可以让角色看起来像“站在地板上”了！</p><p>演示效果：</p><p><img src="https://files.catbox.moe/nlb9b2.gif" alt="站在地板"></p><p>角色从空中掉到地板的时候，虽然不再继续下降，但是又出现新的问题——人物“陷入”地板了。</p><p>出现这种情况是因为游戏是按帧渲染的，当一个物体处于高速运动状态的时候，一帧的位移很难正好处于碰撞物体的表面。</p><p>尽管我们在 <code>OnTriggerEnter2D</code> 触发器事件立即让碰撞物停止行动了，但还是无法避免这种情况。</p><h3 id="地板穿透问题"><a href="#地板穿透问题" class="headerlink" title="地板穿透问题"></a>地板穿透问题</h3><p>假设有一面墙壁，朝着墙壁发射子弹，不考虑物理效果，让子弹撞到墙的时候立即停止行动，在游戏里会出现下面这种情况：</p><p><img src="https://files.catbox.moe/oq6v9e.jpg" alt="子弹穿透墙壁示例"></p><p>这是因为子弹飞行的速度太快了，导致每一帧的位置变化非常大，刚好停在墙壁表面的情况几乎不可能出现。</p><p><img src="https://i.loli.net/2021/05/03/45mUqAGTtsO2Hn3.jpg" alt="QQ20210503-223707.jpg"></p><p>如上图所示，虽然保证每一帧的间隔时间相同，但是当子弹与墙壁碰撞的时候，子弹已经移动到墙壁里了。</p><p>这个时候让子弹停止行动也无法解决陷入的问题。</p><p>不过这个问题很容易解决，只要让角色与地板发生碰撞的时候，调整角色的坐标刚好站在地板上不就可以了！？</p><p>没错，改进原来的代码，让角色和地板接触的时候，改变主角的 y 坐标为地板上方，演示如下：</p><p><img src="https://files.catbox.moe/1q3bt7.gif" alt="碰撞时调整y坐标"></p><p>可以看到，虽然调整 y 坐标以后角色确实没有陷入地板，但问题也很明显，落到地板的一刹那出现了一个“幻影”。</p><p>因此，这并非最好的解决方法。</p><h3 id="解决穿透问题"><a href="#解决穿透问题" class="headerlink" title="解决穿透问题"></a>解决穿透问题</h3><p>高速运动的刚体穿透碰撞体是一件很常见的问题，网上的教程一般都是类似上面这样调整坐标或者回到前一帧的位置，但这样就会造成碰撞“抖动”现象，对游戏的操作体验和观感都不好。</p><p>有一个比较靠谱的方案就是「射线检测法」。</p><p>从枪口发射出来的子弹，同时会向前方发射一条射线用来探知前方的碰撞体。</p><p><img src="https://files.catbox.moe/cnptmj.jpg" alt="射线检测法"></p><p>当射线探知的前方有一面墙壁的时候，就可以提前告诉子弹墙壁表面的坐标，当子弹运动到这个坐标的时候，就不再继续前进了。</p><p>这样一来，子弹刚好接触到墙壁表面的位置就停下来了，而且因为接触到墙壁也与墙壁产生了碰撞事件，从而可以在碰撞回调方法进行逻辑处理。</p><p>但是角色跟子弹不一样，如果要用射线检测法，就要从上下左右 4 个方向进行检测，这样比较麻烦。</p><p>相反，从射线检测法得到灵感，我想到一个「探知领域」法：</p><p><img src="https://i.loli.net/2021/05/04/bvxtQGPwmkfeyru.jpg" alt="QQ20210504-125815.jpg"></p><p>角色的周围存在一个「探知领域」，这个领域是一个比角色本身的碰撞盒子稍微大一点的碰撞检测器，因为角色跳跃的时候，并不知道自己的落地点在哪，有可能跳到一个障碍物的上面，也可能落在地板上面，所以需要一个用来检测周围环境的探知领域，由于探知领域的面积比角色本身的碰撞体大，所以探知区域先与地板、障碍物触发碰撞事件，因此就可以提前通知角色的落地点了。</p><p>理论搞清楚了，就开始动手解决问题！</p><p><img src="https://i.loli.net/2021/05/04/ydf31DKcrOECZz5.jpg" alt="QQ20210504-130837.jpg"></p><p>创建一个空白对象，挂在 Player 节点下面，然后给对象加上 <code>Box Collider 2D</code> 碰撞体组件，宽高设置为比角色稍微大一点。</p><p>因为挂在 Player 节点，父节点本身就有刚体组件，所以探知领域不需要再添加刚体。</p><p>新建一个 Tag 命名为 <code>Detect</code>，赋予探知领域此 Tag，用来区分碰撞检测：</p><p><img src="https://i.loli.net/2021/05/04/hOPlt3X4TbinD9V.jpg" alt="QQ20210504-131020.jpg"></p><p>……未完待续。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>我发现如果自己来写这跳跃系统的话，工作量实在太大了。</p><p>折腾了一个下午，居然都在解决陷入地板的问题，但是如果直接使用 unity 的物理系统就不需要考虑这个问题。</p><p>然后又担心物理系统会让小游戏变得太“僵硬”，于是就去看了一些其他平台跳跃游戏的示例，结果发现他们全部都是基于物理系统的。</p><p>甚至包括蔚蓝这种操作手感顶尖的跳跃游戏，也可以用物理效果做出来。</p><p>最后我决定把控制角色的脚本用物理系统重写一遍，下文开始新篇章。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（二）</title>
      <link href="2021/05/03/monster-game-2/"/>
      <url>2021/05/03/monster-game-2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面一篇文章实现了控制角色移动，今天开始实现角色的攻击事件。</p><h2 id="攻击事件"><a href="#攻击事件" class="headerlink" title="攻击事件"></a>攻击事件</h2><p>玩家控制的小魔女可以发射「星之弹」攻击敌人。</p><p>这是子弹的特写：</p><p><img src="https://i.loli.net/2021/05/03/T34xrIR89U7YlXu.jpg" alt="QQ20210503-004833.jpg"></p><p>演示效果（图片加载比较慢）：</p><p><img src="https://files.catbox.moe/d1kake.gif" alt="子弹"></p><p>静帧图：</p><p><img src="https://files.catbox.moe/z7fu39.jpg" alt="子弹2"></p><p>大致就是从手中发射星星弹攻击敌人。</p><p>要实现角色发射子弹攻击，需要一连串的步骤，接下来就一步一步的进行说明。</p><h3 id="制作子弹"><a href="#制作子弹" class="headerlink" title="制作子弹"></a>制作子弹</h3><p>因为子弹是动态生成的，所以把子弹做成一个 prefab（预制体）。</p><p>放在 Resources/Prefabs/MiniGame 目录下备用，子弹还有很多种，这里就把星弹取名为：StarBullet。</p><p><img src="https://files.catbox.moe/2wcsfw.jpg" alt="子弹3"></p><h3 id="子弹发射口"><a href="#子弹发射口" class="headerlink" title="子弹发射口"></a>子弹发射口</h3><p>按下攻击键会发射子弹，按住攻击键会连续发射子弹。</p><p>首先创建一个子弹发射的位置，这是一个看不见的透明物体（标红位置）：</p><p><img src="https://files.catbox.moe/2033ns.jpg" alt="发射口"></p><p>这个发射口位于角色节点底下，这样就会跟随角色转向而改变位置。</p><h3 id="按键攻击"><a href="#按键攻击" class="headerlink" title="按键攻击"></a>按键攻击</h3><p>我们希望按下 <code>Z</code> 或 <code>J</code> 键来发射子弹，因此需要修改 unity 自带的按键指令：</p><p><img src="https://files.catbox.moe/u3rzlr.jpg" alt="修改按键"></p><p>找到 <code>Fire1</code>，别名需要指定两个按键，<code>negative button</code> 和 <code>postive button</code>，即消极的按钮和积极的按钮。</p><p>当按下消极的按钮时，<code>GetAxis</code> 的值就会逐渐趋向于 -1，即负向增加；</p><p>当按下积极按钮时，<code>GetAxis</code> 的值就会逐渐趋向于 1，即正向增加。</p><p>对于攻击指令，只要判定 <code>GetAxis</code> 不等于 0 即玩家正在按攻击键。</p><p>在 Player 脚本添加攻击按键监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void ShootEvent()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetAxisRaw(&quot;Fire1&quot;) !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;攻击&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    ShootEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在按下攻击键只是在控制台打印“攻击”两个字，接下来要生成上面的子弹。</p><h3 id="生成子弹"><a href="#生成子弹" class="headerlink" title="生成子弹"></a>生成子弹</h3><p>通过 <code>Resources</code> 方法动态加载预制体，然后再通过 <code>Instantiate</code> 生成游戏对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 <code>ShootEvent</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void ShootEvent()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetAxisRaw(&quot;Fire1&quot;) !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        CreateBullet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="https://files.catbox.moe/ob6aph.gif" alt="攻击1"></p><p>可以看到子弹好像“粘在”角色身上，这是因为指定了 <code>FirePoint</code> 作为子弹的父节点，而 <code>FirePoint</code> 又挂在 <code>Player</code> 下面，子节点肯定是随着父节点改变位置了。</p><p>解决方法就是把子弹添加到背景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 游戏场景</span><br><span class="line">protected GameObject bg;</span><br><span class="line"></span><br><span class="line">private void Awake()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; ... 找到背景对象</span><br><span class="line">    bg &#x3D; GameObject.Find(&quot;Background&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 生成子弹后，修改子弹的父节点为游戏场景（背景）</span><br><span class="line">    bulletObj.transform.SetParent(bg.transform);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后，再次测试效果：</p><p><img src="https://files.catbox.moe/h2q9qk.gif" alt="攻击2"></p><p>这回子弹的位置正常了，但又发现新的问题——可以看到角色移动时没有播放奔跑动画！</p><h3 id="动画丢失问题"><a href="#动画丢失问题" class="headerlink" title="动画丢失问题"></a>动画丢失问题</h3><p>这是因为 <code>MiniGame_Player</code> 脚本继承了 <code>MiniGame_Character</code>，而动画事件的监听是在父类，现在又在子类重写了 <code>Update</code> 方法，导致父类的动画监听事件没了。</p><p>解决方法就是把父类的 <code>Update</code> 声明为虚方法（virtual），访问修饰符为 <code>protected</code> 可以让子类调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected virtual void Update()</span><br><span class="line">&#123;</span><br><span class="line">    PlayAnimateListerner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改 Player 脚本的 Update 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected override void Update()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 调用父类的方法</span><br><span class="line">    base.Update();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 射击事件</span><br><span class="line">    ShootEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新测试一次：</p><p><img src="https://files.catbox.moe/6gpze2.gif" alt="攻击4"></p><p>我们的女主角终于能快乐的奔跑同时“划出许多星星”了……？！</p><h3 id="攻击频率"><a href="#攻击频率" class="headerlink" title="攻击频率"></a>攻击频率</h3><p>新的问题又出现了，按一下攻击键就生成那么多子弹，甚至造成了卡顿现象。</p><p>子弹的发射应该有限制，比如按住攻击键 0.25s 发射一颗，即存在「攻击间隔」，也可以理解为『攻击速度』。</p><p>原理与前一篇写的动画事件一样，就不再赘述了。</p><p>修改后的效果如下：</p><p><img src="https://files.catbox.moe/5a7utg.gif" alt="攻击5"></p><p>看起来像有频率的进行“划水”了。</p><h2 id="让子弹飞！"><a href="#让子弹飞！" class="headerlink" title="让子弹飞！"></a>让子弹飞！</h2><p>现在的攻击只是生出一颗子弹，但是这个子弹就像一张图片一样一动不动。</p><p>接下来要让子弹能够向前飞行。</p><h3 id="子弹基类"><a href="#子弹基类" class="headerlink" title="子弹基类"></a>子弹基类</h3><p>除了小魔女发射的「星弹」之外，敌人也会发射各种子弹。</p><p>子弹都有共通之处，所以现在新建一个子弹的基类 <code>MiniGame_Bullet</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Bullet : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float damage;</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public MiniGame_Character attacker;</span><br><span class="line"></span><br><span class="line">    protected abstract void MoveEvent();</span><br><span class="line"></span><br><span class="line">    protected void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MoveEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的子弹都有伤害值，以及攻击者，并且需要在子类实现子弹的移动逻辑。</p><p>将 attacker 字段设置为 public 方便赋值，同时再设置 <code>HideInInspector</code> 就可以让 attacker 字段不在属性面板显示了。</p><h3 id="起飞吧，子弹！"><a href="#起飞吧，子弹！" class="headerlink" title="起飞吧，子弹！"></a>起飞吧，子弹！</h3><p>新建一个星弹的脚本 <code>MiniGame_StarBullet</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_StarBullet : MiniGame_Bullet</span><br><span class="line">&#123;</span><br><span class="line">    public float speed;</span><br><span class="line">    private float direct;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        direct &#x3D; attacker.transform.localScale.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void MoveEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        var pos &#x3D; transform.position;</span><br><span class="line">        pos.x +&#x3D; speed * Time.deltaTime * direct;</span><br><span class="line"></span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>星弹的逻辑比较简单，根据玩家的朝向向前直线移动。</p><p>然后把脚本挂在星弹的预制体上，并且将子弹的速度设置为 1500，伤害值设置为 1。</p><p>然后再修改 Player 发射子弹的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line">    bulletObj.transform.SetParent(bg.transform);</span><br><span class="line"></span><br><span class="line">    MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">    bullet.attacker &#x3D; this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在发射子弹的时候，将 this 赋值给子弹的 attacker，这样这颗子弹的主人就是主角了。</p><p>然后打开调试场景测试效果：</p><p><img src="https://i.loli.net/2021/05/03/3iXnzk9oZtYsIeG.gif" alt="Kapture 2021-05-03 at 9.46.27.gif"></p><p>看起来已经没问题了，但是……新的问题果然又来了。</p><p>打开调试窗口可以发现，发射出去的子弹并没有消失，而是继续一直往前飞行，仍然残留在游戏内：</p><p><img src="https://i.loli.net/2021/05/03/4IegDpaqQmfJyEU.gif" alt="Kapture 2021-05-03 at 9.56.18.gif"></p><h2 id="子弹消失术"><a href="#子弹消失术" class="headerlink" title="子弹消失术"></a>子弹消失术</h2><p>不管玩家的电脑有多大的内存，也扛不住无限生成的子弹。</p><p>因此在达到某种条件的时候，应该让子弹“消失”。</p><h3 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h3><p>有几个方案：</p><ul><li>子弹创建 3 秒后自动销毁</li><li>子弹飞行距离达到某个值后自动销毁</li><li>子弹离开屏幕后消失</li></ul><p>第①个方法和第②个方法实际结果是差不多的。</p><p>因为子弹的飞行速度是恒定的，设定 3 秒后销毁子弹，那么子弹最终移动的距离就是固定的。</p><p>所以有两种方法让子弹消失：①根据飞行距离 ②判定子弹是否离开屏幕</p><p>如果子弹的飞行距离过短，玩家就必须贴脸输出，明明是远程攻击最后却还要拉近距离……</p><p>个人感觉体验不好，所以我决定用第二种方法，这也是大多数 FC 游戏的做法。</p><p><img src="https://files.catbox.moe/2odcjn.jpg" alt="场景示意图"></p><p>上图是玩家在游戏场景按键攻击的示意图，当子弹飞出屏幕外的时候，即要进行销毁。</p><p>常规方法是像这样在游戏场景外生成一片区域，子弹撞到这个区域就会自动销毁。</p><p><img src="https://i.loli.net/2021/05/03/ROuA597oyzKlmwf.jpg" alt="QQ20210503-102015.jpg"></p><p>但是还有一种反其道而行之的方法，即把碰撞检测区域放在游戏场景内，改成监听子弹离开这片区域。</p><p><img src="https://i.loli.net/2021/05/03/zhknjHylax47vU3.jpg" alt="QQ20210503-102429.jpg"></p><p>第二种方法更好，因为第一种方法碰撞检测区域不规则，需要监听的区域比较多，而且子弹的大小形态各异，如下图：</p><p><img src="https://i.loli.net/2021/05/03/vsYMqT4eRylfr2w.jpg" alt="QQ20210503-103608.jpg"></p><p>体积比较大的子弹比起体积小的子弹会提前碰到屏幕边缘而消失。</p><p>而且子弹还没离开场景就“不见”了看起来也会很奇怪。</p><p>所以这里采用第二种方法来实现。</p><h3 id="区域检测器"><a href="#区域检测器" class="headerlink" title="区域检测器"></a>区域检测器</h3><p>unity 中要实现碰撞检测，其中一方必须是“刚体”，且双方都必须包含碰撞体组件。</p><p>这里又面临着一个选择：①刚体组件挂在子弹上面 ②刚体组件挂在区域检测器和敌人身上</p><p>常规做法是选择①，因为正常的思路子弹才是“实体”，刚体属于物理组件，理论上应该挂在子弹上面，而区域检测器更像是“触发器”一类的东西。</p><p>这样的想法虽然没错，但是这里还是选择反其道而行之，选择②才是最优解。</p><p>因为子弹的数量理论上是无限的，频繁创建组件需要耗费性能，而且刚体组件耗费的性能十分感人，如果满屏幕的子弹都是刚体，那很可能会有强烈的卡顿现象。</p><p>把刚体加在子弹上面明显是不理智的选择，子弹只需要添加碰撞体并且设置为触发器即可。</p><p>而且碰撞检测事件只需要监听「区域检测器」和「敌人」，而不是监听每一颗子弹，这样游戏监听的事件数量就大大减少了。</p><blockquote><p>有时候这种反其道而行之的做法，在游戏开发中会有很大的帮助</p></blockquote><p>首先在游戏场景创建一个空白物体 SceneArea，分辨率设置为屏幕大小：1280 * 720。</p><p>然后给这个物体添加 <code>Rigidbody 2D</code> 组件（2D刚体），然后再添加 <code>Box Collider 2D</code> 组件（2D 盒型碰撞体）。</p><p>如图所示：</p><p><img src="https://i.loli.net/2021/05/03/1rHFbAJKi9EvaTc.jpg" alt="QQ20210503-155245.jpg"></p><p>这里的 <code>Body Type</code> 应该设置为 <code>Dynamic</code>（动态的）这样才能与触发器产生碰撞检测。</p><p>因此还需要修改刚体组件的 <code>Gravity Scale</code> 为 0，即让它不受重力影响。</p><p>不然开始测试的时候这个区域就会因为重力掉下去，导致测不出来。</p><p><code>Simulated</code> 默认是勾选的，此处保持勾选状态，此选项是设置刚体是否模拟物理效果，如果取消勾选则检测不出碰撞。</p><p>场景区域这样就设置完毕了，现在虽然可以产生碰撞，但是还未对碰撞事件做出处理。</p><p>新建脚本 <code>MiniGame_SceneArea</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_SceneArea : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private void OnTriggerExit2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(collision.gameObject.name + &quot;离开场景&quot;);</span><br><span class="line"></span><br><span class="line">        string tag &#x3D; collision.gameObject.tag;</span><br><span class="line"></span><br><span class="line">        switch (tag)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;Bullet&quot;:</span><br><span class="line">                BulletEvent(collision);</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Enemy&quot;:</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Item&quot;:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void BulletEvent(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(collision.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里监听 <code>OnTriggerExit2D</code> 事件，需要注意的是 unity 还有一个类似的碰撞检测事件 <code>OnCollisionExit</code>。</p><p><code>Trigger</code>（触发器） 和 <code>Collision</code>（碰撞体）的碰撞回调方法是不一样的。</p><p>因为我将子弹视为触发器，所以要用 <code>Trigger</code> 作为碰撞的回调方法，当子弹离开这个区域的时候就会触发 <code>OnTriggerExit2D</code> 回调。</p><p><code>OnTriggerExit2D</code> 回调方法会根据物体的 <code>tag</code>（标签）来判断物体属于哪种类型。</p><p>因为不仅仅是子弹会在离开屏幕时消失，道具、敌人之类的也会在离开视野范围内消除，所以这里设置通过标签来区分。</p><p>其实全部只要触发 <code>Destroy</code> 销毁事件即可，但是在这里区分物体的种类，还可以计算「物品搜集率」、「怪物击败率」等等，完美通关还能弄个成就什么的。</p><h3 id="设置子弹"><a href="#设置子弹" class="headerlink" title="设置子弹"></a>设置子弹</h3><p>接下来设置子弹，同样是给子弹加上一个碰撞体，这里选择圆形碰撞体 <code>Circle Collider 2D</code>，并且设置好半径，然后把 <code>Is Trigger</code> 勾选。</p><p><img src="https://i.loli.net/2021/05/03/m75TWwFX9c3Ci2f.jpg" alt="QQ20210503-153200.jpg"></p><p>然后点击属性面板 <code>Inspector</code> 顶部的 <code>Tag</code>，新增一个 <code>Bullet</code> 标签，然后将子弹设置为该标签。</p><p><img src="https://i.loli.net/2021/05/03/WjCBiDguzGR72My.jpg" alt="QQ20210503-155517.jpg"></p><p>接下来修改调试场景的配置，场景像素配置修改为 <code>Free Aspect</code>，再把 <code>Maximize On Play</code>（最大化）点亮。</p><p><img src="https://i.loli.net/2021/05/03/xFUiO4JTQPWncEz.jpg" alt="QQ20210503-160354.jpg"></p><p>这样就可以看到屏幕摄像机拍不到的地方了，然后进入调试场景测试：</p><p><img src="https://i.loli.net/2021/05/03/1dzFQIGHKsuYgZT.gif" alt="Kapture 2021-05-03 at 16.04.59.gif"></p><p>可以看到子弹离开游戏区域（深色）时就会被自动销毁了。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（一）</title>
      <link href="2021/05/02/monster-game-1/"/>
      <url>2021/05/02/monster-game-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>短篇 AVG 游戏的流程已经差不多了，现在就差 cee 把游戏要用的素材提供给我，最后再导入测试就基本完成了。</p><p>所以趁这个时间，我打算把原来在 cocos creator 引擎上《名为怪物的游戏》制作进度移植到 unity 引擎。</p><p>同时花了一晚上的时间把火兔游戏的官网重建成这样一个博客，后续将会以博文的方式直播制作过程或者发布游戏预告。</p><p>（直播制作过程主要是为了防鸽……）</p><h2 id="移植原因"><a href="#移植原因" class="headerlink" title="移植原因"></a>移植原因</h2><p>首先我很喜欢 cocos creator 引擎，不仅是因为国人制作的，而且上手简单。</p><p>在制作了游戏的序章之后，发现 cocos creator 不能满足我们的要求，因为我们打算发布的是 PC 端，<br>而 cocos creator 主打移动游戏，比方说在游戏内调节分辨率 cocos 就不支持，还有因为 JavaScript<br>对文件读写什么的也有限制，要解决这些问题估计得花很多时间，但对于我们来说可以游刃有余的时间并不多了，<br>所以选择对单机游戏支持比较友好的 unity。</p><h2 id="星之魔女"><a href="#星之魔女" class="headerlink" title="星之魔女"></a>星之魔女</h2><p>星之魔女是《名为怪物的游戏》中的一个怀旧向像素风 FC 游戏。</p><p>使用 cocos creator 引擎开发的画面：<a href="https://www.bilibili.com/video/BV167411L7vJ/">https://www.bilibili.com/video/BV167411L7vJ/</a></p><iframe src="//player.bilibili.com/player.html?aid=89983856&bvid=BV167411L7vJ&cid=153683294&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="移植过程"><a href="#移植过程" class="headerlink" title="移植过程"></a>移植过程</h2><p>文章会包含制作过程的技术相关内容，如果有兴趣的小伙伴可以了解一下。</p><h3 id="素材导入"><a href="#素材导入" class="headerlink" title="素材导入"></a>素材导入</h3><p>由于之前小游戏已经做完了，所以素材可以直接导入。</p><p>像素风的序列帧：</p><p><img src="https://i.loli.net/2021/05/02/ZjeiXxRbSLBlHG7.jpg" alt="QQ20210502-214701.jpg"></p><h3 id="场景配置"><a href="#场景配置" class="headerlink" title="场景配置"></a>场景配置</h3><p>新建一个 1280 * 720 的场景。</p><p><img src="https://i.loli.net/2021/05/02/94OvjVgNtaY1HFG.jpg" alt="QQ20210502-214837.jpg"></p><h3 id="让角色动起来"><a href="#让角色动起来" class="headerlink" title="让角色动起来"></a>让角色动起来</h3><p>现在场景有了，但角色只是一张静态图片，要让角色可以通过按键移动，就要开始编写角色控制脚本了。</p><p>新建名为 <code>MiniGame_MoveEvent</code> 的脚本，用来控制角色移动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_MoveEvent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 500f;</span><br><span class="line"></span><br><span class="line">    private Vector3 left &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    private Vector3 right &#x3D; new Vector3(1, 1, 1);</span><br><span class="line"></span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))</span><br><span class="line">        &#123;</span><br><span class="line">            gameObject.transform.localScale &#x3D; left;</span><br><span class="line">            transform.Translate(Vector3.left * Time.deltaTime * speed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))</span><br><span class="line">        &#123;</span><br><span class="line">            gameObject.transform.localScale &#x3D; right;</span><br><span class="line">            transform.Translate(Vector3.right * Time.deltaTime * speed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 unity 中加载游戏会加载所有脚本，所以脚本的名字加上 <code>MiniGame_</code> 来区分。</p><p>为了让角色的朝向也能改变，在按下移动键的时候，顺便改变图片的翻转。</p><p>这里可以使用 WASD 来控制移动，也可以用方向键控制移动，目前只有左右移动，把这个脚本挂在 Player 对象上即可用键盘控制角色了：</p><p><img src="https://i.loli.net/2021/05/02/ZC73l8bPK6TiDho.gif" alt="Kapture 2021-05-02 at 21.54.23.gif"></p><p>实现角色移动还可以直接用 unity 自带的物理引擎，碰撞检测阻止移动就比较方便，但是我这里选择自己写脚本逻辑，因为 FC 游戏里的一些操作是不符合物理规律的。</p><h3 id="角色小动作"><a href="#角色小动作" class="headerlink" title="角色小动作"></a>角色小动作</h3><p>现在角色能动起来了，但是看起来就是在移动一张图片，没有游戏的感觉。</p><p>为了让角色变得“生动”，就要给角色加上动画演出效果。</p><p>unity 内置了动画系统，但是我这里也选择自己写脚本来控制。</p><p>新建一个名为 <code>MiniGame_Character</code> 的抽象类，因为不仅主角可以播放动画，敌人也有动画效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Character : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Sprite[] idle;</span><br><span class="line">    public Sprite[] hurt;</span><br><span class="line">    public Sprite[] attack;</span><br><span class="line">    public Sprite[] run;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 是否循环播放动画</span><br><span class="line">    private bool animateLoop;</span><br><span class="line">    &#x2F;&#x2F; 当前播放的动画</span><br><span class="line">    private string currentAnimate;</span><br><span class="line">    &#x2F;&#x2F; 当前动画index</span><br><span class="line">    private int animateIndex;</span><br><span class="line">    &#x2F;&#x2F; 当前动画精灵</span><br><span class="line">    public Sprite[] currentAnimateSprites;</span><br><span class="line">    &#x2F;&#x2F; 人物行走图</span><br><span class="line">    private Image character;</span><br><span class="line">    &#x2F;&#x2F; 动画播放间隔</span><br><span class="line">    private float animateInterval;</span><br><span class="line">    &#x2F;&#x2F; 当前时间</span><br><span class="line">    private float time;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        character &#x3D; GetComponent&lt;Image&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 死亡回调</span><br><span class="line">    protected abstract void DeadCallback();</span><br><span class="line"></span><br><span class="line">    public void SetAnimate(string animate)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 不播放重复动画</span><br><span class="line">        if (currentAnimate &#x3D;&#x3D; animate)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Debug.Log(&quot;切换动画：&quot; + animate);</span><br><span class="line"></span><br><span class="line">        currentAnimate &#x3D; animate;</span><br><span class="line">        animateIndex &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        switch (animate)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;idle&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                animateInterval &#x3D; 0.1f;</span><br><span class="line">                currentAnimateSprites &#x3D; idle;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;run&quot;:</span><br><span class="line">                animateLoop &#x3D; true;</span><br><span class="line">                animateInterval &#x3D; 0.1f;</span><br><span class="line">                currentAnimateSprites &#x3D; run;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;attack&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                currentAnimateSprites &#x3D; attack;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;hurt&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                currentAnimateSprites &#x3D; hurt;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void PlayAnimateListerner()</span><br><span class="line">    &#123;</span><br><span class="line">        if (animateLoop &#x3D;&#x3D; false &amp;&amp; animateIndex &gt; currentAnimateSprites.Length - 1)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Time.time &lt; time)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 时间自增</span><br><span class="line">        time &#x3D; Time.time + animateInterval;</span><br><span class="line"></span><br><span class="line">        if (animateLoop &#x3D;&#x3D; true)</span><br><span class="line">        &#123;</span><br><span class="line">            if (animateIndex &gt; currentAnimate.Length - 1)</span><br><span class="line">            &#123;</span><br><span class="line">                animateIndex &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        character.sprite &#x3D; currentAnimateSprites[animateIndex];</span><br><span class="line">        animateIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        PlayAnimateListerner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再新建一个用于玩家控制角色的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MiniGame_Character</span><br><span class="line">&#123;</span><br><span class="line">    protected override void DeadCallback()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO 进入GameOver场景</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画的播放逻辑很简单，就是循环播放图片，以下是主角的序列帧行走图：</p><p><img src="https://i.loli.net/2021/05/02/23e9XzWpJdjHBIw.jpg" alt="QQ20210502-220534.jpg"></p><p>跟制作动画的原理一样，就是以肉眼难以辨别的速度播放细微不同的图片，所以看起来像“动起来”一样。</p><p>为了间隔一定时间播放一张图片，这里用了一个计时器，定义下一个切换图片的时间点，比如 0.1 秒以后，如果当前时间等于 0.1 秒后，就播放下一张图片，然后切换图片的时间点等于当前时间加上 0.1s。</p><p>如果是循环播放类的图片，在图片全部播完之后，就会从第一张开始继续播放，如果是不循环的动画，就停止继续播放。</p><p>声明一个公开的方法 <code>SetAnimate</code>，只要传入要播放的动画，就会自动配置对应的参数，比如当前播放的图片数组和是否循环播放以及播放间隔。</p><p>这里要加一个判断，防止重复播放相同的动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (currentAnimate &#x3D;&#x3D; animate)</span><br><span class="line">&#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前已经在播这个动画了，再调用这个方法就直接返回。</p><p>抽象父类还定义了一个 <code>DeadCallback</code> 死亡回调方法，即当目标死亡时会做什么事情。</p><p>玩家死亡了就是 Gamover，敌人死亡了就爆金币。</p><p>现在先来做基本的动画：待机小动作和跑步动作。</p><p>要播放动画就调用 <code>SetAnimate</code> 方法，在 <code>MiniGame_Character</code> 加入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    SetAnimate(&quot;idle&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样角色在进入场景的时候，就会自动播放待机动画。</p><p>把 <code>MiniGame_Character</code> 脚本挂在场景的 Player 节点，并且在脚本组件上把待机动画图拖进去：</p><p><img src="https://i.loli.net/2021/05/02/IrwmhDUNsGRy8vl.jpg" alt="QQ20210502-221735.jpg"></p><p>进入场景就可以看到效果了：</p><p><img src="https://i.loli.net/2021/05/02/ytqZiRHB5nG6k98.gif" alt="Kapture 2021-05-02 at 22.19.09.gif"></p><p>一个简单的眨眼小动作！</p><p>同理要让角色有奔跑动画只需要在 <code>MiniGame_MoveEvent</code> 控制角色移动的时候播放动画即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;run&quot;);</span><br><span class="line">        gameObject.transform.localScale &#x3D; left;</span><br><span class="line">        transform.Translate(Vector3.left * Time.deltaTime * speed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;run&quot;);</span><br><span class="line">        gameObject.transform.localScale &#x3D; right;</span><br><span class="line">        transform.Translate(Vector3.right * Time.deltaTime * speed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断松开按键</span><br><span class="line">    if (Input.GetKeyUp(KeyCode.A) || Input.GetKeyUp(KeyCode.LeftArrow) ||</span><br><span class="line">        Input.GetKeyUp(KeyCode.D) || Input.GetKeyUp(KeyCode.RightArrow)</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;idle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还要判断当键盘松开的时候，要改成待机动画。</p><p>然后把奔跑的动画素材也拖到脚本组件上，演示效果：</p><p><img src="https://i.loli.net/2021/05/02/hvgxd8Y3pkworau.gif" alt="Kapture 2021-05-02 at 22.26.16.gif"></p><h3 id="小问题修正"><a href="#小问题修正" class="headerlink" title="小问题修正"></a>小问题修正</h3><p>这里其实还存在一个小问题，就是当按键和弹起的一瞬间，有几率出现判定失误，<code>GetKey</code> 方法是监听按键，不管是弹起还是按下都会触发，而 <code>GetKeyUp</code> 则是监听弹起事件，因此会存在监听到弹起事件的一瞬间同时也被判定为按下的情况，导致人物虽然停止移动了，但是奔跑动画却还在播放的情况。</p><p>除此之外，还有一个比较特殊的情况，就是如果玩家同时按下左方向和右方向，这样也会变得很奇怪。</p><p>为了修正上述两个问题，重新修改 <code>MiniGame_MoveEvent</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_MoveEvent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 400f;</span><br><span class="line"></span><br><span class="line">    private MiniGame_Player player;</span><br><span class="line"></span><br><span class="line">    private Vector3 left &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    private Vector3 right &#x3D; new Vector3(1, 1, 1);</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        player &#x3D; GetComponent&lt;MiniGame_Player&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        float raw &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">        float moveSpeed &#x3D; raw * Time.deltaTime * speed;</span><br><span class="line"></span><br><span class="line">        var pos &#x3D; transform.position;</span><br><span class="line">        pos.x +&#x3D; moveSpeed;</span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line"></span><br><span class="line">        if (raw &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;run&quot;);</span><br><span class="line">            gameObject.transform.localScale &#x3D; left;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (raw &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;run&quot;);</span><br><span class="line">            gameObject.transform.localScale &#x3D; right;</span><br><span class="line">        &#125; else</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;idle&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听按键的方法改成 <code>GetAxis</code>，这个方法会返回 -1~1的浮点数，</p><p><code>Horizontal</code> 是 unity 内置的常量，对应水平方向相关的按键，即左右方向键和 WASD。</p><p>所有的常量及对应的按键参数可以在构建游戏时，Player Settings 里查看：</p><p><img src="https://i.loli.net/2021/05/03/P4FR6JSWa3giLmK.jpg" alt="QQ20210503-002740.jpg"></p><p>这些常量有一个好处就是可以支持手柄操作。</p><p>因为 <code>GetAxis</code> 会返回一个范围值，而且是渐进式的增加，这样还可以让角色有一个起跑短暂加速的感觉，在松开按键的时候，也会有缓冲减速效果。</p><p>修改后的演示效果：</p><p><img src="https://i.loli.net/2021/05/02/jUuVS9l6sPQzTO2.gif" alt="Kapture 2021-05-02 at 23.17.15.gif"></p><p>另外，unity 还有一个 <code>GetAxisRaw</code> 方法，类似 <code>GetAxis</code>，但是它只会返回三个值：-1、0、1。</p><p>如果使用 <code>GetAxisRaw</code> 方法，就没有平滑起跑的效果了，而是直接以最大的速度奔跑，改成 <code>GetAxisRaw</code> 后的演示效果如下：</p><p><img src="https://i.loli.net/2021/05/02/agpb3rl1ihWxLo7.gif" alt="Kapture 2021-05-02 at 23.20.22.gif"></p><p>两种效果都各有好坏，有缓冲效果感觉更加笨重，但是比较真实，以最大速度起跑操作体验更好。</p><p>这里我就采用直接最大速度开始奔跑的方案，另外，如果同时按下左右方向键，则行动会立即停止，不会因为同时按而产生奇奇怪怪的结果了。</p><p>而动画是根据按压的 raw 返回值来判断的，也就不会出现行动停止奔跑动画还在继续的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于火兔游戏工作室</title>
      <link href="2021/05/01/welcome/"/>
      <url>2021/05/01/welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="关于火兔游戏工作室"><a href="#关于火兔游戏工作室" class="headerlink" title="关于火兔游戏工作室"></a>关于火兔游戏工作室</h1><h2 id="成员组成"><a href="#成员组成" class="headerlink" title="成员组成"></a>成员组成</h2><p>火兔游戏工作室目前由两个人组成：我（火烧兔子）和 Cee。</p><p>我主要负责游戏的程序，Cee 主要负责游戏的美工以及剧本的主线剧情。</p><h2 id="游戏作品"><a href="#游戏作品" class="headerlink" title="游戏作品"></a>游戏作品</h2><p>我们联合制作的第一部作品是「月之幻想」，记得当时只用了一个月的时间就完成 Demo 版，但最后很遗憾还是没有做到完结。</p><p>我个人的作品还有：</p><ul><li>【短篇AVG】路人甲的故事</li><li>【网页版】魔王传说系列：第三弹（已下线）</li><li>【RPG】魔王传说系列：第一弹及第二弹</li><li>【RPG】宠物战记</li><li>【RPG】冒险物语</li><li>【RPG】黑暗刻印</li></ul><h2 id="新作预告"><a href="#新作预告" class="headerlink" title="新作预告"></a>新作预告</h2><p>目前正在制作一部短篇 AVG，已经快完成了，近期之内应该就会发布。</p><p>以及原创长篇 RPG ——「名为怪物的游戏」。</p><p>由于种种原因导致进度停滞不前，现在开始重新计划中，等到现在制作的 AVG 完成就可以开始了。</p>]]></content>
      
      
      <categories>
          
          <category> 非游戏分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
