<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（二）</title>
      <link href="2021/05/03/monster-game-2/"/>
      <url>2021/05/03/monster-game-2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面一篇文章实现了控制角色移动，今天开始实现角色的攻击事件。</p><h2 id="攻击事件"><a href="#攻击事件" class="headerlink" title="攻击事件"></a>攻击事件</h2><p>玩家控制的小魔女可以发射「星之弹」攻击敌人。</p><p>这是子弹的特写：</p><p><img src="https://i.loli.net/2021/05/03/T34xrIR89U7YlXu.jpg" alt="QQ20210503-004833.jpg"></p><p>演示效果（图片加载比较慢）：</p><p><img src="https://files.catbox.moe/d1kake.gif" alt="子弹"></p><p>静帧图：</p><p><img src="https://files.catbox.moe/z7fu39.jpg" alt="子弹2"></p><p>大致就是从手中发射星星弹攻击敌人。</p><p>要实现角色发射子弹攻击，需要一连串的步骤，接下来就一步一步的进行说明。</p><h3 id="制作子弹"><a href="#制作子弹" class="headerlink" title="制作子弹"></a>制作子弹</h3><p>因为子弹是动态生成的，所以把子弹做成一个 prefab（预制体）。</p><p>放在 Resources/Prefabs/MiniGame 目录下备用，子弹还有很多种，这里就把星弹取名为：StarBullet。</p><p><img src="https://files.catbox.moe/2wcsfw.jpg" alt="子弹3"></p><h3 id="子弹发射口"><a href="#子弹发射口" class="headerlink" title="子弹发射口"></a>子弹发射口</h3><p>按下攻击键会发射子弹，按住攻击键会连续发射子弹。</p><p>首先创建一个子弹发射的位置，这是一个看不见的透明物体（标红位置）：</p><p><img src="https://files.catbox.moe/2033ns.jpg" alt="发射口"></p><p>这个发射口位于角色节点底下，这样就会跟随角色转向而改变位置。</p><h3 id="按键攻击"><a href="#按键攻击" class="headerlink" title="按键攻击"></a>按键攻击</h3><p>我们希望按下 <code>Z</code> 或 <code>J</code> 键来发射子弹，因此需要修改 unity 自带的按键指令：</p><p><img src="https://files.catbox.moe/u3rzlr.jpg" alt="修改按键"></p><p>找到 <code>Fire1</code>，别名需要指定两个按键，<code>negative button</code> 和 <code>postive button</code>，即消极的按钮和积极的按钮。</p><p>当按下消极的按钮时，<code>GetAxis</code> 的值就会逐渐趋向于 -1，即负向增加；</p><p>当按下积极按钮时，<code>GetAxis</code> 的值就会逐渐趋向于 1，即正向增加。</p><p>对于攻击指令，只要判定 <code>GetAxis</code> 不等于 0 即玩家正在按攻击键。</p><p>在 Player 脚本添加攻击按键监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void ShootEvent()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetAxisRaw(&quot;Fire1&quot;) !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;攻击&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    ShootEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在按下攻击键只是在控制台打印“攻击”两个字，接下来要生成上面的子弹。</p><h3 id="生成子弹"><a href="#生成子弹" class="headerlink" title="生成子弹"></a>生成子弹</h3><p>通过 <code>Resources</code> 方法动态加载预制体，然后再通过 <code>Instantiate</code> 生成游戏对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 <code>ShootEvent</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void ShootEvent()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetAxisRaw(&quot;Fire1&quot;) !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        CreateBullet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="https://files.catbox.moe/ob6aph.gif" alt="攻击1"></p><p>可以看到子弹好像“粘在”角色身上，这是因为指定了 <code>FirePoint</code> 作为子弹的父节点，而 <code>FirePoint</code> 又挂在 <code>Player</code> 下面，子节点肯定是随着父节点改变位置了。</p><p>解决方法就是把子弹添加到背景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 游戏场景</span><br><span class="line">protected GameObject bg;</span><br><span class="line"></span><br><span class="line">private void Awake()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; ... 找到背景对象</span><br><span class="line">    bg &#x3D; GameObject.Find(&quot;Background&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 生成子弹后，修改子弹的父节点为游戏场景（背景）</span><br><span class="line">    bulletObj.transform.SetParent(bg.transform);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后，再次测试效果：</p><p><img src="https://files.catbox.moe/h2q9qk.gif" alt="攻击2"></p><p>这回子弹的位置正常了，但又发现新的问题——可以看到角色移动时没有播放奔跑动画！</p><h3 id="动画丢失问题"><a href="#动画丢失问题" class="headerlink" title="动画丢失问题"></a>动画丢失问题</h3><p>这是因为 <code>MiniGame_Player</code> 脚本继承了 <code>MiniGame_Character</code>，而动画事件的监听是在父类，现在又在子类重写了 <code>Update</code> 方法，导致父类的动画监听事件没了。</p><p>解决方法就是把父类的 <code>Update</code> 声明为虚方法（virtual），访问修饰符为 <code>protected</code> 可以让子类调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected virtual void Update()</span><br><span class="line">&#123;</span><br><span class="line">    PlayAnimateListerner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改 Player 脚本的 Update 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected override void Update()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 调用父类的方法</span><br><span class="line">    base.Update();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 射击事件</span><br><span class="line">    ShootEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新测试一次：</p><p><img src="https://files.catbox.moe/6gpze2.gif" alt="攻击4"></p><p>我们的女主角终于能快乐的奔跑同时“划出许多星星”了……？！</p><h3 id="攻击频率"><a href="#攻击频率" class="headerlink" title="攻击频率"></a>攻击频率</h3><p>新的问题又出现了，按一下攻击键就生成那么多子弹，甚至造成了卡顿现象。</p><p>子弹的发射应该有限制，比如按住攻击键 0.25s 发射一颗，即存在「攻击间隔」，也可以理解为『攻击速度』。</p><p>原理与前一篇写的动画事件一样，就不再赘述了。</p><p>修改后的效果如下：</p><p><img src="https://files.catbox.moe/5a7utg.gif" alt="攻击5"></p><p>看起来像有频率的进行“划水”了。</p><h2 id="让子弹飞！"><a href="#让子弹飞！" class="headerlink" title="让子弹飞！"></a>让子弹飞！</h2><p>现在的攻击只是生出一颗子弹，但是这个子弹就像一张图片一样一动不动。</p><p>接下来要让子弹能够向前飞行。</p><h3 id="子弹基类"><a href="#子弹基类" class="headerlink" title="子弹基类"></a>子弹基类</h3><p>除了小魔女发射的「星弹」之外，敌人也会发射各种子弹。</p><p>子弹都有共通之处，所以现在新建一个子弹的基类 <code>MiniGame_Bullet</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Bullet : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float damage;</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public MiniGame_Character attacker;</span><br><span class="line"></span><br><span class="line">    protected abstract void MoveEvent();</span><br><span class="line"></span><br><span class="line">    protected void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MoveEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的子弹都有伤害值，以及攻击者，并且需要在子类实现子弹的移动逻辑。</p><p>将 attacker 字段设置为 public 方便赋值，同时再设置 <code>HideInInspector</code> 就可以让 attacker 字段不在属性面板显示了。</p><h3 id="起飞吧，子弹！"><a href="#起飞吧，子弹！" class="headerlink" title="起飞吧，子弹！"></a>起飞吧，子弹！</h3><p>新建一个星弹的脚本 <code>MiniGame_StarBullet</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_StarBullet : MiniGame_Bullet</span><br><span class="line">&#123;</span><br><span class="line">    public float speed;</span><br><span class="line">    private float direct;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        direct &#x3D; attacker.transform.localScale.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void MoveEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        var pos &#x3D; transform.position;</span><br><span class="line">        pos.x +&#x3D; speed * Time.deltaTime * direct;</span><br><span class="line"></span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>星弹的逻辑比较简单，根据玩家的朝向向前直线移动。</p><p>然后把脚本挂在星弹的预制体上，并且将子弹的速度设置为 1500，伤害值设置为 1。</p><p>然后再修改 Player 发射子弹的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line">    bulletObj.transform.SetParent(bg.transform);</span><br><span class="line"></span><br><span class="line">    MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">    bullet.attacker &#x3D; this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在发射子弹的时候，将 this 赋值给子弹的 attacker，这样这颗子弹的主人就是主角了。</p><p>然后打开调试场景测试效果：</p><p><img src="https://i.loli.net/2021/05/03/3iXnzk9oZtYsIeG.gif" alt="Kapture 2021-05-03 at 9.46.27.gif"></p><p>看起来已经没问题了，但是……新的问题果然又来了。</p><p>打开调试窗口可以发现，发射出去的子弹并没有消失，而是继续一直往前飞行，仍然残留在游戏内：</p><p><img src="https://i.loli.net/2021/05/03/4IegDpaqQmfJyEU.gif" alt="Kapture 2021-05-03 at 9.56.18.gif"></p><h2 id="子弹消失术"><a href="#子弹消失术" class="headerlink" title="子弹消失术"></a>子弹消失术</h2><p>不管玩家的电脑有多大的内存，也扛不住无限生成的子弹。</p><p>因此在达到某种条件的时候，应该让子弹“消失”。</p><h3 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h3><p>有几个方案：</p><ul><li>子弹创建 3 秒后自动销毁</li><li>子弹飞行距离达到某个值后自动销毁</li><li>子弹离开屏幕后消失</li></ul><p>第①个方法和第②个方法实际结果是差不多的。</p><p>因为子弹的飞行速度是恒定的，设定 3 秒后销毁子弹，那么子弹最终移动的距离就是固定的。</p><p>所以有两种方法让子弹消失：①根据飞行距离 ②判定子弹是否离开屏幕</p><p>如果子弹的飞行距离过短，玩家就必须贴脸输出，明明是远程攻击最后却还要拉近距离……</p><p>个人感觉体验不好，所以我决定用第二种方法，这也是大多数 FC 游戏的做法。</p><p><img src="https://files.catbox.moe/2odcjn.jpg" alt="场景示意图"></p><p>上图是玩家在游戏场景按键攻击的示意图，当子弹飞出屏幕外的时候，即要进行销毁。</p><p>常规方法是像这样在游戏场景外生成一片区域，子弹撞到这个区域就会自动销毁。</p><p><img src="https://i.loli.net/2021/05/03/ROuA597oyzKlmwf.jpg" alt="QQ20210503-102015.jpg"></p><p>但是还有一种反其道而行之的方法，即把碰撞检测区域放在游戏场景内，改成监听子弹离开这片区域。</p><p><img src="https://i.loli.net/2021/05/03/zhknjHylax47vU3.jpg" alt="QQ20210503-102429.jpg"></p><p>第二种方法更好，因为第一种方法碰撞检测区域不规则，需要监听的区域比较多，而且子弹的大小形态各异，如下图：</p><p><img src="https://i.loli.net/2021/05/03/vsYMqT4eRylfr2w.jpg" alt="QQ20210503-103608.jpg"></p><p>体积比较大的子弹比起体积小的子弹会提前碰到屏幕边缘而消失。</p><p>而且子弹还没离开场景就“不见”了看起来也会很奇怪。</p><p>所以这里采用第二种方法来实现。</p><h3 id="区域检测器"><a href="#区域检测器" class="headerlink" title="区域检测器"></a>区域检测器</h3><p>unity 中要实现碰撞检测，其中一方必须是“刚体”，且双方都必须包含碰撞体组件。</p><p>这里又面临着一个选择：①刚体组件挂在子弹上面 ②刚体组件挂在区域检测器和敌人身上</p><p>常规做法是选择①，因为正常的思路子弹才是“实体”，刚体属于物理组件，理论上应该挂在子弹上面，而区域检测器更像是“触发器”一类的东西。</p><p>这样的想法虽然没错，但是这里还是选择反其道而行之，选择②才是最优解。</p><p>因为子弹的数量理论上是无限的，频繁创建组件需要耗费性能，而且刚体组件耗费的性能十分感人，如果满屏幕的子弹都是刚体，那很可能会有强烈的卡顿现象。</p><p>把刚体加在子弹上面明显是不理智的选择，子弹只需要添加碰撞体并且设置为触发器即可。</p><p>而且碰撞检测事件只需要监听「区域检测器」和「敌人」，而不是监听每一颗子弹，这样游戏监听的事件数量就大大减少了。</p><blockquote><p>有时候这种反其道而行之的做法，在游戏开发中会有很大的帮助</p></blockquote><p>首先在游戏场景创建一个空白物体 SceneArea，分辨率设置为屏幕大小：1280 * 720。</p><p>然后给这个物体添加 <code>Rigidbody 2D</code> 组件（2D刚体），然后再添加 <code>Box Collider 2D</code> 组件（2D 盒型碰撞体）。</p><p>如图所示：</p><p><img src="https://i.loli.net/2021/05/03/1rHFbAJKi9EvaTc.jpg" alt="QQ20210503-155245.jpg"></p><p>这里的 <code>Body Type</code> 应该设置为 <code>Dynamic</code>（动态的）这样才能与触发器产生碰撞检测。</p><p>因此还需要修改刚体组件的 <code>Gravity Scale</code> 为 0，即让它不受重力影响。</p><p>不然开始测试的时候这个区域就会因为重力掉下去，导致测不出来。</p><p><code>Simulated</code> 默认是勾选的，此处保持勾选状态，此选项是设置刚体是否模拟物理效果，如果取消勾选则检测不出碰撞。</p><p>场景区域这样就设置完毕了，现在虽然可以产生碰撞，但是还未对碰撞事件做出处理。</p><p>新建脚本 <code>MiniGame_SceneArea</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_SceneArea : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private void OnTriggerExit2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(collision.gameObject.name + &quot;离开场景&quot;);</span><br><span class="line"></span><br><span class="line">        string tag &#x3D; collision.gameObject.tag;</span><br><span class="line"></span><br><span class="line">        switch (tag)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;Bullet&quot;:</span><br><span class="line">                BulletEvent(collision);</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Enemy&quot;:</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Item&quot;:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void BulletEvent(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(collision.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里监听 <code>OnTriggerExit2D</code> 事件，需要注意的是 unity 还有一个类似的碰撞检测事件 <code>OnCollisionExit</code>。</p><p><code>Trigger</code>（触发器） 和 <code>Collision</code>（碰撞体）的碰撞回调方法是不一样的。</p><p>因为我将子弹视为触发器，所以要用 <code>Trigger</code> 作为碰撞的回调方法，当子弹离开这个区域的时候就会触发 <code>OnTriggerExit2D</code> 回调。</p><p><code>OnTriggerExit2D</code> 回调方法会根据物体的 <code>tag</code>（标签）来判断物体属于哪种类型。</p><p>因为不仅仅是子弹会在离开屏幕时消失，道具、敌人之类的也会在离开视野范围内消除，所以这里设置通过标签来区分。</p><p>其实全部只要触发 <code>Destroy</code> 销毁事件即可，但是在这里区分物体的种类，还可以计算「物品搜集率」、「怪物击败率」等等，完美通关还能弄个成就什么的。</p><h3 id="设置子弹"><a href="#设置子弹" class="headerlink" title="设置子弹"></a>设置子弹</h3><p>接下来设置子弹，同样是给子弹加上一个碰撞体，这里选择圆形碰撞体 <code>Circle Collider 2D</code>，并且设置好半径，然后把 <code>Is Trigger</code> 勾选。</p><p><img src="https://i.loli.net/2021/05/03/m75TWwFX9c3Ci2f.jpg" alt="QQ20210503-153200.jpg"></p><p>然后点击属性面板 <code>Inspector</code> 顶部的 <code>Tag</code>，新增一个 <code>Bullet</code> 标签，然后将子弹设置为该标签。</p><p><img src="https://i.loli.net/2021/05/03/WjCBiDguzGR72My.jpg" alt="QQ20210503-155517.jpg"></p><p>接下来修改调试场景的配置，场景像素配置修改为 <code>Free Aspect</code>，再把 <code>Maximize On Play</code>（最大化）点亮。</p><p><img src="https://i.loli.net/2021/05/03/xFUiO4JTQPWncEz.jpg" alt="QQ20210503-160354.jpg"></p><p>这样就可以看到屏幕摄像机拍不到的地方了，然后进入调试场景测试：</p><p><img src="https://i.loli.net/2021/05/03/1dzFQIGHKsuYgZT.gif" alt="Kapture 2021-05-03 at 16.04.59.gif"></p><p>可以看到子弹离开游戏区域（深色）时就会被自动销毁了。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（一）</title>
      <link href="2021/05/02/monster-game-1/"/>
      <url>2021/05/02/monster-game-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>短篇 AVG 游戏的流程已经差不多了，现在就差 cee 把游戏要用的素材提供给我，最后再导入测试就基本完成了。</p><p>所以趁这个时间，我打算把原来在 cocos creator 引擎上《名为怪物的游戏》制作进度移植到 unity 引擎。</p><p>同时花了一晚上的时间把火兔游戏的官网重建成这样一个博客，后续将会以博文的方式直播制作过程或者发布游戏预告。</p><p>（直播制作过程主要是为了防鸽……）</p><h2 id="移植原因"><a href="#移植原因" class="headerlink" title="移植原因"></a>移植原因</h2><p>首先我很喜欢 cocos creator 引擎，不仅是因为国人制作的，而且上手简单。</p><p>在制作了游戏的序章之后，发现 cocos creator 不能满足我们的要求，因为我们打算发布的是 PC 端，<br>而 cocos creator 主打移动游戏，比方说在游戏内调节分辨率 cocos 就不支持，还有因为 JavaScript<br>对文件读写什么的也有限制，要解决这些问题估计得花很多时间，但对于我们来说可以游刃有余的时间并不多了，<br>所以选择对单机游戏支持比较友好的 unity。</p><h2 id="星之魔女"><a href="#星之魔女" class="headerlink" title="星之魔女"></a>星之魔女</h2><p>星之魔女是《名为怪物的游戏》中的一个怀旧向像素风 FC 游戏。</p><p>使用 cocos creator 引擎开发的画面：<a href="https://www.bilibili.com/video/BV167411L7vJ/">https://www.bilibili.com/video/BV167411L7vJ/</a></p><iframe src="//player.bilibili.com/player.html?aid=89983856&bvid=BV167411L7vJ&cid=153683294&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="移植过程"><a href="#移植过程" class="headerlink" title="移植过程"></a>移植过程</h2><p>文章会包含制作过程的技术相关内容，如果有兴趣的小伙伴可以了解一下。</p><h3 id="素材导入"><a href="#素材导入" class="headerlink" title="素材导入"></a>素材导入</h3><p>由于之前小游戏已经做完了，所以素材可以直接导入。</p><p>像素风的序列帧：</p><p><img src="https://i.loli.net/2021/05/02/ZjeiXxRbSLBlHG7.jpg" alt="QQ20210502-214701.jpg"></p><h3 id="场景配置"><a href="#场景配置" class="headerlink" title="场景配置"></a>场景配置</h3><p>新建一个 1280 * 720 的场景。</p><p><img src="https://i.loli.net/2021/05/02/94OvjVgNtaY1HFG.jpg" alt="QQ20210502-214837.jpg"></p><h3 id="让角色动起来"><a href="#让角色动起来" class="headerlink" title="让角色动起来"></a>让角色动起来</h3><p>现在场景有了，但角色只是一张静态图片，要让角色可以通过按键移动，就要开始编写角色控制脚本了。</p><p>新建名为 <code>MiniGame_MoveEvent</code> 的脚本，用来控制角色移动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_MoveEvent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 500f;</span><br><span class="line"></span><br><span class="line">    private Vector3 left &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    private Vector3 right &#x3D; new Vector3(1, 1, 1);</span><br><span class="line"></span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))</span><br><span class="line">        &#123;</span><br><span class="line">            gameObject.transform.localScale &#x3D; left;</span><br><span class="line">            transform.Translate(Vector3.left * Time.deltaTime * speed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))</span><br><span class="line">        &#123;</span><br><span class="line">            gameObject.transform.localScale &#x3D; right;</span><br><span class="line">            transform.Translate(Vector3.right * Time.deltaTime * speed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 unity 中加载游戏会加载所有脚本，所以脚本的名字加上 <code>MiniGame_</code> 来区分。</p><p>为了让角色的朝向也能改变，在按下移动键的时候，顺便改变图片的翻转。</p><p>这里可以使用 WASD 来控制移动，也可以用方向键控制移动，目前只有左右移动，把这个脚本挂在 Player 对象上即可用键盘控制角色了：</p><p><img src="https://i.loli.net/2021/05/02/ZC73l8bPK6TiDho.gif" alt="Kapture 2021-05-02 at 21.54.23.gif"></p><p>实现角色移动还可以直接用 unity 自带的物理引擎，碰撞检测阻止移动就比较方便，但是我这里选择自己写脚本逻辑，因为 FC 游戏里的一些操作是不符合物理规律的。</p><h3 id="角色小动作"><a href="#角色小动作" class="headerlink" title="角色小动作"></a>角色小动作</h3><p>现在角色能动起来了，但是看起来就是在移动一张图片，没有游戏的感觉。</p><p>为了让角色变得“生动”，就要给角色加上动画演出效果。</p><p>unity 内置了动画系统，但是我这里也选择自己写脚本来控制。</p><p>新建一个名为 <code>MiniGame_Character</code> 的抽象类，因为不仅主角可以播放动画，敌人也有动画效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Character : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Sprite[] idle;</span><br><span class="line">    public Sprite[] hurt;</span><br><span class="line">    public Sprite[] attack;</span><br><span class="line">    public Sprite[] run;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 是否循环播放动画</span><br><span class="line">    private bool animateLoop;</span><br><span class="line">    &#x2F;&#x2F; 当前播放的动画</span><br><span class="line">    private string currentAnimate;</span><br><span class="line">    &#x2F;&#x2F; 当前动画index</span><br><span class="line">    private int animateIndex;</span><br><span class="line">    &#x2F;&#x2F; 当前动画精灵</span><br><span class="line">    public Sprite[] currentAnimateSprites;</span><br><span class="line">    &#x2F;&#x2F; 人物行走图</span><br><span class="line">    private Image character;</span><br><span class="line">    &#x2F;&#x2F; 动画播放间隔</span><br><span class="line">    private float animateInterval;</span><br><span class="line">    &#x2F;&#x2F; 当前时间</span><br><span class="line">    private float time;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        character &#x3D; GetComponent&lt;Image&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 死亡回调</span><br><span class="line">    protected abstract void DeadCallback();</span><br><span class="line"></span><br><span class="line">    public void SetAnimate(string animate)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 不播放重复动画</span><br><span class="line">        if (currentAnimate &#x3D;&#x3D; animate)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Debug.Log(&quot;切换动画：&quot; + animate);</span><br><span class="line"></span><br><span class="line">        currentAnimate &#x3D; animate;</span><br><span class="line">        animateIndex &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        switch (animate)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;idle&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                animateInterval &#x3D; 0.1f;</span><br><span class="line">                currentAnimateSprites &#x3D; idle;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;run&quot;:</span><br><span class="line">                animateLoop &#x3D; true;</span><br><span class="line">                animateInterval &#x3D; 0.1f;</span><br><span class="line">                currentAnimateSprites &#x3D; run;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;attack&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                currentAnimateSprites &#x3D; attack;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;hurt&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                currentAnimateSprites &#x3D; hurt;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void PlayAnimateListerner()</span><br><span class="line">    &#123;</span><br><span class="line">        if (animateLoop &#x3D;&#x3D; false &amp;&amp; animateIndex &gt; currentAnimateSprites.Length - 1)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Time.time &lt; time)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 时间自增</span><br><span class="line">        time &#x3D; Time.time + animateInterval;</span><br><span class="line"></span><br><span class="line">        if (animateLoop &#x3D;&#x3D; true)</span><br><span class="line">        &#123;</span><br><span class="line">            if (animateIndex &gt; currentAnimate.Length - 1)</span><br><span class="line">            &#123;</span><br><span class="line">                animateIndex &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        character.sprite &#x3D; currentAnimateSprites[animateIndex];</span><br><span class="line">        animateIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        PlayAnimateListerner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再新建一个用于玩家控制角色的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MiniGame_Character</span><br><span class="line">&#123;</span><br><span class="line">    protected override void DeadCallback()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO 进入GameOver场景</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画的播放逻辑很简单，就是循环播放图片，以下是主角的序列帧行走图：</p><p><img src="https://i.loli.net/2021/05/02/23e9XzWpJdjHBIw.jpg" alt="QQ20210502-220534.jpg"></p><p>跟制作动画的原理一样，就是以肉眼难以辨别的速度播放细微不同的图片，所以看起来像“动起来”一样。</p><p>为了间隔一定时间播放一张图片，这里用了一个计时器，定义下一个切换图片的时间点，比如 0.1 秒以后，如果当前时间等于 0.1 秒后，就播放下一张图片，然后切换图片的时间点等于当前时间加上 0.1s。</p><p>如果是循环播放类的图片，在图片全部播完之后，就会从第一张开始继续播放，如果是不循环的动画，就停止继续播放。</p><p>声明一个公开的方法 <code>SetAnimate</code>，只要传入要播放的动画，就会自动配置对应的参数，比如当前播放的图片数组和是否循环播放以及播放间隔。</p><p>这里要加一个判断，防止重复播放相同的动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (currentAnimate &#x3D;&#x3D; animate)</span><br><span class="line">&#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前已经在播这个动画了，再调用这个方法就直接返回。</p><p>抽象父类还定义了一个 <code>DeadCallback</code> 死亡回调方法，即当目标死亡时会做什么事情。</p><p>玩家死亡了就是 Gamover，敌人死亡了就爆金币。</p><p>现在先来做基本的动画：待机小动作和跑步动作。</p><p>要播放动画就调用 <code>SetAnimate</code> 方法，在 <code>MiniGame_Character</code> 加入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    SetAnimate(&quot;idle&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样角色在进入场景的时候，就会自动播放待机动画。</p><p>把 <code>MiniGame_Character</code> 脚本挂在场景的 Player 节点，并且在脚本组件上把待机动画图拖进去：</p><p><img src="https://i.loli.net/2021/05/02/IrwmhDUNsGRy8vl.jpg" alt="QQ20210502-221735.jpg"></p><p>进入场景就可以看到效果了：</p><p><img src="https://i.loli.net/2021/05/02/ytqZiRHB5nG6k98.gif" alt="Kapture 2021-05-02 at 22.19.09.gif"></p><p>一个简单的眨眼小动作！</p><p>同理要让角色有奔跑动画只需要在 <code>MiniGame_MoveEvent</code> 控制角色移动的时候播放动画即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;run&quot;);</span><br><span class="line">        gameObject.transform.localScale &#x3D; left;</span><br><span class="line">        transform.Translate(Vector3.left * Time.deltaTime * speed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;run&quot;);</span><br><span class="line">        gameObject.transform.localScale &#x3D; right;</span><br><span class="line">        transform.Translate(Vector3.right * Time.deltaTime * speed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断松开按键</span><br><span class="line">    if (Input.GetKeyUp(KeyCode.A) || Input.GetKeyUp(KeyCode.LeftArrow) ||</span><br><span class="line">        Input.GetKeyUp(KeyCode.D) || Input.GetKeyUp(KeyCode.RightArrow)</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;idle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还要判断当键盘松开的时候，要改成待机动画。</p><p>然后把奔跑的动画素材也拖到脚本组件上，演示效果：</p><p><img src="https://i.loli.net/2021/05/02/hvgxd8Y3pkworau.gif" alt="Kapture 2021-05-02 at 22.26.16.gif"></p><h3 id="小问题修正"><a href="#小问题修正" class="headerlink" title="小问题修正"></a>小问题修正</h3><p>这里其实还存在一个小问题，就是当按键和弹起的一瞬间，有几率出现判定失误，<code>GetKey</code> 方法是监听按键，不管是弹起还是按下都会触发，而 <code>GetKeyUp</code> 则是监听弹起事件，因此会存在监听到弹起事件的一瞬间同时也被判定为按下的情况，导致人物虽然停止移动了，但是奔跑动画却还在播放的情况。</p><p>除此之外，还有一个比较特殊的情况，就是如果玩家同时按下左方向和右方向，这样也会变得很奇怪。</p><p>为了修正上述两个问题，重新修改 <code>MiniGame_MoveEvent</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_MoveEvent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 400f;</span><br><span class="line"></span><br><span class="line">    private MiniGame_Player player;</span><br><span class="line"></span><br><span class="line">    private Vector3 left &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    private Vector3 right &#x3D; new Vector3(1, 1, 1);</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        player &#x3D; GetComponent&lt;MiniGame_Player&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        float raw &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">        float moveSpeed &#x3D; raw * Time.deltaTime * speed;</span><br><span class="line"></span><br><span class="line">        var pos &#x3D; transform.position;</span><br><span class="line">        pos.x +&#x3D; moveSpeed;</span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line"></span><br><span class="line">        if (raw &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;run&quot;);</span><br><span class="line">            gameObject.transform.localScale &#x3D; left;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (raw &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;run&quot;);</span><br><span class="line">            gameObject.transform.localScale &#x3D; right;</span><br><span class="line">        &#125; else</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;idle&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听按键的方法改成 <code>GetAxis</code>，这个方法会返回 -1~1的浮点数，</p><p><code>Horizontal</code> 是 unity 内置的常量，对应水平方向相关的按键，即左右方向键和 WASD。</p><p>所有的常量及对应的按键参数可以在构建游戏时，Player Settings 里查看：</p><p><img src="https://i.loli.net/2021/05/03/P4FR6JSWa3giLmK.jpg" alt="QQ20210503-002740.jpg"></p><p>这些常量有一个好处就是可以支持手柄操作。</p><p>因为 <code>GetAxis</code> 会返回一个范围值，而且是渐进式的增加，这样还可以让角色有一个起跑短暂加速的感觉，在松开按键的时候，也会有缓冲减速效果。</p><p>修改后的演示效果：</p><p><img src="https://i.loli.net/2021/05/02/jUuVS9l6sPQzTO2.gif" alt="Kapture 2021-05-02 at 23.17.15.gif"></p><p>另外，unity 还有一个 <code>GetAxisRaw</code> 方法，类似 <code>GetAxis</code>，但是它只会返回三个值：-1、0、1。</p><p>如果使用 <code>GetAxisRaw</code> 方法，就没有平滑起跑的效果了，而是直接以最大的速度奔跑，改成 <code>GetAxisRaw</code> 后的演示效果如下：</p><p><img src="https://i.loli.net/2021/05/02/agpb3rl1ihWxLo7.gif" alt="Kapture 2021-05-02 at 23.20.22.gif"></p><p>两种效果都各有好坏，有缓冲效果感觉更加笨重，但是比较真实，以最大速度起跑操作体验更好。</p><p>这里我就采用直接最大速度开始奔跑的方案，另外，如果同时按下左右方向键，则行动会立即停止，不会因为同时按而产生奇奇怪怪的结果了。</p><p>而动画是根据按压的 raw 返回值来判断的，也就不会出现行动停止奔跑动画还在继续的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 名为怪物的游戏 </category>
          
          <category> 制作过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于火兔游戏工作室</title>
      <link href="2021/05/01/welcome/"/>
      <url>2021/05/01/welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="关于火兔游戏工作室"><a href="#关于火兔游戏工作室" class="headerlink" title="关于火兔游戏工作室"></a>关于火兔游戏工作室</h1><h2 id="成员组成"><a href="#成员组成" class="headerlink" title="成员组成"></a>成员组成</h2><p>火兔游戏工作室目前由两个人组成：我（火烧兔子）和 Cee。</p><p>我主要负责游戏的程序，Cee 主要负责游戏的美工以及剧本的主线剧情。</p><h2 id="游戏作品"><a href="#游戏作品" class="headerlink" title="游戏作品"></a>游戏作品</h2><p>我们联合制作的第一部作品是「月之幻想」，记得当时只用了一个月的时间就完成 Demo 版，但最后很遗憾还是没有做到完结。</p><p>我个人的作品还有：</p><ul><li>【短篇AVG】路人甲的故事</li><li>【网页版】魔王传说系列：第三弹（已下线）</li><li>【RPG】魔王传说系列：第一弹及第二弹</li><li>【RPG】宠物战记</li><li>【RPG】冒险物语</li><li>【RPG】黑暗刻印</li></ul><h2 id="新作预告"><a href="#新作预告" class="headerlink" title="新作预告"></a>新作预告</h2><p>目前正在制作一部短篇 AVG，已经快完成了，近期之内应该就会发布。</p><p>以及原创长篇 RPG ——「名为怪物的游戏」。</p><p>由于种种原因导致进度停滞不前，现在开始重新计划中，等到现在制作的 AVG 完成就可以开始了。</p>]]></content>
      
      
      <categories>
          
          <category> 非游戏分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
